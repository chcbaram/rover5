
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e120  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM          00000008  0800e120  0800e120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000009ac  20000000  0800e128  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001348  20000a00  0800ec00  00018a00  2**9
                  ALLOC
  4 ._usrstack    00000100  20001d48  0800ff48  00018a00  2**0
                  ALLOC
  5 .ARM.attributes 00000033  00000000  00000000  000189ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007ddd  00000000  00000000  000189df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ce4  00000000  00000000  000207bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006058  00000000  00000000  000234a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a28  00000000  00000000  000294f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010d0  00000000  00000000  00029f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003174  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002268  00000000  00000000  0002e164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  000303cc  2**0
                  CONTENTS, READONLY
 14 .debug_frame  000026dc  00000000  00000000  0003043c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 69 2a 00 08                             .P. i*..

08000008 <__aeabi_drsub>:
 8000008:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800000c:	e002      	b.n	8000014 <__adddf3>
 800000e:	bf00      	nop

08000010 <__aeabi_dsub>:
 8000010:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000014 <__adddf3>:
 8000014:	b530      	push	{r4, r5, lr}
 8000016:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800001a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800001e:	ea94 0f05 	teq	r4, r5
 8000022:	bf08      	it	eq
 8000024:	ea90 0f02 	teqeq	r0, r2
 8000028:	bf1f      	itttt	ne
 800002a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800002e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000032:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000036:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800003a:	f000 80e2 	beq.w	8000202 <__adddf3+0x1ee>
 800003e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000042:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000046:	bfb8      	it	lt
 8000048:	426d      	neglt	r5, r5
 800004a:	dd0c      	ble.n	8000066 <__adddf3+0x52>
 800004c:	442c      	add	r4, r5
 800004e:	ea80 0202 	eor.w	r2, r0, r2
 8000052:	ea81 0303 	eor.w	r3, r1, r3
 8000056:	ea82 0000 	eor.w	r0, r2, r0
 800005a:	ea83 0101 	eor.w	r1, r3, r1
 800005e:	ea80 0202 	eor.w	r2, r0, r2
 8000062:	ea81 0303 	eor.w	r3, r1, r3
 8000066:	2d36      	cmp	r5, #54	; 0x36
 8000068:	bf88      	it	hi
 800006a:	bd30      	pophi	{r4, r5, pc}
 800006c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000070:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000074:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000078:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800007c:	d002      	beq.n	8000084 <__adddf3+0x70>
 800007e:	4240      	negs	r0, r0
 8000080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000084:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000088:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800008c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000090:	d002      	beq.n	8000098 <__adddf3+0x84>
 8000092:	4252      	negs	r2, r2
 8000094:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000098:	ea94 0f05 	teq	r4, r5
 800009c:	f000 80a7 	beq.w	80001ee <__adddf3+0x1da>
 80000a0:	f1a4 0401 	sub.w	r4, r4, #1
 80000a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80000a8:	db0d      	blt.n	80000c6 <__adddf3+0xb2>
 80000aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80000ae:	fa22 f205 	lsr.w	r2, r2, r5
 80000b2:	1880      	adds	r0, r0, r2
 80000b4:	f141 0100 	adc.w	r1, r1, #0
 80000b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80000bc:	1880      	adds	r0, r0, r2
 80000be:	fa43 f305 	asr.w	r3, r3, r5
 80000c2:	4159      	adcs	r1, r3
 80000c4:	e00e      	b.n	80000e4 <__adddf3+0xd0>
 80000c6:	f1a5 0520 	sub.w	r5, r5, #32
 80000ca:	f10e 0e20 	add.w	lr, lr, #32
 80000ce:	2a01      	cmp	r2, #1
 80000d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80000d4:	bf28      	it	cs
 80000d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80000da:	fa43 f305 	asr.w	r3, r3, r5
 80000de:	18c0      	adds	r0, r0, r3
 80000e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80000e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80000e8:	d507      	bpl.n	80000fa <__adddf3+0xe6>
 80000ea:	f04f 0e00 	mov.w	lr, #0
 80000ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80000f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80000f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80000fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80000fe:	d31b      	bcc.n	8000138 <__adddf3+0x124>
 8000100:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000104:	d30c      	bcc.n	8000120 <__adddf3+0x10c>
 8000106:	0849      	lsrs	r1, r1, #1
 8000108:	ea5f 0030 	movs.w	r0, r0, rrx
 800010c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000110:	f104 0401 	add.w	r4, r4, #1
 8000114:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000118:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800011c:	f080 809a 	bcs.w	8000254 <__adddf3+0x240>
 8000120:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000124:	bf08      	it	eq
 8000126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800012a:	f150 0000 	adcs.w	r0, r0, #0
 800012e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000132:	ea41 0105 	orr.w	r1, r1, r5
 8000136:	bd30      	pop	{r4, r5, pc}
 8000138:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800013c:	4140      	adcs	r0, r0
 800013e:	eb41 0101 	adc.w	r1, r1, r1
 8000142:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000146:	f1a4 0401 	sub.w	r4, r4, #1
 800014a:	d1e9      	bne.n	8000120 <__adddf3+0x10c>
 800014c:	f091 0f00 	teq	r1, #0
 8000150:	bf04      	itt	eq
 8000152:	4601      	moveq	r1, r0
 8000154:	2000      	moveq	r0, #0
 8000156:	fab1 f381 	clz	r3, r1
 800015a:	bf08      	it	eq
 800015c:	3320      	addeq	r3, #32
 800015e:	f1a3 030b 	sub.w	r3, r3, #11
 8000162:	f1b3 0220 	subs.w	r2, r3, #32
 8000166:	da0c      	bge.n	8000182 <__adddf3+0x16e>
 8000168:	320c      	adds	r2, #12
 800016a:	dd08      	ble.n	800017e <__adddf3+0x16a>
 800016c:	f102 0c14 	add.w	ip, r2, #20
 8000170:	f1c2 020c 	rsb	r2, r2, #12
 8000174:	fa01 f00c 	lsl.w	r0, r1, ip
 8000178:	fa21 f102 	lsr.w	r1, r1, r2
 800017c:	e00c      	b.n	8000198 <__adddf3+0x184>
 800017e:	f102 0214 	add.w	r2, r2, #20
 8000182:	bfd8      	it	le
 8000184:	f1c2 0c20 	rsble	ip, r2, #32
 8000188:	fa01 f102 	lsl.w	r1, r1, r2
 800018c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000190:	bfdc      	itt	le
 8000192:	ea41 010c 	orrle.w	r1, r1, ip
 8000196:	4090      	lslle	r0, r2
 8000198:	1ae4      	subs	r4, r4, r3
 800019a:	bfa2      	ittt	ge
 800019c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80001a0:	4329      	orrge	r1, r5
 80001a2:	bd30      	popge	{r4, r5, pc}
 80001a4:	ea6f 0404 	mvn.w	r4, r4
 80001a8:	3c1f      	subs	r4, #31
 80001aa:	da1c      	bge.n	80001e6 <__adddf3+0x1d2>
 80001ac:	340c      	adds	r4, #12
 80001ae:	dc0e      	bgt.n	80001ce <__adddf3+0x1ba>
 80001b0:	f104 0414 	add.w	r4, r4, #20
 80001b4:	f1c4 0220 	rsb	r2, r4, #32
 80001b8:	fa20 f004 	lsr.w	r0, r0, r4
 80001bc:	fa01 f302 	lsl.w	r3, r1, r2
 80001c0:	ea40 0003 	orr.w	r0, r0, r3
 80001c4:	fa21 f304 	lsr.w	r3, r1, r4
 80001c8:	ea45 0103 	orr.w	r1, r5, r3
 80001cc:	bd30      	pop	{r4, r5, pc}
 80001ce:	f1c4 040c 	rsb	r4, r4, #12
 80001d2:	f1c4 0220 	rsb	r2, r4, #32
 80001d6:	fa20 f002 	lsr.w	r0, r0, r2
 80001da:	fa01 f304 	lsl.w	r3, r1, r4
 80001de:	ea40 0003 	orr.w	r0, r0, r3
 80001e2:	4629      	mov	r1, r5
 80001e4:	bd30      	pop	{r4, r5, pc}
 80001e6:	fa21 f004 	lsr.w	r0, r1, r4
 80001ea:	4629      	mov	r1, r5
 80001ec:	bd30      	pop	{r4, r5, pc}
 80001ee:	f094 0f00 	teq	r4, #0
 80001f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80001f6:	bf06      	itte	eq
 80001f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80001fc:	3401      	addeq	r4, #1
 80001fe:	3d01      	subne	r5, #1
 8000200:	e74e      	b.n	80000a0 <__adddf3+0x8c>
 8000202:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000206:	bf18      	it	ne
 8000208:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020c:	d029      	beq.n	8000262 <__adddf3+0x24e>
 800020e:	ea94 0f05 	teq	r4, r5
 8000212:	bf08      	it	eq
 8000214:	ea90 0f02 	teqeq	r0, r2
 8000218:	d005      	beq.n	8000226 <__adddf3+0x212>
 800021a:	ea54 0c00 	orrs.w	ip, r4, r0
 800021e:	bf04      	itt	eq
 8000220:	4619      	moveq	r1, r3
 8000222:	4610      	moveq	r0, r2
 8000224:	bd30      	pop	{r4, r5, pc}
 8000226:	ea91 0f03 	teq	r1, r3
 800022a:	bf1e      	ittt	ne
 800022c:	2100      	movne	r1, #0
 800022e:	2000      	movne	r0, #0
 8000230:	bd30      	popne	{r4, r5, pc}
 8000232:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000236:	d105      	bne.n	8000244 <__adddf3+0x230>
 8000238:	0040      	lsls	r0, r0, #1
 800023a:	4149      	adcs	r1, r1
 800023c:	bf28      	it	cs
 800023e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000242:	bd30      	pop	{r4, r5, pc}
 8000244:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000248:	bf3c      	itt	cc
 800024a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800024e:	bd30      	popcc	{r4, r5, pc}
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000258:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800025c:	f04f 0000 	mov.w	r0, #0
 8000260:	bd30      	pop	{r4, r5, pc}
 8000262:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000266:	bf1a      	itte	ne
 8000268:	4619      	movne	r1, r3
 800026a:	4610      	movne	r0, r2
 800026c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000270:	bf1c      	itt	ne
 8000272:	460b      	movne	r3, r1
 8000274:	4602      	movne	r2, r0
 8000276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800027a:	bf06      	itte	eq
 800027c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000280:	ea91 0f03 	teqeq	r1, r3
 8000284:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000288:	bd30      	pop	{r4, r5, pc}
 800028a:	bf00      	nop

0800028c <__aeabi_ui2d>:
 800028c:	f090 0f00 	teq	r0, #0
 8000290:	bf04      	itt	eq
 8000292:	2100      	moveq	r1, #0
 8000294:	4770      	bxeq	lr
 8000296:	b530      	push	{r4, r5, lr}
 8000298:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800029c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002a0:	f04f 0500 	mov.w	r5, #0
 80002a4:	f04f 0100 	mov.w	r1, #0
 80002a8:	e750      	b.n	800014c <__adddf3+0x138>
 80002aa:	bf00      	nop

080002ac <__aeabi_i2d>:
 80002ac:	f090 0f00 	teq	r0, #0
 80002b0:	bf04      	itt	eq
 80002b2:	2100      	moveq	r1, #0
 80002b4:	4770      	bxeq	lr
 80002b6:	b530      	push	{r4, r5, lr}
 80002b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80002bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80002c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	f04f 0100 	mov.w	r1, #0
 80002cc:	e73e      	b.n	800014c <__adddf3+0x138>
 80002ce:	bf00      	nop

080002d0 <__aeabi_f2d>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80002d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80002de:	bf1f      	itttt	ne
 80002e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80002e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80002ec:	4770      	bxne	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf14      	ite	ne
 80002f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80002f8:	4770      	bxeq	lr
 80002fa:	b530      	push	{r4, r5, lr}
 80002fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	e720      	b.n	800014c <__adddf3+0x138>
 800030a:	bf00      	nop

0800030c <__aeabi_ul2d>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	b530      	push	{r4, r5, lr}
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	e00a      	b.n	8000332 <__aeabi_l2d+0x16>

0800031c <__aeabi_l2d>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	b530      	push	{r4, r5, lr}
 8000326:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800032a:	d502      	bpl.n	8000332 <__aeabi_l2d+0x16>
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000336:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800033a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800033e:	f43f aedc 	beq.w	80000fa <__adddf3+0xe6>
 8000342:	f04f 0203 	mov.w	r2, #3
 8000346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800034a:	bf18      	it	ne
 800034c:	3203      	addne	r2, #3
 800034e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000352:	bf18      	it	ne
 8000354:	3203      	addne	r2, #3
 8000356:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 fe03 	lsl.w	lr, r1, r3
 800036a:	ea40 000e 	orr.w	r0, r0, lr
 800036e:	fa21 f102 	lsr.w	r1, r1, r2
 8000372:	4414      	add	r4, r2
 8000374:	e6c1      	b.n	80000fa <__adddf3+0xe6>
 8000376:	bf00      	nop

08000378 <__aeabi_dmul>:
 8000378:	b570      	push	{r4, r5, r6, lr}
 800037a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000382:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000386:	bf1d      	ittte	ne
 8000388:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800038c:	ea94 0f0c 	teqne	r4, ip
 8000390:	ea95 0f0c 	teqne	r5, ip
 8000394:	f000 f8de 	bleq	8000554 <__aeabi_dmul+0x1dc>
 8000398:	442c      	add	r4, r5
 800039a:	ea81 0603 	eor.w	r6, r1, r3
 800039e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80003a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80003a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80003aa:	bf18      	it	ne
 80003ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80003b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003b8:	d038      	beq.n	800042c <__aeabi_dmul+0xb4>
 80003ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80003be:	f04f 0500 	mov.w	r5, #0
 80003c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80003ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003ce:	f04f 0600 	mov.w	r6, #0
 80003d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003d6:	f09c 0f00 	teq	ip, #0
 80003da:	bf18      	it	ne
 80003dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80003e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80003e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80003e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80003ec:	d204      	bcs.n	80003f8 <__aeabi_dmul+0x80>
 80003ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003f2:	416d      	adcs	r5, r5
 80003f4:	eb46 0606 	adc.w	r6, r6, r6
 80003f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000400:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000404:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000408:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800040c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000410:	bf88      	it	hi
 8000412:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000416:	d81e      	bhi.n	8000456 <__aeabi_dmul+0xde>
 8000418:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000430:	ea46 0101 	orr.w	r1, r6, r1
 8000434:	ea40 0002 	orr.w	r0, r0, r2
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000440:	bfc2      	ittt	gt
 8000442:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000446:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800044a:	bd70      	popgt	{r4, r5, r6, pc}
 800044c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000450:	f04f 0e00 	mov.w	lr, #0
 8000454:	3c01      	subs	r4, #1
 8000456:	f300 80ab 	bgt.w	80005b0 <__aeabi_dmul+0x238>
 800045a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800045e:	bfde      	ittt	le
 8000460:	2000      	movle	r0, #0
 8000462:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000466:	bd70      	pople	{r4, r5, r6, pc}
 8000468:	f1c4 0400 	rsb	r4, r4, #0
 800046c:	3c20      	subs	r4, #32
 800046e:	da35      	bge.n	80004dc <__aeabi_dmul+0x164>
 8000470:	340c      	adds	r4, #12
 8000472:	dc1b      	bgt.n	80004ac <__aeabi_dmul+0x134>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0520 	rsb	r5, r4, #32
 800047c:	fa00 f305 	lsl.w	r3, r0, r5
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f205 	lsl.w	r2, r1, r5
 8000488:	ea40 0002 	orr.w	r0, r0, r2
 800048c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000498:	fa21 f604 	lsr.w	r6, r1, r4
 800049c:	eb42 0106 	adc.w	r1, r2, r6
 80004a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f1c4 040c 	rsb	r4, r4, #12
 80004b0:	f1c4 0520 	rsb	r5, r4, #32
 80004b4:	fa00 f304 	lsl.w	r3, r0, r4
 80004b8:	fa20 f005 	lsr.w	r0, r0, r5
 80004bc:	fa01 f204 	lsl.w	r2, r1, r4
 80004c0:	ea40 0002 	orr.w	r0, r0, r2
 80004c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004cc:	f141 0100 	adc.w	r1, r1, #0
 80004d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f1c4 0520 	rsb	r5, r4, #32
 80004e0:	fa00 f205 	lsl.w	r2, r0, r5
 80004e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80004e8:	fa20 f304 	lsr.w	r3, r0, r4
 80004ec:	fa01 f205 	lsl.w	r2, r1, r5
 80004f0:	ea43 0302 	orr.w	r3, r3, r2
 80004f4:	fa21 f004 	lsr.w	r0, r1, r4
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000500:	ea20 0002 	bic.w	r0, r0, r2
 8000504:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800050c:	bf08      	it	eq
 800050e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f094 0f00 	teq	r4, #0
 8000518:	d10f      	bne.n	800053a <__aeabi_dmul+0x1c2>
 800051a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800051e:	0040      	lsls	r0, r0, #1
 8000520:	eb41 0101 	adc.w	r1, r1, r1
 8000524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000528:	bf08      	it	eq
 800052a:	3c01      	subeq	r4, #1
 800052c:	d0f7      	beq.n	800051e <__aeabi_dmul+0x1a6>
 800052e:	ea41 0106 	orr.w	r1, r1, r6
 8000532:	f095 0f00 	teq	r5, #0
 8000536:	bf18      	it	ne
 8000538:	4770      	bxne	lr
 800053a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	eb43 0303 	adc.w	r3, r3, r3
 8000544:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000548:	bf08      	it	eq
 800054a:	3d01      	subeq	r5, #1
 800054c:	d0f7      	beq.n	800053e <__aeabi_dmul+0x1c6>
 800054e:	ea43 0306 	orr.w	r3, r3, r6
 8000552:	4770      	bx	lr
 8000554:	ea94 0f0c 	teq	r4, ip
 8000558:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800055c:	bf18      	it	ne
 800055e:	ea95 0f0c 	teqne	r5, ip
 8000562:	d00c      	beq.n	800057e <__aeabi_dmul+0x206>
 8000564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000568:	bf18      	it	ne
 800056a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800056e:	d1d1      	bne.n	8000514 <__aeabi_dmul+0x19c>
 8000570:	ea81 0103 	eor.w	r1, r1, r3
 8000574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000582:	bf06      	itte	eq
 8000584:	4610      	moveq	r0, r2
 8000586:	4619      	moveq	r1, r3
 8000588:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800058c:	d019      	beq.n	80005c2 <__aeabi_dmul+0x24a>
 800058e:	ea94 0f0c 	teq	r4, ip
 8000592:	d102      	bne.n	800059a <__aeabi_dmul+0x222>
 8000594:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000598:	d113      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 800059a:	ea95 0f0c 	teq	r5, ip
 800059e:	d105      	bne.n	80005ac <__aeabi_dmul+0x234>
 80005a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80005a4:	bf1c      	itt	ne
 80005a6:	4610      	movne	r0, r2
 80005a8:	4619      	movne	r1, r3
 80005aa:	d10a      	bne.n	80005c2 <__aeabi_dmul+0x24a>
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80005c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80005ca:	bd70      	pop	{r4, r5, r6, pc}

080005cc <__aeabi_ddiv>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8a7 	bleq	800073a <__aeabi_ddiv+0x16e>
 80005ec:	eba4 0405 	sub.w	r4, r4, r5
 80005f0:	ea81 0e03 	eor.w	lr, r1, r3
 80005f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005fc:	f000 8088 	beq.w	8000710 <__aeabi_ddiv+0x144>
 8000600:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000608:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800060c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000610:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000614:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000618:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800061c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000620:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000624:	429d      	cmp	r5, r3
 8000626:	bf08      	it	eq
 8000628:	4296      	cmpeq	r6, r2
 800062a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800062e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000632:	d202      	bcs.n	800063a <__aeabi_ddiv+0x6e>
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	ea4f 0232 	mov.w	r2, r2, rrx
 800063a:	1ab6      	subs	r6, r6, r2
 800063c:	eb65 0503 	sbc.w	r5, r5, r3
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	ea4f 0232 	mov.w	r2, r2, rrx
 8000646:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800064a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800064e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000652:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000656:	bf22      	ittt	cs
 8000658:	1ab6      	subcs	r6, r6, r2
 800065a:	4675      	movcs	r5, lr
 800065c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	ea4f 0232 	mov.w	r2, r2, rrx
 8000666:	ebb6 0e02 	subs.w	lr, r6, r2
 800066a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800066e:	bf22      	ittt	cs
 8000670:	1ab6      	subcs	r6, r6, r2
 8000672:	4675      	movcs	r5, lr
 8000674:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	ea4f 0232 	mov.w	r2, r2, rrx
 800067e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000682:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000686:	bf22      	ittt	cs
 8000688:	1ab6      	subcs	r6, r6, r2
 800068a:	4675      	movcs	r5, lr
 800068c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000690:	085b      	lsrs	r3, r3, #1
 8000692:	ea4f 0232 	mov.w	r2, r2, rrx
 8000696:	ebb6 0e02 	subs.w	lr, r6, r2
 800069a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800069e:	bf22      	ittt	cs
 80006a0:	1ab6      	subcs	r6, r6, r2
 80006a2:	4675      	movcs	r5, lr
 80006a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80006ac:	d018      	beq.n	80006e0 <__aeabi_ddiv+0x114>
 80006ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80006b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80006b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80006ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80006be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80006c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80006c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80006ca:	d1c0      	bne.n	800064e <__aeabi_ddiv+0x82>
 80006cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006d0:	d10b      	bne.n	80006ea <__aeabi_ddiv+0x11e>
 80006d2:	ea41 0100 	orr.w	r1, r1, r0
 80006d6:	f04f 0000 	mov.w	r0, #0
 80006da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80006de:	e7b6      	b.n	800064e <__aeabi_ddiv+0x82>
 80006e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e4:	bf04      	itt	eq
 80006e6:	4301      	orreq	r1, r0
 80006e8:	2000      	moveq	r0, #0
 80006ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ee:	bf88      	it	hi
 80006f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f4:	f63f aeaf 	bhi.w	8000456 <__aeabi_dmul+0xde>
 80006f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80006fc:	bf04      	itt	eq
 80006fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000702:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000714:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000718:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	e690      	b.n	8000456 <__aeabi_dmul+0xde>
 8000734:	ea45 0e06 	orr.w	lr, r5, r6
 8000738:	e68d      	b.n	8000456 <__aeabi_dmul+0xde>
 800073a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073e:	ea94 0f0c 	teq	r4, ip
 8000742:	bf08      	it	eq
 8000744:	ea95 0f0c 	teqeq	r5, ip
 8000748:	f43f af3b 	beq.w	80005c2 <__aeabi_dmul+0x24a>
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	d10a      	bne.n	8000768 <__aeabi_ddiv+0x19c>
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	f47f af34 	bne.w	80005c2 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	f47f af25 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000762:	4610      	mov	r0, r2
 8000764:	4619      	mov	r1, r3
 8000766:	e72c      	b.n	80005c2 <__aeabi_dmul+0x24a>
 8000768:	ea95 0f0c 	teq	r5, ip
 800076c:	d106      	bne.n	800077c <__aeabi_ddiv+0x1b0>
 800076e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000772:	f43f aefd 	beq.w	8000570 <__aeabi_dmul+0x1f8>
 8000776:	4610      	mov	r0, r2
 8000778:	4619      	mov	r1, r3
 800077a:	e722      	b.n	80005c2 <__aeabi_dmul+0x24a>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	f47f aec5 	bne.w	8000514 <__aeabi_dmul+0x19c>
 800078a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800078e:	f47f af0d 	bne.w	80005ac <__aeabi_dmul+0x234>
 8000792:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000796:	f47f aeeb 	bne.w	8000570 <__aeabi_dmul+0x1f8>
 800079a:	e712      	b.n	80005c2 <__aeabi_dmul+0x24a>

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_d2iz>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008b4:	d215      	bcs.n	80008e2 <__aeabi_d2iz+0x36>
 80008b6:	d511      	bpl.n	80008dc <__aeabi_d2iz+0x30>
 80008b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d912      	bls.n	80008e8 <__aeabi_d2iz+0x3c>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008d2:	fa23 f002 	lsr.w	r0, r3, r2
 80008d6:	bf18      	it	ne
 80008d8:	4240      	negne	r0, r0
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008e6:	d105      	bne.n	80008f4 <__aeabi_d2iz+0x48>
 80008e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	bf08      	it	eq
 80008ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008f2:	4770      	bx	lr
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b94b      	cbnz	r3, 80009f2 <__aeabi_uldivmod+0x16>
 80009de:	b942      	cbnz	r2, 80009f2 <__aeabi_uldivmod+0x16>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	d002      	beq.n	80009ee <__aeabi_uldivmod+0x12>
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ec:	4608      	mov	r0, r1
 80009ee:	f000 b83b 	b.w	8000a68 <__aeabi_idiv0>
 80009f2:	b082      	sub	sp, #8
 80009f4:	46ec      	mov	ip, sp
 80009f6:	e92d 5000 	stmdb	sp!, {ip, lr}
 80009fa:	f000 f81d 	bl	8000a38 <__gnu_uldivmod_helper>
 80009fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a02:	b002      	add	sp, #8
 8000a04:	bc0c      	pop	{r2, r3}
 8000a06:	4770      	bx	lr

08000a08 <__gnu_ldivmod_helper>:
 8000a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a0c:	4616      	mov	r6, r2
 8000a0e:	4698      	mov	r8, r3
 8000a10:	4604      	mov	r4, r0
 8000a12:	460d      	mov	r5, r1
 8000a14:	f000 f82a 	bl	8000a6c <__divdi3>
 8000a18:	fb06 fc01 	mul.w	ip, r6, r1
 8000a1c:	fba6 2300 	umull	r2, r3, r6, r0
 8000a20:	fb00 c708 	mla	r7, r0, r8, ip
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	1aa2      	subs	r2, r4, r2
 8000a28:	eb65 0303 	sbc.w	r3, r5, r3
 8000a2c:	9c06      	ldr	r4, [sp, #24]
 8000a2e:	e9c4 2300 	strd	r2, r3, [r4]
 8000a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a36:	bf00      	nop

08000a38 <__gnu_uldivmod_helper>:
 8000a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3c:	4690      	mov	r8, r2
 8000a3e:	4606      	mov	r6, r0
 8000a40:	460f      	mov	r7, r1
 8000a42:	461d      	mov	r5, r3
 8000a44:	f000 f970 	bl	8000d28 <__udivdi3>
 8000a48:	fb00 f305 	mul.w	r3, r0, r5
 8000a4c:	fba0 4508 	umull	r4, r5, r0, r8
 8000a50:	fb08 3801 	mla	r8, r8, r1, r3
 8000a54:	9b06      	ldr	r3, [sp, #24]
 8000a56:	4445      	add	r5, r8
 8000a58:	1b34      	subs	r4, r6, r4
 8000a5a:	eb67 0505 	sbc.w	r5, r7, r5
 8000a5e:	e9c3 4500 	strd	r4, r5, [r3]
 8000a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a66:	bf00      	nop

08000a68 <__aeabi_idiv0>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__divdi3>:
 8000a6c:	2900      	cmp	r1, #0
 8000a6e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a72:	461d      	mov	r5, r3
 8000a74:	f2c0 809d 	blt.w	8000bb2 <__divdi3+0x146>
 8000a78:	2400      	movs	r4, #0
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	f2c0 8094 	blt.w	8000ba8 <__divdi3+0x13c>
 8000a80:	4680      	mov	r8, r0
 8000a82:	460f      	mov	r7, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	461e      	mov	r6, r3
 8000a88:	bbe3      	cbnz	r3, 8000b04 <__divdi3+0x98>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	d955      	bls.n	8000b3a <__divdi3+0xce>
 8000a8e:	fab2 f782 	clz	r7, r2
 8000a92:	b147      	cbz	r7, 8000aa6 <__divdi3+0x3a>
 8000a94:	f1c7 0520 	rsb	r5, r7, #32
 8000a98:	fa20 f605 	lsr.w	r6, r0, r5
 8000a9c:	fa01 f107 	lsl.w	r1, r1, r7
 8000aa0:	40ba      	lsls	r2, r7
 8000aa2:	40b8      	lsls	r0, r7
 8000aa4:	4331      	orrs	r1, r6
 8000aa6:	0c17      	lsrs	r7, r2, #16
 8000aa8:	fbb1 f6f7 	udiv	r6, r1, r7
 8000aac:	fa1f fc82 	uxth.w	ip, r2
 8000ab0:	fb07 1116 	mls	r1, r7, r6, r1
 8000ab4:	fb0c f506 	mul.w	r5, ip, r6
 8000ab8:	0c03      	lsrs	r3, r0, #16
 8000aba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000abe:	429d      	cmp	r5, r3
 8000ac0:	d908      	bls.n	8000ad4 <__divdi3+0x68>
 8000ac2:	1e71      	subs	r1, r6, #1
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	f080 8113 	bcs.w	8000cf0 <__divdi3+0x284>
 8000aca:	429d      	cmp	r5, r3
 8000acc:	f240 8110 	bls.w	8000cf0 <__divdi3+0x284>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	189b      	adds	r3, r3, r2
 8000ad4:	1b59      	subs	r1, r3, r5
 8000ad6:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ada:	fb07 1315 	mls	r3, r7, r5, r1
 8000ade:	fb0c fc05 	mul.w	ip, ip, r5
 8000ae2:	b280      	uxth	r0, r0
 8000ae4:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8000ae8:	458c      	cmp	ip, r1
 8000aea:	d907      	bls.n	8000afc <__divdi3+0x90>
 8000aec:	1e6b      	subs	r3, r5, #1
 8000aee:	188a      	adds	r2, r1, r2
 8000af0:	f080 8100 	bcs.w	8000cf4 <__divdi3+0x288>
 8000af4:	4594      	cmp	ip, r2
 8000af6:	f240 80fd 	bls.w	8000cf4 <__divdi3+0x288>
 8000afa:	3d02      	subs	r5, #2
 8000afc:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
 8000b00:	2500      	movs	r5, #0
 8000b02:	e003      	b.n	8000b0c <__divdi3+0xa0>
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d90c      	bls.n	8000b22 <__divdi3+0xb6>
 8000b08:	2500      	movs	r5, #0
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	462b      	mov	r3, r5
 8000b10:	b114      	cbz	r4, 8000b18 <__divdi3+0xac>
 8000b12:	4252      	negs	r2, r2
 8000b14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b18:	4610      	mov	r0, r2
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b20:	4770      	bx	lr
 8000b22:	fab3 f583 	clz	r5, r3
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	f040 8087 	bne.w	8000c3a <__divdi3+0x1ce>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d301      	bcc.n	8000b34 <__divdi3+0xc8>
 8000b30:	4282      	cmp	r2, r0
 8000b32:	d8ea      	bhi.n	8000b0a <__divdi3+0x9e>
 8000b34:	2500      	movs	r5, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	e7e8      	b.n	8000b0c <__divdi3+0xa0>
 8000b3a:	b912      	cbnz	r2, 8000b42 <__divdi3+0xd6>
 8000b3c:	2601      	movs	r6, #1
 8000b3e:	fbb6 f2f2 	udiv	r2, r6, r2
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d139      	bne.n	8000bbe <__divdi3+0x152>
 8000b4a:	1a8e      	subs	r6, r1, r2
 8000b4c:	0c13      	lsrs	r3, r2, #16
 8000b4e:	fa1f fc82 	uxth.w	ip, r2
 8000b52:	2501      	movs	r5, #1
 8000b54:	fbb6 f7f3 	udiv	r7, r6, r3
 8000b58:	fb03 6117 	mls	r1, r3, r7, r6
 8000b5c:	fb0c f807 	mul.w	r8, ip, r7
 8000b60:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8000b64:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
 8000b68:	45b0      	cmp	r8, r6
 8000b6a:	d906      	bls.n	8000b7a <__divdi3+0x10e>
 8000b6c:	1e79      	subs	r1, r7, #1
 8000b6e:	18b6      	adds	r6, r6, r2
 8000b70:	d202      	bcs.n	8000b78 <__divdi3+0x10c>
 8000b72:	45b0      	cmp	r8, r6
 8000b74:	f200 80d3 	bhi.w	8000d1e <__divdi3+0x2b2>
 8000b78:	460f      	mov	r7, r1
 8000b7a:	ebc8 0606 	rsb	r6, r8, r6
 8000b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000b82:	fb03 6311 	mls	r3, r3, r1, r6
 8000b86:	fb0c fc01 	mul.w	ip, ip, r1
 8000b8a:	b280      	uxth	r0, r0
 8000b8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b90:	459c      	cmp	ip, r3
 8000b92:	d906      	bls.n	8000ba2 <__divdi3+0x136>
 8000b94:	1e4e      	subs	r6, r1, #1
 8000b96:	189a      	adds	r2, r3, r2
 8000b98:	d202      	bcs.n	8000ba0 <__divdi3+0x134>
 8000b9a:	4594      	cmp	ip, r2
 8000b9c:	f200 80c2 	bhi.w	8000d24 <__divdi3+0x2b8>
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8000ba6:	e7b1      	b.n	8000b0c <__divdi3+0xa0>
 8000ba8:	43e4      	mvns	r4, r4
 8000baa:	4252      	negs	r2, r2
 8000bac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb0:	e766      	b.n	8000a80 <__divdi3+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000bbc:	e75d      	b.n	8000a7a <__divdi3+0xe>
 8000bbe:	40b2      	lsls	r2, r6
 8000bc0:	f1c6 0920 	rsb	r9, r6, #32
 8000bc4:	fa21 f709 	lsr.w	r7, r1, r9
 8000bc8:	fa20 f909 	lsr.w	r9, r0, r9
 8000bcc:	fa01 f106 	lsl.w	r1, r1, r6
 8000bd0:	0c13      	lsrs	r3, r2, #16
 8000bd2:	fbb7 f8f3 	udiv	r8, r7, r3
 8000bd6:	fa1f fc82 	uxth.w	ip, r2
 8000bda:	fb03 7718 	mls	r7, r3, r8, r7
 8000bde:	fb0c f508 	mul.w	r5, ip, r8
 8000be2:	ea49 0901 	orr.w	r9, r9, r1
 8000be6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8000bea:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000bee:	40b0      	lsls	r0, r6
 8000bf0:	42bd      	cmp	r5, r7
 8000bf2:	d90a      	bls.n	8000c0a <__divdi3+0x19e>
 8000bf4:	18bf      	adds	r7, r7, r2
 8000bf6:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8000bfa:	f080 808e 	bcs.w	8000d1a <__divdi3+0x2ae>
 8000bfe:	42bd      	cmp	r5, r7
 8000c00:	f240 808b 	bls.w	8000d1a <__divdi3+0x2ae>
 8000c04:	f1a8 0802 	sub.w	r8, r8, #2
 8000c08:	18bf      	adds	r7, r7, r2
 8000c0a:	1b79      	subs	r1, r7, r5
 8000c0c:	fbb1 f5f3 	udiv	r5, r1, r3
 8000c10:	fb03 1715 	mls	r7, r3, r5, r1
 8000c14:	fb0c f605 	mul.w	r6, ip, r5
 8000c18:	fa1f f989 	uxth.w	r9, r9
 8000c1c:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
 8000c20:	428e      	cmp	r6, r1
 8000c22:	d906      	bls.n	8000c32 <__divdi3+0x1c6>
 8000c24:	1e6f      	subs	r7, r5, #1
 8000c26:	1889      	adds	r1, r1, r2
 8000c28:	d271      	bcs.n	8000d0e <__divdi3+0x2a2>
 8000c2a:	428e      	cmp	r6, r1
 8000c2c:	d96f      	bls.n	8000d0e <__divdi3+0x2a2>
 8000c2e:	3d02      	subs	r5, #2
 8000c30:	1889      	adds	r1, r1, r2
 8000c32:	1b8e      	subs	r6, r1, r6
 8000c34:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8000c38:	e78c      	b.n	8000b54 <__divdi3+0xe8>
 8000c3a:	f1c5 0120 	rsb	r1, r5, #32
 8000c3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c42:	fa06 f605 	lsl.w	r6, r6, r5
 8000c46:	fa27 f201 	lsr.w	r2, r7, r1
 8000c4a:	fa07 f705 	lsl.w	r7, r7, r5
 8000c4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c52:	431e      	orrs	r6, r3
 8000c54:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8000c58:	fbb2 f8f9 	udiv	r8, r2, r9
 8000c5c:	fa1f fa86 	uxth.w	sl, r6
 8000c60:	fb09 2218 	mls	r2, r9, r8, r2
 8000c64:	fb0a fb08 	mul.w	fp, sl, r8
 8000c68:	430f      	orrs	r7, r1
 8000c6a:	0c3b      	lsrs	r3, r7, #16
 8000c6c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000c70:	4593      	cmp	fp, r2
 8000c72:	fa0c fc05 	lsl.w	ip, ip, r5
 8000c76:	d908      	bls.n	8000c8a <__divdi3+0x21e>
 8000c78:	1992      	adds	r2, r2, r6
 8000c7a:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000c7e:	d24a      	bcs.n	8000d16 <__divdi3+0x2aa>
 8000c80:	4593      	cmp	fp, r2
 8000c82:	d948      	bls.n	8000d16 <__divdi3+0x2aa>
 8000c84:	f1a8 0802 	sub.w	r8, r8, #2
 8000c88:	1992      	adds	r2, r2, r6
 8000c8a:	ebcb 0302 	rsb	r3, fp, r2
 8000c8e:	fbb3 f1f9 	udiv	r1, r3, r9
 8000c92:	fb09 3211 	mls	r2, r9, r1, r3
 8000c96:	fb0a fa01 	mul.w	sl, sl, r1
 8000c9a:	b2bf      	uxth	r7, r7
 8000c9c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
 8000ca0:	459a      	cmp	sl, r3
 8000ca2:	d906      	bls.n	8000cb2 <__divdi3+0x246>
 8000ca4:	1e4a      	subs	r2, r1, #1
 8000ca6:	199b      	adds	r3, r3, r6
 8000ca8:	d233      	bcs.n	8000d12 <__divdi3+0x2a6>
 8000caa:	459a      	cmp	sl, r3
 8000cac:	d931      	bls.n	8000d12 <__divdi3+0x2a6>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	199b      	adds	r3, r3, r6
 8000cb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000cb6:	0c0f      	lsrs	r7, r1, #16
 8000cb8:	fa1f f88c 	uxth.w	r8, ip
 8000cbc:	fb08 f607 	mul.w	r6, r8, r7
 8000cc0:	b28a      	uxth	r2, r1
 8000cc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8000cc6:	fb08 f802 	mul.w	r8, r8, r2
 8000cca:	fb0c 6202 	mla	r2, ip, r2, r6
 8000cce:	fb0c fc07 	mul.w	ip, ip, r7
 8000cd2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8000cd6:	4296      	cmp	r6, r2
 8000cd8:	bf88      	it	hi
 8000cda:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
 8000cde:	ebca 0303 	rsb	r3, sl, r3
 8000ce2:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
 8000ce6:	4563      	cmp	r3, ip
 8000ce8:	d30e      	bcc.n	8000d08 <__divdi3+0x29c>
 8000cea:	d005      	beq.n	8000cf8 <__divdi3+0x28c>
 8000cec:	2500      	movs	r5, #0
 8000cee:	e70d      	b.n	8000b0c <__divdi3+0xa0>
 8000cf0:	460e      	mov	r6, r1
 8000cf2:	e6ef      	b.n	8000ad4 <__divdi3+0x68>
 8000cf4:	461d      	mov	r5, r3
 8000cf6:	e701      	b.n	8000afc <__divdi3+0x90>
 8000cf8:	fa00 f005 	lsl.w	r0, r0, r5
 8000cfc:	fa1f f888 	uxth.w	r8, r8
 8000d00:	eb08 4502 	add.w	r5, r8, r2, lsl #16
 8000d04:	42a8      	cmp	r0, r5
 8000d06:	d2f1      	bcs.n	8000cec <__divdi3+0x280>
 8000d08:	3901      	subs	r1, #1
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	e6fe      	b.n	8000b0c <__divdi3+0xa0>
 8000d0e:	463d      	mov	r5, r7
 8000d10:	e78f      	b.n	8000c32 <__divdi3+0x1c6>
 8000d12:	4611      	mov	r1, r2
 8000d14:	e7cd      	b.n	8000cb2 <__divdi3+0x246>
 8000d16:	4688      	mov	r8, r1
 8000d18:	e7b7      	b.n	8000c8a <__divdi3+0x21e>
 8000d1a:	46b0      	mov	r8, r6
 8000d1c:	e775      	b.n	8000c0a <__divdi3+0x19e>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	18b6      	adds	r6, r6, r2
 8000d22:	e72a      	b.n	8000b7a <__divdi3+0x10e>
 8000d24:	3902      	subs	r1, #2
 8000d26:	e73c      	b.n	8000ba2 <__divdi3+0x136>

08000d28 <__udivdi3>:
 8000d28:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000d2c:	4614      	mov	r4, r2
 8000d2e:	4605      	mov	r5, r0
 8000d30:	460e      	mov	r6, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d13d      	bne.n	8000db2 <__udivdi3+0x8a>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	d949      	bls.n	8000dce <__udivdi3+0xa6>
 8000d3a:	fab2 f782 	clz	r7, r2
 8000d3e:	b147      	cbz	r7, 8000d52 <__udivdi3+0x2a>
 8000d40:	f1c7 0120 	rsb	r1, r7, #32
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa06 f607 	lsl.w	r6, r6, r7
 8000d4c:	40bc      	lsls	r4, r7
 8000d4e:	40bd      	lsls	r5, r7
 8000d50:	4316      	orrs	r6, r2
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fbb6 f0f2 	udiv	r0, r6, r2
 8000d58:	b2a1      	uxth	r1, r4
 8000d5a:	fb02 6610 	mls	r6, r2, r0, r6
 8000d5e:	fb01 f300 	mul.w	r3, r1, r0
 8000d62:	0c2f      	lsrs	r7, r5, #16
 8000d64:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000d68:	42b3      	cmp	r3, r6
 8000d6a:	d908      	bls.n	8000d7e <__udivdi3+0x56>
 8000d6c:	1e47      	subs	r7, r0, #1
 8000d6e:	1936      	adds	r6, r6, r4
 8000d70:	f080 80fa 	bcs.w	8000f68 <__udivdi3+0x240>
 8000d74:	42b3      	cmp	r3, r6
 8000d76:	f240 80f7 	bls.w	8000f68 <__udivdi3+0x240>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1936      	adds	r6, r6, r4
 8000d7e:	1af6      	subs	r6, r6, r3
 8000d80:	fbb6 f3f2 	udiv	r3, r6, r2
 8000d84:	fb02 6213 	mls	r2, r2, r3, r6
 8000d88:	fb01 f103 	mul.w	r1, r1, r3
 8000d8c:	b2ad      	uxth	r5, r5
 8000d8e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000d92:	4291      	cmp	r1, r2
 8000d94:	d907      	bls.n	8000da6 <__udivdi3+0x7e>
 8000d96:	1e5e      	subs	r6, r3, #1
 8000d98:	1912      	adds	r2, r2, r4
 8000d9a:	f080 80e7 	bcs.w	8000f6c <__udivdi3+0x244>
 8000d9e:	4291      	cmp	r1, r2
 8000da0:	f240 80e4 	bls.w	8000f6c <__udivdi3+0x244>
 8000da4:	3b02      	subs	r3, #2
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	2100      	movs	r1, #0
 8000dac:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000db0:	4770      	bx	lr
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d843      	bhi.n	8000e3e <__udivdi3+0x116>
 8000db6:	fab3 f483 	clz	r4, r3
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	d142      	bne.n	8000e44 <__udivdi3+0x11c>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivdi3+0xa0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80e1 	bhi.w	8000f8a <__udivdi3+0x262>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2001      	movs	r0, #1
 8000dcc:	e7ee      	b.n	8000dac <__udivdi3+0x84>
 8000dce:	b912      	cbnz	r2, 8000dd6 <__udivdi3+0xae>
 8000dd0:	2701      	movs	r7, #1
 8000dd2:	fbb7 f4f2 	udiv	r4, r7, r2
 8000dd6:	fab4 f284 	clz	r2, r4
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	f040 8089 	bne.w	8000ef2 <__udivdi3+0x1ca>
 8000de0:	1b0a      	subs	r2, r1, r4
 8000de2:	0c23      	lsrs	r3, r4, #16
 8000de4:	b2a7      	uxth	r7, r4
 8000de6:	2101      	movs	r1, #1
 8000de8:	fbb2 f6f3 	udiv	r6, r2, r3
 8000dec:	fb03 2216 	mls	r2, r3, r6, r2
 8000df0:	fb07 f006 	mul.w	r0, r7, r6
 8000df4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000df8:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8000dfc:	4290      	cmp	r0, r2
 8000dfe:	d907      	bls.n	8000e10 <__udivdi3+0xe8>
 8000e00:	1912      	adds	r2, r2, r4
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivdi3+0xe6>
 8000e08:	4290      	cmp	r0, r2
 8000e0a:	f200 80d0 	bhi.w	8000fae <__udivdi3+0x286>
 8000e0e:	4666      	mov	r6, ip
 8000e10:	1a12      	subs	r2, r2, r0
 8000e12:	fbb2 f0f3 	udiv	r0, r2, r3
 8000e16:	fb03 2310 	mls	r3, r3, r0, r2
 8000e1a:	fb07 f700 	mul.w	r7, r7, r0
 8000e1e:	b2ad      	uxth	r5, r5
 8000e20:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8000e24:	429f      	cmp	r7, r3
 8000e26:	d907      	bls.n	8000e38 <__udivdi3+0x110>
 8000e28:	1e42      	subs	r2, r0, #1
 8000e2a:	191b      	adds	r3, r3, r4
 8000e2c:	f080 80a0 	bcs.w	8000f70 <__udivdi3+0x248>
 8000e30:	429f      	cmp	r7, r3
 8000e32:	f240 809d 	bls.w	8000f70 <__udivdi3+0x248>
 8000e36:	3802      	subs	r0, #2
 8000e38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3c:	e7b6      	b.n	8000dac <__udivdi3+0x84>
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4608      	mov	r0, r1
 8000e42:	e7b3      	b.n	8000dac <__udivdi3+0x84>
 8000e44:	f1c4 0620 	rsb	r6, r4, #32
 8000e48:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4c:	fa03 f304 	lsl.w	r3, r3, r4
 8000e50:	fa21 f506 	lsr.w	r5, r1, r6
 8000e54:	fa01 f104 	lsl.w	r1, r1, r4
 8000e58:	fa20 f606 	lsr.w	r6, r0, r6
 8000e5c:	433b      	orrs	r3, r7
 8000e5e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e62:	fbb5 f7fc 	udiv	r7, r5, ip
 8000e66:	fa1f f883 	uxth.w	r8, r3
 8000e6a:	fb0c 5517 	mls	r5, ip, r7, r5
 8000e6e:	fb08 f907 	mul.w	r9, r8, r7
 8000e72:	ea46 0a01 	orr.w	sl, r6, r1
 8000e76:	ea4f 411a 	mov.w	r1, sl, lsr #16
 8000e7a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8000e7e:	45a9      	cmp	r9, r5
 8000e80:	fa02 f204 	lsl.w	r2, r2, r4
 8000e84:	d904      	bls.n	8000e90 <__udivdi3+0x168>
 8000e86:	1e7e      	subs	r6, r7, #1
 8000e88:	18ed      	adds	r5, r5, r3
 8000e8a:	f0c0 8081 	bcc.w	8000f90 <__udivdi3+0x268>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	ebc9 0105 	rsb	r1, r9, r5
 8000e94:	fbb1 f6fc 	udiv	r6, r1, ip
 8000e98:	fb0c 1516 	mls	r5, ip, r6, r1
 8000e9c:	fb08 f806 	mul.w	r8, r8, r6
 8000ea0:	fa1f fa8a 	uxth.w	sl, sl
 8000ea4:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
 8000ea8:	4588      	cmp	r8, r1
 8000eaa:	d903      	bls.n	8000eb4 <__udivdi3+0x18c>
 8000eac:	1e75      	subs	r5, r6, #1
 8000eae:	18c9      	adds	r1, r1, r3
 8000eb0:	d374      	bcc.n	8000f9c <__udivdi3+0x274>
 8000eb2:	462e      	mov	r6, r5
 8000eb4:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8000eb8:	0c37      	lsrs	r7, r6, #16
 8000eba:	fa1f fc82 	uxth.w	ip, r2
 8000ebe:	fb0c f507 	mul.w	r5, ip, r7
 8000ec2:	0c12      	lsrs	r2, r2, #16
 8000ec4:	b2b3      	uxth	r3, r6
 8000ec6:	fb0c fc03 	mul.w	ip, ip, r3
 8000eca:	fb02 5303 	mla	r3, r2, r3, r5
 8000ece:	fb02 f207 	mul.w	r2, r2, r7
 8000ed2:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 8000ed6:	429d      	cmp	r5, r3
 8000ed8:	bf88      	it	hi
 8000eda:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
 8000ede:	ebc8 0101 	rsb	r1, r8, r1
 8000ee2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8000ee6:	4291      	cmp	r1, r2
 8000ee8:	d34c      	bcc.n	8000f84 <__udivdi3+0x25c>
 8000eea:	d043      	beq.n	8000f74 <__udivdi3+0x24c>
 8000eec:	4630      	mov	r0, r6
 8000eee:	2100      	movs	r1, #0
 8000ef0:	e75c      	b.n	8000dac <__udivdi3+0x84>
 8000ef2:	4094      	lsls	r4, r2
 8000ef4:	f1c2 0520 	rsb	r5, r2, #32
 8000ef8:	fa21 f605 	lsr.w	r6, r1, r5
 8000efc:	fa20 f505 	lsr.w	r5, r0, r5
 8000f00:	fa01 f102 	lsl.w	r1, r1, r2
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	fbb6 fcf3 	udiv	ip, r6, r3
 8000f0a:	b2a7      	uxth	r7, r4
 8000f0c:	fb03 661c 	mls	r6, r3, ip, r6
 8000f10:	fb07 f80c 	mul.w	r8, r7, ip
 8000f14:	4329      	orrs	r1, r5
 8000f16:	0c0d      	lsrs	r5, r1, #16
 8000f18:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8000f1c:	45b0      	cmp	r8, r6
 8000f1e:	fa00 f502 	lsl.w	r5, r0, r2
 8000f22:	d908      	bls.n	8000f36 <__udivdi3+0x20e>
 8000f24:	1936      	adds	r6, r6, r4
 8000f26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000f2a:	d23e      	bcs.n	8000faa <__udivdi3+0x282>
 8000f2c:	45b0      	cmp	r8, r6
 8000f2e:	d93c      	bls.n	8000faa <__udivdi3+0x282>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	1936      	adds	r6, r6, r4
 8000f36:	ebc8 0206 	rsb	r2, r8, r6
 8000f3a:	fbb2 f0f3 	udiv	r0, r2, r3
 8000f3e:	fb03 2610 	mls	r6, r3, r0, r2
 8000f42:	fb07 f800 	mul.w	r8, r7, r0
 8000f46:	b289      	uxth	r1, r1
 8000f48:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 8000f4c:	4590      	cmp	r8, r2
 8000f4e:	d906      	bls.n	8000f5e <__udivdi3+0x236>
 8000f50:	1e46      	subs	r6, r0, #1
 8000f52:	1912      	adds	r2, r2, r4
 8000f54:	d227      	bcs.n	8000fa6 <__udivdi3+0x27e>
 8000f56:	4590      	cmp	r8, r2
 8000f58:	d925      	bls.n	8000fa6 <__udivdi3+0x27e>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	1912      	adds	r2, r2, r4
 8000f5e:	ebc8 0202 	rsb	r2, r8, r2
 8000f62:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
 8000f66:	e73f      	b.n	8000de8 <__udivdi3+0xc0>
 8000f68:	4638      	mov	r0, r7
 8000f6a:	e708      	b.n	8000d7e <__udivdi3+0x56>
 8000f6c:	4633      	mov	r3, r6
 8000f6e:	e71a      	b.n	8000da6 <__udivdi3+0x7e>
 8000f70:	4610      	mov	r0, r2
 8000f72:	e761      	b.n	8000e38 <__udivdi3+0x110>
 8000f74:	fa00 f004 	lsl.w	r0, r0, r4
 8000f78:	fa1f fc8c 	uxth.w	ip, ip
 8000f7c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 8000f80:	4298      	cmp	r0, r3
 8000f82:	d2b3      	bcs.n	8000eec <__udivdi3+0x1c4>
 8000f84:	1e70      	subs	r0, r6, #1
 8000f86:	2100      	movs	r1, #0
 8000f88:	e710      	b.n	8000dac <__udivdi3+0x84>
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e70d      	b.n	8000dac <__udivdi3+0x84>
 8000f90:	45a9      	cmp	r9, r5
 8000f92:	f67f af7c 	bls.w	8000e8e <__udivdi3+0x166>
 8000f96:	3f02      	subs	r7, #2
 8000f98:	18ed      	adds	r5, r5, r3
 8000f9a:	e779      	b.n	8000e90 <__udivdi3+0x168>
 8000f9c:	4588      	cmp	r8, r1
 8000f9e:	d988      	bls.n	8000eb2 <__udivdi3+0x18a>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	18c9      	adds	r1, r1, r3
 8000fa4:	e786      	b.n	8000eb4 <__udivdi3+0x18c>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	e7d9      	b.n	8000f5e <__udivdi3+0x236>
 8000faa:	4684      	mov	ip, r0
 8000fac:	e7c3      	b.n	8000f36 <__udivdi3+0x20e>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	1912      	adds	r2, r2, r4
 8000fb2:	e72d      	b.n	8000e10 <__udivdi3+0xe8>

08000fb4 <LED_Tick>:
void Test_DCMOTOR();



void LED_Tick( void )
{
 8000fb4:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 8000fb6:	f642 7345 	movw	r3, #12101	; 0x2f45
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000fc0:	4798      	blx	r3
 8000fc2:	bd08      	pop	{r3, pc}

08000fc4 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000fc4:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <main+0x30>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000fc8:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8000fca:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000fcc:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000fce:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <main+0x34>)
 8000fd0:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000fd2:	4d0a      	ldr	r5, [pc, #40]	; (8000ffc <main+0x38>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <main+0x3c>)
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fde:	9400      	str	r4, [sp, #0]
 8000fe0:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <main+0x40>)
 8000fe6:	4788      	blx	r1
	//
	//Ap_RadioMenu_ExeCmd();    
	//Ap_GLcdMenu_ExeCmd();    
	//Ap_EduMenu_ExeCmd();

	Lb_printf("ezExplorer\n");
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <main+0x44>)
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <main+0x48>)
 8000fec:	4790      	blx	r2
 8000fee:	4c08      	ldr	r4, [pc, #32]	; (8001010 <main+0x4c>)
    while(1)
    {
    	//Test_DCMOTOR();
    	Ap_StrCmd_ExeCmd();
 8000ff0:	47a0      	blx	r4
 8000ff2:	e7fd      	b.n	8000ff0 <main+0x2c>
 8000ff4:	08002b35 	.word	0x08002b35
 8000ff8:	08001015 	.word	0x08001015
 8000ffc:	080033c1 	.word	0x080033c1
 8001000:	08000fb5 	.word	0x08000fb5
 8001004:	080033e1 	.word	0x080033e1
 8001008:	0800dbd0 	.word	0x0800dbd0
 800100c:	080021d9 	.word	0x080021d9
 8001010:	0800168d 	.word	0x0800168d

08001014 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 8001014:	b508      	push	{r3, lr}
	{
		Lb_printf("Radio Init Fail\n");
	}
	*/

	Ap_StrCmd_Init();
 8001016:	f241 13dd 	movw	r3, #4573	; 0x11dd
 800101a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800101e:	4798      	blx	r3
	Ap_StrCmd_List();
 8001020:	f641 005d 	movw	r0, #6237	; 0x185d
 8001024:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001028:	4780      	blx	r0
 800102a:	bd08      	pop	{r3, pc}

0800102c <Ap_StrCmd_PutFunc>:

void Ap_StrCmd_Echo( u8 OpCode,  void *arg );


void Ap_StrCmd_PutFunc( char Ch )
{
 800102c:	b508      	push	{r3, lr}
	Hw_Uart_Putch( HW_USE_UART_CH_STRCMD, Ch );
 800102e:	f642 6311 	movw	r3, #11793	; 0x2e11

void Ap_StrCmd_Echo( u8 OpCode,  void *arg );


void Ap_StrCmd_PutFunc( char Ch )
{
 8001032:	4601      	mov	r1, r0
	Hw_Uart_Putch( HW_USE_UART_CH_STRCMD, Ch );
 8001034:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001038:	2000      	movs	r0, #0
 800103a:	4798      	blx	r3
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop

08001040 <Ap_StrCmd_CallBack_RxdISR>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CallBack_RxdISR( char Ch )
{	
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if( Ap_StrCmd_ChSize >= AP_STRCMD_STR_MAX )
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <Ap_StrCmd_CallBack_RxdISR+0x6c>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CallBack_RxdISR( char Ch )
{	
 8001044:	4604      	mov	r4, r0

	if( Ap_StrCmd_ChSize >= AP_STRCMD_STR_MAX )
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	b290      	uxth	r0, r2
 800104a:	283b      	cmp	r0, #59	; 0x3b
 800104c:	d901      	bls.n	8001052 <Ap_StrCmd_CallBack_RxdISR+0x12>
	{
		Ap_StrCmd_ChSize = 0;
 800104e:	2100      	movs	r1, #0
 8001050:	8019      	strh	r1, [r3, #0]
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8001052:	8818      	ldrh	r0, [r3, #0]
	
	Ap_StrCmd_ChSize++;
 8001054:	8819      	ldrh	r1, [r3, #0]
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8001056:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <Ap_StrCmd_CallBack_RxdISR+0x70>)
	
	Ap_StrCmd_ChSize++;
 8001058:	3101      	adds	r1, #1
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 800105a:	b280      	uxth	r0, r0
	
	Ap_StrCmd_ChSize++;
 800105c:	b289      	uxth	r1, r1
	

	if( Ch == 0x0D )  // '\n'
 800105e:	2c0d      	cmp	r4, #13
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
	
	Ap_StrCmd_ChSize++;
 8001060:	8019      	strh	r1, [r3, #0]
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8001062:	5414      	strb	r4, [r2, r0]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <Ap_StrCmd_CallBack_RxdISR+0x6c>)
	
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
 8001066:	d010      	beq.n	800108a <Ap_StrCmd_CallBack_RxdISR+0x4a>
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
	}

	if( Ap_StrCmd_EchoEnable == TRUE )
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <Ap_StrCmd_CallBack_RxdISR+0x74>)
 800106a:	7801      	ldrb	r1, [r0, #0]
 800106c:	2901      	cmp	r1, #1
 800106e:	d000      	beq.n	8001072 <Ap_StrCmd_CallBack_RxdISR+0x32>
 8001070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8001072:	4d11      	ldr	r5, [pc, #68]	; (80010b8 <Ap_StrCmd_CallBack_RxdISR+0x78>)
 8001074:	682a      	ldr	r2, [r5, #0]
 8001076:	2a00      	cmp	r2, #0
 8001078:	d0fa      	beq.n	8001070 <Ap_StrCmd_CallBack_RxdISR+0x30>
		{

			(*Ap_StrCmd_PutchPtr)( Ch );
 800107a:	4620      	mov	r0, r4
 800107c:	4790      	blx	r2
			
			if( Ch == '\r' )
 800107e:	2c0d      	cmp	r4, #13
 8001080:	d1f6      	bne.n	8001070 <Ap_StrCmd_CallBack_RxdISR+0x30>
			{
				(*Ap_StrCmd_PutchPtr)( '\n' );	
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	200a      	movs	r0, #10
 8001086:	4798      	blx	r3
 8001088:	e7f2      	b.n	8001070 <Ap_StrCmd_CallBack_RxdISR+0x30>
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 800108a:	881f      	ldrh	r7, [r3, #0]
 800108c:	2600      	movs	r6, #0
 800108e:	b2bf      	uxth	r7, r7
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8001090:	4611      	mov	r1, r2
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8001092:	55d6      	strb	r6, [r2, r7]
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <Ap_StrCmd_CallBack_RxdISR+0x7c>)
 8001096:	2501      	movs	r5, #1

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
		
		Ap_StrCmd_ChSize    = 0;
 8001098:	801e      	strh	r6, [r3, #0]
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <Ap_StrCmd_CallBack_RxdISR+0x80>)
	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
 800109c:	7015      	strb	r5, [r2, #0]
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <Ap_StrCmd_CallBack_RxdISR+0x84>)
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
 80010a0:	701d      	strb	r5, [r3, #0]
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 80010a2:	4630      	mov	r0, r6
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <Ap_StrCmd_CallBack_RxdISR+0x88>)
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
 80010a6:	7015      	strb	r5, [r2, #0]
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 80010a8:	4798      	blx	r3
 80010aa:	e7dd      	b.n	8001068 <Ap_StrCmd_CallBack_RxdISR+0x28>
 80010ac:	20000ecc 	.word	0x20000ecc
 80010b0:	20000ed0 	.word	0x20000ed0
 80010b4:	20000a00 	.word	0x20000a00
 80010b8:	20000f18 	.word	0x20000f18
 80010bc:	20000f0c 	.word	0x20000f0c
 80010c0:	20000ece 	.word	0x20000ece
 80010c4:	20000f1c 	.word	0x20000f1c
 80010c8:	080016f9 	.word	0x080016f9

080010cc <Ap_StrCmd_AddCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{
 80010cc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
 80010d0:	4f40      	ldr	r7, [pc, #256]	; (80011d4 <Ap_StrCmd_AddCmd+0x108>)
 80010d2:	883b      	ldrh	r3, [r7, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2b13      	cmp	r3, #19
 80010d8:	d875      	bhi.n	80011c6 <Ap_StrCmd_AddCmd+0xfa>
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
 80010da:	f8b7 9000 	ldrh.w	r9, [r7]
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 80010de:	7804      	ldrb	r4, [r0, #0]
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
 80010e0:	fa1f f989 	uxth.w	r9, r9
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 80010e4:	2c00      	cmp	r4, #0
 80010e6:	d072      	beq.n	80011ce <Ap_StrCmd_AddCmd+0x102>
 80010e8:	2400      	movs	r4, #0

		Size++;
 80010ea:	1c63      	adds	r3, r4, #1
 80010ec:	b29c      	uxth	r4, r3
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 80010ee:	5d03      	ldrb	r3, [r0, r4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1fa      	bne.n	80010ea <Ap_StrCmd_AddCmd+0x1e>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 80010f4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 80011d8 <Ap_StrCmd_AddCmd+0x10c>
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 80010f8:	b304      	cbz	r4, 800113c <Ap_StrCmd_AddCmd+0x70>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 80010fa:	262c      	movs	r6, #44	; 0x2c
 80010fc:	fb06 c609 	mla	r6, r6, r9, ip
 8001100:	2301      	movs	r3, #1

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 8001102:	f890 8000 	ldrb.w	r8, [r0]
 8001106:	1e65      	subs	r5, r4, #1
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001108:	42a3      	cmp	r3, r4
	{
		Dest[i] = Origin[i];
 800110a:	f886 8000 	strb.w	r8, [r6]
 800110e:	ea05 0503 	and.w	r5, r5, r3
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001112:	d213      	bcs.n	800113c <Ap_StrCmd_AddCmd+0x70>
 8001114:	b125      	cbz	r5, 8001120 <Ap_StrCmd_AddCmd+0x54>
	{
		Dest[i] = Origin[i];
 8001116:	7845      	ldrb	r5, [r0, #1]
 8001118:	2302      	movs	r3, #2
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 800111a:	42a3      	cmp	r3, r4
	{
		Dest[i] = Origin[i];
 800111c:	7075      	strb	r5, [r6, #1]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 800111e:	d20d      	bcs.n	800113c <Ap_StrCmd_AddCmd+0x70>
	{
		Dest[i] = Origin[i];
 8001120:	f810 a003 	ldrb.w	sl, [r0, r3]
 8001124:	1c5d      	adds	r5, r3, #1
 8001126:	f806 a003 	strb.w	sl, [r6, r3]
 800112a:	3302      	adds	r3, #2
 800112c:	f810 a005 	ldrb.w	sl, [r0, r5]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001130:	fa1f f883 	uxth.w	r8, r3
 8001134:	45a0      	cmp	r8, r4
	{
		Dest[i] = Origin[i];
 8001136:	f806 a005 	strb.w	sl, [r6, r5]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 800113a:	d3f1      	bcc.n	8001120 <Ap_StrCmd_AddCmd+0x54>
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 800113c:	202c      	movs	r0, #44	; 0x2c
 800113e:	fb00 4409 	mla	r4, r0, r9, r4
 8001142:	2000      	movs	r0, #0
 8001144:	f80c 0004 	strb.w	r0, [ip, r4]
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
 8001148:	f8b7 8000 	ldrh.w	r8, [r7]
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 800114c:	780b      	ldrb	r3, [r1, #0]
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
 800114e:	fa1f f888 	uxth.w	r8, r8
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8001152:	2b00      	cmp	r3, #0
 8001154:	d039      	beq.n	80011ca <Ap_StrCmd_AddCmd+0xfe>

		Size++;
 8001156:	3001      	adds	r0, #1
 8001158:	b280      	uxth	r0, r0
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 800115a:	5c0c      	ldrb	r4, [r1, r0]
 800115c:	2c00      	cmp	r4, #0
 800115e:	d1fa      	bne.n	8001156 <Ap_StrCmd_AddCmd+0x8a>
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001160:	b1e8      	cbz	r0, 800119e <Ap_StrCmd_AddCmd+0xd2>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8001162:	252c      	movs	r5, #44	; 0x2c
 8001164:	fb05 c508 	mla	r5, r5, r8, ip
 8001168:	2301      	movs	r3, #1

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 800116a:	780e      	ldrb	r6, [r1, #0]
 800116c:	1e44      	subs	r4, r0, #1
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 800116e:	4283      	cmp	r3, r0
	{
		Dest[i] = Origin[i];
 8001170:	752e      	strb	r6, [r5, #20]
 8001172:	ea04 0403 	and.w	r4, r4, r3
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001176:	d212      	bcs.n	800119e <Ap_StrCmd_AddCmd+0xd2>
 8001178:	b124      	cbz	r4, 8001184 <Ap_StrCmd_AddCmd+0xb8>
	{
		Dest[i] = Origin[i];
 800117a:	784c      	ldrb	r4, [r1, #1]
 800117c:	2302      	movs	r3, #2
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 800117e:	4283      	cmp	r3, r0
	{
		Dest[i] = Origin[i];
 8001180:	756c      	strb	r4, [r5, #21]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001182:	d20c      	bcs.n	800119e <Ap_StrCmd_AddCmd+0xd2>
	{
		Dest[i] = Origin[i];
 8001184:	5cce      	ldrb	r6, [r1, r3]
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8001186:	18ec      	adds	r4, r5, r3

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 8001188:	7526      	strb	r6, [r4, #20]
 800118a:	1c5e      	adds	r6, r3, #1
 800118c:	3302      	adds	r3, #2
 800118e:	f811 9006 	ldrb.w	r9, [r1, r6]
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8001192:	19ac      	adds	r4, r5, r6
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8001194:	b29e      	uxth	r6, r3
 8001196:	4286      	cmp	r6, r0
	{
		Dest[i] = Origin[i];
 8001198:	f884 9014 	strb.w	r9, [r4, #20]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 800119c:	d3f2      	bcc.n	8001184 <Ap_StrCmd_AddCmd+0xb8>

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 800119e:	8839      	ldrh	r1, [r7, #0]

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 80011a0:	232c      	movs	r3, #44	; 0x2c
 80011a2:	fb03 c808 	mla	r8, r3, r8, ip

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 80011a6:	b28c      	uxth	r4, r1
 80011a8:	fb03 cc04 	mla	ip, r3, r4, ip

	Ap_StrCmd_Size++;
 80011ac:	8839      	ldrh	r1, [r7, #0]

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 80011ae:	4440      	add	r0, r8
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );

	Ap_StrCmd_Size++;
 80011b0:	1c4b      	adds	r3, r1, #1
 80011b2:	b299      	uxth	r1, r3

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	7503      	strb	r3, [r0, #20]

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 80011b8:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28

	Ap_StrCmd_Size++;
 80011bc:	8039      	strh	r1, [r7, #0]
 80011be:	2001      	movs	r0, #1
	
	return TRUE;
}
 80011c0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80011c4:	4770      	bx	lr
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
 80011c6:	2000      	movs	r0, #0
 80011c8:	e7fa      	b.n	80011c0 <Ap_StrCmd_AddCmd+0xf4>
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 80011ca:	4618      	mov	r0, r3
 80011cc:	e7e7      	b.n	800119e <Ap_StrCmd_AddCmd+0xd2>
 80011ce:	f8df c008 	ldr.w	ip, [pc, #8]	; 80011d8 <Ap_StrCmd_AddCmd+0x10c>
 80011d2:	e7b3      	b.n	800113c <Ap_StrCmd_AddCmd+0x70>
 80011d4:	20000f14 	.word	0x20000f14
 80011d8:	20000b20 	.word	0x20000b20

080011dc <Ap_StrCmd_Init>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Init( void )
{
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <Ap_StrCmd_Init+0x68>)
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 80011e0:	2200      	movs	r2, #0
     TITLE   : Ap_StrCmd_Init
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Init( void )
 80011e2:	f503 705c 	add.w	r0, r3, #880	; 0x370
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
 80011e8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80011ec:	3358      	adds	r3, #88	; 0x58
 80011ee:	2400      	movs	r4, #0
{
	int i;
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
 80011f0:	4283      	cmp	r3, r0
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 80011f2:	628a      	str	r2, [r1, #40]	; 0x28
{
	int i;
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
 80011f4:	d1f7      	bne.n	80011e6 <Ap_StrCmd_Init+0xa>
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 80011f6:	4f14      	ldr	r7, [pc, #80]	; (8001248 <Ap_StrCmd_Init+0x6c>)
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
 80011f8:	4e14      	ldr	r6, [pc, #80]	; (800124c <Ap_StrCmd_Init+0x70>)
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 80011fa:	803c      	strh	r4, [r7, #0]
	Ap_StrCmd_ChSize   	= 0;
 80011fc:	4f14      	ldr	r7, [pc, #80]	; (8001250 <Ap_StrCmd_Init+0x74>)
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 80011fe:	4d15      	ldr	r5, [pc, #84]	; (8001254 <Ap_StrCmd_Init+0x78>)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
 8001200:	803c      	strh	r4, [r7, #0]
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
 8001202:	4f15      	ldr	r7, [pc, #84]	; (8001258 <Ap_StrCmd_Init+0x7c>)
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8001204:	4915      	ldr	r1, [pc, #84]	; (800125c <Ap_StrCmd_Init+0x80>)
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
 8001206:	603c      	str	r4, [r7, #0]
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
 8001208:	4f15      	ldr	r7, [pc, #84]	; (8001260 <Ap_StrCmd_Init+0x84>)
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <Ap_StrCmd_Init+0x88>)
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
 800120c:	703c      	strb	r4, [r7, #0]
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;
 800120e:	4f16      	ldr	r7, [pc, #88]	; (8001268 <Ap_StrCmd_Init+0x8c>)

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <Ap_StrCmd_Init+0x90>)
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
 8001212:	6034      	str	r4, [r6, #0]
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;
 8001214:	703c      	strb	r4, [r7, #0]

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8001216:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "MENU", "Display Menu",     Ap_StrCmd_ShowMenu );
 8001218:	4915      	ldr	r1, [pc, #84]	; (8001270 <Ap_StrCmd_Init+0x94>)
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <Ap_StrCmd_Init+0x98>)
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <Ap_StrCmd_Init+0x9c>)
 800121e:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "INFO", "Info",     		  Ap_StrCmd_ShowInfo );
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <Ap_StrCmd_Init+0xa0>)
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <Ap_StrCmd_Init+0xa4>)
 8001224:	4817      	ldr	r0, [pc, #92]	; (8001284 <Ap_StrCmd_Init+0xa8>)
 8001226:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "ECHO", "Echo",     		  Ap_StrCmd_Echo );
 8001228:	4917      	ldr	r1, [pc, #92]	; (8001288 <Ap_StrCmd_Init+0xac>)
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <Ap_StrCmd_Init+0xb0>)
 800122c:	4818      	ldr	r0, [pc, #96]	; (8001290 <Ap_StrCmd_Init+0xb4>)
 800122e:	47a8      	blx	r5


	Ap_StrCmd_Q_Init();
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <Ap_StrCmd_Init+0xb8>)
 8001232:	4790      	blx	r2
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SetFunc_Putch( void (*FuncPtr)( char ) )
{
	Ap_StrCmd_PutchPtr = FuncPtr;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <Ap_StrCmd_Init+0xbc>)

	//-- 통신 함수 설정 
	//
	Ap_StrCmd_SetFunc_Putch( Ap_StrCmd_PutFunc );

	Hw_Uart_SetReceiveFuncISR( HW_USE_UART_CH_STRCMD, Ap_StrCmd_CallBack_RxdISR );
 8001236:	4620      	mov	r0, r4
 8001238:	4918      	ldr	r1, [pc, #96]	; (800129c <Ap_StrCmd_Init+0xc0>)
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <Ap_StrCmd_Init+0xc4>)
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SetFunc_Putch( void (*FuncPtr)( char ) )
{
	Ap_StrCmd_PutchPtr = FuncPtr;
 800123c:	6033      	str	r3, [r6, #0]

	//-- 통신 함수 설정 
	//
	Ap_StrCmd_SetFunc_Putch( Ap_StrCmd_PutFunc );

	Hw_Uart_SetReceiveFuncISR( HW_USE_UART_CH_STRCMD, Ap_StrCmd_CallBack_RxdISR );
 800123e:	4790      	blx	r2
 8001240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001242:	bf00      	nop
 8001244:	20000b20 	.word	0x20000b20
 8001248:	20000f14 	.word	0x20000f14
 800124c:	20000f18 	.word	0x20000f18
 8001250:	20000ecc 	.word	0x20000ecc
 8001254:	080010cd 	.word	0x080010cd
 8001258:	20000f10 	.word	0x20000f10
 800125c:	0800dbec 	.word	0x0800dbec
 8001260:	20000ece 	.word	0x20000ece
 8001264:	08001341 	.word	0x08001341
 8001268:	20000a00 	.word	0x20000a00
 800126c:	0800dbe4 	.word	0x0800dbe4
 8001270:	0800dc00 	.word	0x0800dc00
 8001274:	080013b5 	.word	0x080013b5
 8001278:	0800dbf8 	.word	0x0800dbf8
 800127c:	0800dc18 	.word	0x0800dc18
 8001280:	080014c9 	.word	0x080014c9
 8001284:	0800dc10 	.word	0x0800dc10
 8001288:	0800dc28 	.word	0x0800dc28
 800128c:	08001451 	.word	0x08001451
 8001290:	0800dc20 	.word	0x0800dc20
 8001294:	080016a9 	.word	0x080016a9
 8001298:	0800102d 	.word	0x0800102d
 800129c:	08001041 	.word	0x08001041
 80012a0:	08002ded 	.word	0x08002ded

080012a4 <Ap_StrCmd_Print>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
{
 80012a4:	b538      	push	{r3, r4, r5, lr}
	while( *Buffer != '\0') 
 80012a6:	7802      	ldrb	r2, [r0, #0]
 80012a8:	b192      	cbz	r2, 80012d0 <Ap_StrCmd_Print+0x2c>
 80012aa:	4d0a      	ldr	r5, [pc, #40]	; (80012d4 <Ap_StrCmd_Print+0x30>)
     TITLE   : Ap_StrCmd_Print
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
 80012ac:	1c44      	adds	r4, r0, #1
 80012ae:	e007      	b.n	80012c0 <Ap_StrCmd_Print+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 80012b0:	6829      	ldr	r1, [r5, #0]
		if( *Buffer == '\n' )
		{
			Ap_StrCmd_Putch( '\r' );
		}

		Ap_StrCmd_Putch( *Buffer ) ;                              		
 80012b2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 80012b6:	b101      	cbz	r1, 80012ba <Ap_StrCmd_Print+0x16>
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 80012b8:	4788      	blx	r1
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
{
	while( *Buffer != '\0') 
 80012ba:	f814 2b01 	ldrb.w	r2, [r4], #1
 80012be:	b13a      	cbz	r2, 80012d0 <Ap_StrCmd_Print+0x2c>
	{
		if( *Buffer == '\n' )
 80012c0:	2a0a      	cmp	r2, #10
 80012c2:	d1f5      	bne.n	80012b0 <Ap_StrCmd_Print+0xc>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 80012c4:	682b      	ldr	r3, [r5, #0]
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 80012c6:	200d      	movs	r0, #13
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f6      	beq.n	80012ba <Ap_StrCmd_Print+0x16>
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 80012cc:	4798      	blx	r3
 80012ce:	e7ef      	b.n	80012b0 <Ap_StrCmd_Print+0xc>
 80012d0:	bd38      	pop	{r3, r4, r5, pc}
 80012d2:	bf00      	nop
 80012d4:	20000f18 	.word	0x20000f18

080012d8 <Ap_StrCmd_SendResp>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SendResp( u8 ErrCode, char *format, ... )
{
 80012d8:	b40e      	push	{r1, r2, r3}
 80012da:	b530      	push	{r4, r5, lr}
 80012dc:	b0b4      	sub	sp, #208	; 0xd0

	Lb_va_list ap;
	
	Lb_va_start( ap, format );

	Str[0] = AP_STRCMD_FRAME_RET;
 80012de:	ac34      	add	r4, sp, #208	; 0xd0
 80012e0:	223e      	movs	r2, #62	; 0x3e
 80012e2:	f804 2dc8 	strb.w	r2, [r4, #-200]!

	if( ErrCode == ERR_NONE )
 80012e6:	2800      	cmp	r0, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2346      	movne	r3, #70	; 0x46
 80012ec:	234f      	moveq	r3, #79	; 0x4f
	else
	{
		Ret = AP_STRCMD_FRAME_FAIL;
	}

	Lb_sprintf( Str, "%c%c%02x ", 	AP_STRCMD_FRAME_RET 
 80012ee:	9000      	str	r0, [sp, #0]
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <Ap_StrCmd_SendResp+0x4c>)
 80012f2:	4620      	mov	r0, r4
 80012f4:	4d0c      	ldr	r5, [pc, #48]	; (8001328 <Ap_StrCmd_SendResp+0x50>)
 80012f6:	47a8      	blx	r5
								,	Ret
								,	ErrCode	);

	Lb_vsprintf( &Str[5], format, ap );	
 80012f8:	aa37      	add	r2, sp, #220	; 0xdc
 80012fa:	f852 1b04 	ldr.w	r1, [r2], #4
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <Ap_StrCmd_SendResp+0x54>)
 8001300:	f10d 000d 	add.w	r0, sp, #13
 8001304:	4798      	blx	r3

	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);
 8001306:	4620      	mov	r0, r4
 8001308:	4909      	ldr	r1, [pc, #36]	; (8001330 <Ap_StrCmd_SendResp+0x58>)
 800130a:	4788      	blx	r1
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 800130c:	4a09      	ldr	r2, [pc, #36]	; (8001334 <Ap_StrCmd_SendResp+0x5c>)
	Ap_StrCmd_DlyCheck  = 0;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <Ap_StrCmd_SendResp+0x60>)
	Ap_StrCmd_LoopCheck = 0;	
 8001310:	490a      	ldr	r1, [pc, #40]	; (800133c <Ap_StrCmd_SendResp+0x64>)
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8001312:	2000      	movs	r0, #0
 8001314:	7010      	strb	r0, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8001316:	7018      	strb	r0, [r3, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8001318:	7008      	strb	r0, [r1, #0]
	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);

	Ap_StrCmd_CmdClear();
}
 800131a:	b034      	add	sp, #208	; 0xd0
 800131c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001320:	b003      	add	sp, #12
 8001322:	4770      	bx	lr
 8001324:	0800dc30 	.word	0x0800dc30
 8001328:	080024ad 	.word	0x080024ad
 800132c:	08002795 	.word	0x08002795
 8001330:	080012a5 	.word	0x080012a5
 8001334:	20000ece 	.word	0x20000ece
 8001338:	20000f0c 	.word	0x20000f0c
 800133c:	20000f1c 	.word	0x20000f1c

08001340 <Ap_StrCmd_ShowMenuHelp>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenuHelp( u8 OpCode,  void *arg )
{
 8001340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8001344:	4e13      	ldr	r6, [pc, #76]	; (8001394 <Ap_StrCmd_ShowMenuHelp+0x54>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenuHelp( u8 OpCode,  void *arg )
{
 8001346:	b09d      	sub	sp, #116	; 0x74
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8001348:	8833      	ldrh	r3, [r6, #0]
 800134a:	b298      	uxth	r0, r3
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 800134c:	b1c0      	cbz	r0, 8001380 <Ap_StrCmd_ShowMenuHelp+0x40>
 800134e:	4d12      	ldr	r5, [pc, #72]	; (8001398 <Ap_StrCmd_ShowMenuHelp+0x58>)
 8001350:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80013ac <Ap_StrCmd_ShowMenuHelp+0x6c>
 8001354:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80013b0 <Ap_StrCmd_ShowMenuHelp+0x70>
 8001358:	2400      	movs	r4, #0
	{
		Lb_sprintf( StrBuf, "%c<%s> - %s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr, Ap_StrCmd_Dic_Ptr[i].MenuStr );			
 800135a:	272c      	movs	r7, #44	; 0x2c
 800135c:	fb07 f304 	mul.w	r3, r7, r4
 8001360:	18e8      	adds	r0, r5, r3
 8001362:	3014      	adds	r0, #20
 8001364:	222a      	movs	r2, #42	; 0x2a
 8001366:	490d      	ldr	r1, [pc, #52]	; (800139c <Ap_StrCmd_ShowMenuHelp+0x5c>)
 8001368:	18eb      	adds	r3, r5, r3
 800136a:	9000      	str	r0, [sp, #0]
 800136c:	a803      	add	r0, sp, #12
 800136e:	47c8      	blx	r9
		Ap_StrCmd_Print( StrBuf );
 8001370:	a803      	add	r0, sp, #12
 8001372:	47c0      	blx	r8
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8001374:	8831      	ldrh	r1, [r6, #0]
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8001376:	3401      	adds	r4, #1
 8001378:	b2a4      	uxth	r4, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 800137a:	b28a      	uxth	r2, r1
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 800137c:	4294      	cmp	r4, r2
 800137e:	d3ed      	bcc.n	800135c <Ap_StrCmd_ShowMenuHelp+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <Ap_StrCmd_ShowMenuHelp+0x60>)
	Ap_StrCmd_DlyCheck  = 0;
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <Ap_StrCmd_ShowMenuHelp+0x64>)
	Ap_StrCmd_LoopCheck = 0;	
 8001384:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <Ap_StrCmd_ShowMenuHelp+0x68>)
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	7003      	strb	r3, [r0, #0]
	Ap_StrCmd_DlyCheck  = 0;
 800138a:	700b      	strb	r3, [r1, #0]
	Ap_StrCmd_LoopCheck = 0;	
 800138c:	7013      	strb	r3, [r2, #0]
		Ap_StrCmd_Print( StrBuf );
	}			
	
	Ap_StrCmd_CmdClear();

}
 800138e:	b01d      	add	sp, #116	; 0x74
 8001390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001394:	20000f14 	.word	0x20000f14
 8001398:	20000b20 	.word	0x20000b20
 800139c:	0800dc3c 	.word	0x0800dc3c
 80013a0:	20000ece 	.word	0x20000ece
 80013a4:	20000f0c 	.word	0x20000f0c
 80013a8:	20000f1c 	.word	0x20000f1c
 80013ac:	080024ad 	.word	0x080024ad
 80013b0:	080012a5 	.word	0x080012a5

080013b4 <Ap_StrCmd_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenu( u8 OpCode, void *arg )
{
 80013b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 80013b8:	4d11      	ldr	r5, [pc, #68]	; (8001400 <Ap_StrCmd_ShowMenu+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenu( u8 OpCode, void *arg )
{
 80013ba:	b0b3      	sub	sp, #204	; 0xcc
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 80013bc:	882b      	ldrh	r3, [r5, #0]
 80013be:	b298      	uxth	r0, r3
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 80013c0:	b1a0      	cbz	r0, 80013ec <Ap_StrCmd_ShowMenu+0x38>
 80013c2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001418 <Ap_StrCmd_ShowMenu+0x64>
 80013c6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800141c <Ap_StrCmd_ShowMenu+0x68>
 80013ca:	4f0e      	ldr	r7, [pc, #56]	; (8001404 <Ap_StrCmd_ShowMenu+0x50>)
 80013cc:	2400      	movs	r4, #0
	{
		Lb_sprintf( StrBuf, "%c%s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr );
 80013ce:	262c      	movs	r6, #44	; 0x2c
 80013d0:	222a      	movs	r2, #42	; 0x2a
 80013d2:	fb06 9304 	mla	r3, r6, r4, r9
 80013d6:	490c      	ldr	r1, [pc, #48]	; (8001408 <Ap_StrCmd_ShowMenu+0x54>)
 80013d8:	4668      	mov	r0, sp
 80013da:	47c0      	blx	r8
		Ap_StrCmd_Print( StrBuf );
 80013dc:	4668      	mov	r0, sp
 80013de:	47b8      	blx	r7
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 80013e0:	8829      	ldrh	r1, [r5, #0]
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 80013e2:	3401      	adds	r4, #1
 80013e4:	b2a4      	uxth	r4, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 80013e6:	b28a      	uxth	r2, r1
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 80013e8:	4294      	cmp	r4, r2
 80013ea:	d3f1      	bcc.n	80013d0 <Ap_StrCmd_ShowMenu+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <Ap_StrCmd_ShowMenu+0x58>)
	Ap_StrCmd_DlyCheck  = 0;
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <Ap_StrCmd_ShowMenu+0x5c>)
	Ap_StrCmd_LoopCheck = 0;	
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <Ap_StrCmd_ShowMenu+0x60>)
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	7003      	strb	r3, [r0, #0]
	Ap_StrCmd_DlyCheck  = 0;
 80013f6:	700b      	strb	r3, [r1, #0]
	Ap_StrCmd_LoopCheck = 0;	
 80013f8:	7013      	strb	r3, [r2, #0]
		Lb_sprintf( StrBuf, "%c%s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr );
		Ap_StrCmd_Print( StrBuf );
	}			

	Ap_StrCmd_CmdClear();
}
 80013fa:	b033      	add	sp, #204	; 0xcc
 80013fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001400:	20000f14 	.word	0x20000f14
 8001404:	080012a5 	.word	0x080012a5
 8001408:	0800dc4c 	.word	0x0800dc4c
 800140c:	20000ece 	.word	0x20000ece
 8001410:	20000f0c 	.word	0x20000f0c
 8001414:	20000f1c 	.word	0x20000f1c
 8001418:	20000b20 	.word	0x20000b20
 800141c:	080024ad 	.word	0x080024ad

08001420 <Ap_StrCmd_Printf>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Printf( char *format, ... )
{
 8001420:	b40f      	push	{r0, r1, r2, r3}
 8001422:	b500      	push	{lr}
 8001424:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;
	
	Lb_va_start( ap, format );

	Lb_vsprintf( Str, format, ap );	
 8001426:	aa34      	add	r2, sp, #208	; 0xd0
 8001428:	f242 7395 	movw	r3, #10133	; 0x2795
 800142c:	f852 1b04 	ldr.w	r1, [r2], #4
 8001430:	4668      	mov	r0, sp
 8001432:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001436:	4798      	blx	r3

	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);
 8001438:	f241 21a5 	movw	r1, #4773	; 0x12a5
 800143c:	4668      	mov	r0, sp
 800143e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001442:	4788      	blx	r1
}
 8001444:	b033      	add	sp, #204	; 0xcc
 8001446:	f85d eb04 	ldr.w	lr, [sp], #4
 800144a:	b004      	add	sp, #16
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <Ap_StrCmd_Echo>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Echo( u8 OpCode,  void *arg )
{
 8001450:	b510      	push	{r4, lr}
 8001452:	b086      	sub	sp, #24
	char Arg1[10];

	OpCode = OpCode;
	arg = arg;

	sscanf(arg, "%s %s", CmdMain, Arg1);
 8001454:	4608      	mov	r0, r1
 8001456:	466a      	mov	r2, sp
 8001458:	4910      	ldr	r1, [pc, #64]	; (800149c <Ap_StrCmd_Echo+0x4c>)
 800145a:	ab03      	add	r3, sp, #12
 800145c:	4c10      	ldr	r4, [pc, #64]	; (80014a0 <Ap_StrCmd_Echo+0x50>)
 800145e:	47a0      	blx	r4

	if( strncmp( Arg1, "ON", 2 ) == 0 )
 8001460:	a803      	add	r0, sp, #12
 8001462:	4910      	ldr	r1, [pc, #64]	; (80014a4 <Ap_StrCmd_Echo+0x54>)
 8001464:	2202      	movs	r2, #2
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <Ap_StrCmd_Echo+0x58>)
 8001468:	4798      	blx	r3
 800146a:	b178      	cbz	r0, 800148c <Ap_StrCmd_Echo+0x3c>
		Ap_StrCmd_EchoEnable = TRUE;
		Ap_StrCmd_Printf("%cEcho on\n", AP_STRCMD_FRAME_PRINT);
	}
	else
	{
		Ap_StrCmd_EchoEnable = FALSE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <Ap_StrCmd_Echo+0x5c>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
		Ap_StrCmd_Printf("%cEcho off\n", AP_STRCMD_FRAME_PRINT);	
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <Ap_StrCmd_Echo+0x60>)
 8001474:	212a      	movs	r1, #42	; 0x2a
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <Ap_StrCmd_Echo+0x64>)
 8001478:	4790      	blx	r2
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 800147a:	490f      	ldr	r1, [pc, #60]	; (80014b8 <Ap_StrCmd_Echo+0x68>)
	Ap_StrCmd_DlyCheck  = 0;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <Ap_StrCmd_Echo+0x6c>)
	Ap_StrCmd_LoopCheck = 0;	
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <Ap_StrCmd_Echo+0x70>)
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8001480:	2000      	movs	r0, #0
 8001482:	7008      	strb	r0, [r1, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8001484:	7018      	strb	r0, [r3, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8001486:	7010      	strb	r0, [r2, #0]
		Ap_StrCmd_EchoEnable = FALSE;
		Ap_StrCmd_Printf("%cEcho off\n", AP_STRCMD_FRAME_PRINT);	
	}

	Ap_StrCmd_CmdClear();
}
 8001488:	b006      	add	sp, #24
 800148a:	bd10      	pop	{r4, pc}

	sscanf(arg, "%s %s", CmdMain, Arg1);

	if( strncmp( Arg1, "ON", 2 ) == 0 )
	{
		Ap_StrCmd_EchoEnable = TRUE;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <Ap_StrCmd_Echo+0x5c>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
		Ap_StrCmd_Printf("%cEcho on\n", AP_STRCMD_FRAME_PRINT);
 8001492:	480c      	ldr	r0, [pc, #48]	; (80014c4 <Ap_StrCmd_Echo+0x74>)
 8001494:	212a      	movs	r1, #42	; 0x2a
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <Ap_StrCmd_Echo+0x64>)
 8001498:	4790      	blx	r2
 800149a:	e7ee      	b.n	800147a <Ap_StrCmd_Echo+0x2a>
 800149c:	0800dc54 	.word	0x0800dc54
 80014a0:	0800536d 	.word	0x0800536d
 80014a4:	0800dc5c 	.word	0x0800dc5c
 80014a8:	08005609 	.word	0x08005609
 80014ac:	20000a00 	.word	0x20000a00
 80014b0:	0800dc6c 	.word	0x0800dc6c
 80014b4:	08001421 	.word	0x08001421
 80014b8:	20000ece 	.word	0x20000ece
 80014bc:	20000f0c 	.word	0x20000f0c
 80014c0:	20000f1c 	.word	0x20000f1c
 80014c4:	0800dc60 	.word	0x0800dc60

080014c8 <Ap_StrCmd_ShowInfo>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowInfo( u8 OpCode,  void *arg )
{
 80014c8:	b538      	push	{r3, r4, r5, lr}
	OpCode = OpCode;
	arg = arg;

	Ap_StrCmd_Printf( "%c----------------------------------------- \r\n", AP_STRCMD_FRAME_PRINT );
 80014ca:	f64d 4578 	movw	r5, #56440	; 0xdc78
 80014ce:	f6c0 0500 	movt	r5, #2048	; 0x800
 80014d2:	f241 4421 	movw	r4, #5153	; 0x1421
 80014d6:	f6c0 0400 	movt	r4, #2048	; 0x800
 80014da:	4628      	mov	r0, r5
 80014dc:	212a      	movs	r1, #42	; 0x2a
 80014de:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c             Ap_StrCmd v0.1               \r\n", AP_STRCMD_FRAME_PRINT );
 80014e0:	f64d 40a8 	movw	r0, #56488	; 0xdca8
 80014e4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014e8:	212a      	movs	r1, #42	; 0x2a
 80014ea:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c                                          \r\n", AP_STRCMD_FRAME_PRINT );
 80014ec:	f64d 40d8 	movw	r0, #56536	; 0xdcd8
 80014f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014f4:	212a      	movs	r1, #42	; 0x2a
 80014f6:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c        made by : Cho Han Cheol           \r\n", AP_STRCMD_FRAME_PRINT );	
 80014f8:	f64d 5008 	movw	r0, #56584	; 0xdd08
 80014fc:	212a      	movs	r1, #42	; 0x2a
 80014fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001502:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c----------------------------------------- \r\n", AP_STRCMD_FRAME_PRINT );
 8001504:	4628      	mov	r0, r5
 8001506:	212a      	movs	r1, #42	; 0x2a
 8001508:	47a0      	blx	r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 800150a:	f640 60ce 	movw	r0, #3790	; 0xece
	Ap_StrCmd_DlyCheck  = 0;
 800150e:	f640 710c 	movw	r1, #3852	; 0xf0c
	Ap_StrCmd_LoopCheck = 0;	
 8001512:	f640 731c 	movw	r3, #3868	; 0xf1c
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8001516:	2200      	movs	r2, #0
 8001518:	f2c2 0000 	movt	r0, #8192	; 0x2000
	Ap_StrCmd_DlyCheck  = 0;
 800151c:	f2c2 0100 	movt	r1, #8192	; 0x2000
	Ap_StrCmd_LoopCheck = 0;	
 8001520:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8001524:	7002      	strb	r2, [r0, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8001526:	700a      	strb	r2, [r1, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	bd38      	pop	{r3, r4, r5, pc}

0800152c <Ap_StrCmd_ExeFunc>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
{
 800152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001530:	b093      	sub	sp, #76	; 0x4c
	u16 j;

	AP_STRCMD_CMD_OBJ CmdMsg;
	
	
	Disable_ISR();
 8001532:	b672      	cpsid	i
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
 8001534:	f10d 0b0c 	add.w	fp, sp, #12
 8001538:	4659      	mov	r1, fp
 800153a:	2000      	movs	r0, #0
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <Ap_StrCmd_ExeFunc+0x148>)
 800153e:	4798      	blx	r3
	Enable_ISR();
 8001540:	b662      	cpsie	i
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8001542:	484d      	ldr	r0, [pc, #308]	; (8001678 <Ap_StrCmd_ExeFunc+0x14c>)
 8001544:	f8b0 9000 	ldrh.w	r9, [r0]
 8001548:	fa1f f189 	uxth.w	r1, r9
 800154c:	9101      	str	r1, [sp, #4]
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
	Enable_ISR();
	
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
 800154e:	2900      	cmp	r1, #0
 8001550:	d07d      	beq.n	800164e <Ap_StrCmd_ExeFunc+0x122>
 8001552:	4a4a      	ldr	r2, [pc, #296]	; (800167c <Ap_StrCmd_ExeFunc+0x150>)
 8001554:	4d4a      	ldr	r5, [pc, #296]	; (8001680 <Ap_StrCmd_ExeFunc+0x154>)
 8001556:	f04f 0a00 	mov.w	sl, #0
 800155a:	6814      	ldr	r4, [r2, #0]
 800155c:	462e      	mov	r6, r5
 800155e:	4657      	mov	r7, sl
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8001560:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8001564:	7833      	ldrb	r3, [r6, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d07d      	beq.n	8001666 <Ap_StrCmd_ExeFunc+0x13a>
 800156a:	fb08 f00a 	mul.w	r0, r8, sl
 800156e:	2300      	movs	r3, #0

		Size++;
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	b28b      	uxth	r3, r1
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8001574:	18c2      	adds	r2, r0, r3
 8001576:	5ca9      	ldrb	r1, [r5, r2]
 8001578:	4699      	mov	r9, r3
 800157a:	2900      	cmp	r1, #0
 800157c:	d1f8      	bne.n	8001570 <Ap_StrCmd_ExeFunc+0x44>
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
 800157e:	f245 53a9 	movw	r3, #21929	; 0x55a9
 8001582:	4658      	mov	r0, fp
 8001584:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001588:	4798      	blx	r3
 800158a:	b280      	uxth	r0, r0
		
		for( j=0; j<CmdBufStrSize; j++ )
 800158c:	2800      	cmp	r0, #0
 800158e:	d049      	beq.n	8001624 <Ap_StrCmd_ExeFunc+0xf8>
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 8001590:	f89b 1000 	ldrb.w	r1, [fp]
     TITLE   : Ap_StrCmd_ExeFunc
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
 8001594:	1e42      	subs	r2, r0, #1
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 8001596:	1863      	adds	r3, r4, r1
 8001598:	f893 e001 	ldrb.w	lr, [r3, #1]
     TITLE   : Ap_StrCmd_ExeFunc
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
 800159c:	b290      	uxth	r0, r2
 800159e:	f10d 020d 	add.w	r2, sp, #13
 80015a2:	ea6f 030b 	mvn.w	r3, fp
 80015a6:	1810      	adds	r0, r2, r0
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 80015a8:	f00e 0c03 	and.w	ip, lr, #3
 80015ac:	181a      	adds	r2, r3, r0
 80015ae:	f1bc 0f02 	cmp.w	ip, #2
 80015b2:	f002 0201 	and.w	r2, r2, #1
 80015b6:	f10d 030d 	add.w	r3, sp, #13
 80015ba:	d050      	beq.n	800165e <Ap_StrCmd_ExeFunc+0x132>
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 80015bc:	4283      	cmp	r3, r0
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 80015be:	f803 1c01 	strb.w	r1, [r3, #-1]
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 80015c2:	d02f      	beq.n	8001624 <Ap_StrCmd_ExeFunc+0xf8>
 80015c4:	b172      	cbz	r2, 80015e4 <Ap_StrCmd_ExeFunc+0xb8>
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 80015c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80015ca:	eb04 0e01 	add.w	lr, r4, r1
 80015ce:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80015d2:	f002 0c03 	and.w	ip, r2, #3
 80015d6:	f1bc 0f02 	cmp.w	ip, #2
 80015da:	d042      	beq.n	8001662 <Ap_StrCmd_ExeFunc+0x136>
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 80015dc:	4283      	cmp	r3, r0
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 80015de:	f803 1c01 	strb.w	r1, [r3, #-1]
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 80015e2:	d01f      	beq.n	8001624 <Ap_StrCmd_ExeFunc+0xf8>
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 80015e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015e8:	18a1      	adds	r1, r4, r2
 80015ea:	f891 e001 	ldrb.w	lr, [r1, #1]
 80015ee:	4611      	mov	r1, r2
 80015f0:	f00e 0c03 	and.w	ip, lr, #3
 80015f4:	f1bc 0f02 	cmp.w	ip, #2
 80015f8:	bf08      	it	eq
 80015fa:	f1a2 0120 	subeq.w	r1, r2, #32
 80015fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001606:	18a1      	adds	r1, r4, r2
 8001608:	f891 e001 	ldrb.w	lr, [r1, #1]
 800160c:	4611      	mov	r1, r2
 800160e:	f00e 0c03 	and.w	ip, lr, #3
 8001612:	f1bc 0f02 	cmp.w	ip, #2
 8001616:	d1e1      	bne.n	80015dc <Ap_StrCmd_ExeFunc+0xb0>
 8001618:	f1a2 0120 	sub.w	r1, r2, #32
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 800161c:	4283      	cmp	r3, r0
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 800161e:	f803 1c01 	strb.w	r1, [r3, #-1]
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 8001622:	d1df      	bne.n	80015e4 <Ap_StrCmd_ExeFunc+0xb8>
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
		}
		
		CmdCheck = strncmp( Ap_StrCmd_Dic_Ptr[i].NameStr, (char *)CmdMsg.Str, CmdStrSize );
 8001624:	f245 6309 	movw	r3, #22025	; 0x5609
 8001628:	4659      	mov	r1, fp
 800162a:	fb08 500a 	mla	r0, r8, sl, r5
 800162e:	464a      	mov	r2, r9
 8001630:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001634:	4798      	blx	r3
		
		
		if( CmdCheck == 0 && Ap_StrCmd_Dic_Ptr[i].Func_Ptr != NULL )
 8001636:	b201      	sxth	r1, r0
 8001638:	b909      	cbnz	r1, 800163e <Ap_StrCmd_ExeFunc+0x112>
 800163a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800163c:	b9aa      	cbnz	r2, 800166a <Ap_StrCmd_ExeFunc+0x13e>
 800163e:	f10a 0a01 	add.w	sl, sl, #1
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
	Enable_ISR();
	
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
 8001642:	9801      	ldr	r0, [sp, #4]
 8001644:	fa1f f78a 	uxth.w	r7, sl
 8001648:	362c      	adds	r6, #44	; 0x2c
 800164a:	42b8      	cmp	r0, r7
 800164c:	d88a      	bhi.n	8001564 <Ap_StrCmd_ExeFunc+0x38>
			return true;
		}
	}
	
	
	Ap_StrCmd_SendResp( 0xFF, "\n" );
 800164e:	20ff      	movs	r0, #255	; 0xff
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <Ap_StrCmd_ExeFunc+0x158>)
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <Ap_StrCmd_ExeFunc+0x15c>)
 8001654:	4798      	blx	r3

	return false;
 8001656:	2000      	movs	r0, #0
}
 8001658:	b013      	add	sp, #76	; 0x4c
 800165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 800165e:	3920      	subs	r1, #32
 8001660:	e7ac      	b.n	80015bc <Ap_StrCmd_ExeFunc+0x90>
 8001662:	3920      	subs	r1, #32
 8001664:	e7ba      	b.n	80015dc <Ap_StrCmd_ExeFunc+0xb0>
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8001666:	4699      	mov	r9, r3
 8001668:	e789      	b.n	800157e <Ap_StrCmd_ExeFunc+0x52>
		CmdCheck = strncmp( Ap_StrCmd_Dic_Ptr[i].NameStr, (char *)CmdMsg.Str, CmdStrSize );
		
		
		if( CmdCheck == 0 && Ap_StrCmd_Dic_Ptr[i].Func_Ptr != NULL )
		{		
			AP_STRCMD_DIC_FUNC_EXEC(i, CmdMsg.Str); 			
 800166a:	b2f8      	uxtb	r0, r7
 800166c:	4659      	mov	r1, fp
 800166e:	4790      	blx	r2
			return true;
 8001670:	2001      	movs	r0, #1
 8001672:	e7f1      	b.n	8001658 <Ap_StrCmd_ExeFunc+0x12c>
 8001674:	080017b1 	.word	0x080017b1
 8001678:	20000f14 	.word	0x20000f14
 800167c:	200000e4 	.word	0x200000e4
 8001680:	20000b20 	.word	0x20000b20
 8001684:	0800dc50 	.word	0x0800dc50
 8001688:	080012d9 	.word	0x080012d9

0800168c <Ap_StrCmd_ExeCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_ExeCmd( void )
{
 800168c:	b508      	push	{r3, lr}
	u8 Ret = FALSE;

	if( Ap_StrCmd_Q_SIZE(AP_STRCMD_Q_RX_CH) )
 800168e:	2000      	movs	r0, #0
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <Ap_StrCmd_ExeCmd+0x14>)
 8001692:	4798      	blx	r3
 8001694:	b110      	cbz	r0, 800169c <Ap_StrCmd_ExeCmd+0x10>
	{
		Ap_StrCmd_ExeFunc();
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <Ap_StrCmd_ExeCmd+0x18>)
 8001698:	4780      	blx	r0
		Ret = TRUE;
 800169a:	2001      	movs	r0, #1
	}

	return Ret; 
}
 800169c:	bd08      	pop	{r3, pc}
 800169e:	bf00      	nop
 80016a0:	080016c1 	.word	0x080016c1
 80016a4:	0800152d 	.word	0x0800152d

080016a8 <Ap_StrCmd_Q_Init>:
{
	u8 i;
	
	for( i=0; i<AP_STRCMD_Q_CH_MAX; i++ )
	{
		Ap_StrCmd_Q_Start[i] = Ap_StrCmd_Q_End[i] = 0;
 80016a8:	f241 028c 	movw	r2, #4236	; 0x108c
 80016ac:	f640 7320 	movw	r3, #3872	; 0xf20
 80016b0:	2100      	movs	r1, #0
 80016b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80016b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016ba:	8011      	strh	r1, [r2, #0]
 80016bc:	8019      	strh	r1, [r3, #0]
 80016be:	4770      	bx	lr

080016c0 <Ap_StrCmd_Q_SIZE>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 80016c0:	f640 7220 	movw	r2, #3872	; 0xf20
 80016c4:	f241 038c 	movw	r3, #4236	; 0x108c
 80016c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80016cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d0:	f932 1010 	ldrsh.w	r1, [r2, r0, lsl #1]
 80016d4:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 80016d8:	f246 6067 	movw	r0, #26215	; 0x6667
 80016dc:	1a8b      	subs	r3, r1, r2
 80016de:	1d59      	adds	r1, r3, #5
 80016e0:	f2c6 6066 	movt	r0, #26214	; 0x6666
 80016e4:	fb80 2001 	smull	r2, r0, r0, r1
 80016e8:	17ca      	asrs	r2, r1, #31
 80016ea:	ebc2 0360 	rsb	r3, r2, r0, asr #1
 80016ee:	eb03 0083 	add.w	r0, r3, r3, lsl #2
}
 80016f2:	1a08      	subs	r0, r1, r0
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <Ap_StrCmd_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 80016f8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 80016fc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80017ac <Ap_StrCmd_Q_Push+0xb4>
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <Ap_StrCmd_Q_Push+0xac>)
 8001702:	f839 a010 	ldrh.w	sl, [r9, r0, lsl #1]
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 8001706:	4684      	mov	ip, r0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 8001708:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800170c:	fa0f f28a 	sxth.w	r2, sl
 8001710:	1a14      	subs	r4, r2, r0
 8001712:	f246 6867 	movw	r8, #26215	; 0x6667
 8001716:	1d66      	adds	r6, r4, #5
 8001718:	f2c6 6866 	movt	r8, #26214	; 0x6666
 800171c:	fb88 0406 	smull	r0, r4, r8, r6
 8001720:	17f3      	asrs	r3, r6, #31
 8001722:	ebc3 0064 	rsb	r0, r3, r4, asr #1
 8001726:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800172a:	1af0      	subs	r0, r6, r3
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
 800172c:	2804      	cmp	r0, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 800172e:	460e      	mov	r6, r1
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
 8001730:	d036      	beq.n	80017a0 <Ap_StrCmd_Q_Push+0xa8>
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 8001732:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001736:	fb01 f70c 	mul.w	r7, r1, ip
 800173a:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
 800173e:	eb07 0485 	add.w	r4, r7, r5, lsl #2
 8001742:	4f19      	ldr	r7, [pc, #100]	; (80017a8 <Ap_StrCmd_Q_Push+0xb0>)
 8001744:	6830      	ldr	r0, [r6, #0]
 8001746:	6871      	ldr	r1, [r6, #4]
 8001748:	68b2      	ldr	r2, [r6, #8]
 800174a:	68f3      	ldr	r3, [r6, #12]
 800174c:	193c      	adds	r4, r7, r4
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	4637      	mov	r7, r6
 8001752:	f857 0f10 	ldr.w	r0, [r7, #16]!
 8001756:	4625      	mov	r5, r4
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f10a 0a01 	add.w	sl, sl, #1
 8001762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001764:	f857 0f10 	ldr.w	r0, [r7, #16]!
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 8001768:	fa0f fa8a 	sxth.w	sl, sl
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	3420      	adds	r4, #32
 8001774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 8001776:	fb88 380a 	smull	r3, r8, r8, sl
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800177a:	f856 0f30 	ldr.w	r0, [r6, #48]!
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800177e:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8001782:	ebc2 0368 	rsb	r3, r2, r8, asr #1
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 8001786:	6871      	ldr	r1, [r6, #4]
 8001788:	68b2      	ldr	r2, [r6, #8]
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800178a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 800178e:	ebc8 0a0a 	rsb	sl, r8, sl
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 8001792:	c407      	stmia	r4!, {r0, r1, r2}
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 8001794:	f829 a01c 	strh.w	sl, [r9, ip, lsl #1]
	
	return TRUE;
 8001798:	2001      	movs	r0, #1
}                                                  
 800179a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800179e:	4770      	bx	lr
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
 80017a0:	2000      	movs	r0, #0
 80017a2:	e7fa      	b.n	800179a <Ap_StrCmd_Q_Push+0xa2>
 80017a4:	2000108c 	.word	0x2000108c
 80017a8:	20000f24 	.word	0x20000f24
 80017ac:	20000f20 	.word	0x20000f20

080017b0 <Ap_StrCmd_Q_Pop>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 80017b0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8001858 <Ap_StrCmd_Q_Pop+0xa8>
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <Ap_StrCmd_Q_Pop+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
 80017b6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 80017ba:	f83c 8010 	ldrh.w	r8, [ip, r0, lsl #1]
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
 80017be:	4606      	mov	r6, r0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 80017c0:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80017c4:	fa0f f288 	sxth.w	r2, r8
 80017c8:	1a84      	subs	r4, r0, r2
 80017ca:	f246 6067 	movw	r0, #26215	; 0x6667
 80017ce:	1d63      	adds	r3, r4, #5
 80017d0:	f2c6 6066 	movt	r0, #26214	; 0x6666
 80017d4:	fb80 4003 	smull	r4, r0, r0, r3
 80017d8:	17dc      	asrs	r4, r3, #31
 80017da:	ebc4 0060 	rsb	r0, r4, r0, asr #1
 80017de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
 80017e2:	1a1b      	subs	r3, r3, r0
 80017e4:	d02f      	beq.n	8001846 <Ap_StrCmd_Q_Pop+0x96>
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 80017e6:	f44f 75b4 	mov.w	r5, #360	; 0x168
 80017ea:	fb05 f706 	mul.w	r7, r5, r6
 80017ee:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <Ap_StrCmd_Q_Pop+0xa4>)
 80017f4:	eb07 0482 	add.w	r4, r7, r2, lsl #2
 80017f8:	191f      	adds	r7, r3, r4
 80017fa:	460d      	mov	r5, r1
 80017fc:	f107 0930 	add.w	r9, r7, #48	; 0x30
 8001800:	463c      	mov	r4, r7
 8001802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001804:	6028      	str	r0, [r5, #0]
 8001806:	6069      	str	r1, [r5, #4]
 8001808:	60aa      	str	r2, [r5, #8]
 800180a:	60eb      	str	r3, [r5, #12]
 800180c:	3510      	adds	r5, #16
 800180e:	454c      	cmp	r4, r9
 8001810:	4627      	mov	r7, r4
 8001812:	d1f5      	bne.n	8001800 <Ap_StrCmd_Q_Pop+0x50>
 8001814:	f108 0801 	add.w	r8, r8, #1
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;
 8001818:	f246 6167 	movw	r1, #26215	; 0x6667
 800181c:	fa0f f088 	sxth.w	r0, r8
 8001820:	f2c6 6166 	movt	r1, #26214	; 0x6666
 8001824:	fb81 2300 	smull	r2, r3, r1, r0
 8001828:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800182c:	ebc2 0163 	rsb	r1, r2, r3, asr #1
 8001830:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001834:	ebc3 0800 	rsb	r8, r3, r0
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 8001838:	cf07      	ldmia	r7!, {r0, r1, r2}
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;

    return AP_STRCMD_POP_SUCCESS;
 800183a:	2302      	movs	r3, #2
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800183c:	6028      	str	r0, [r5, #0]
 800183e:	6069      	str	r1, [r5, #4]
 8001840:	60aa      	str	r2, [r5, #8]
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;
 8001842:	f82c 8016 	strh.w	r8, [ip, r6, lsl #1]

    return AP_STRCMD_POP_SUCCESS;
}
 8001846:	b258      	sxtb	r0, r3
 8001848:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000f20 	.word	0x20000f20
 8001854:	20000f24 	.word	0x20000f24
 8001858:	2000108c 	.word	0x2000108c

0800185c <Ap_StrCmd_List>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_List( void )
{
 800185c:	b508      	push	{r3, lr}
	Ap_StrCmd_AddCmd( "MOVE", "Robot Move",		  Ap_StrCmd_MOVE );
 800185e:	f64d 5038 	movw	r0, #56632	; 0xdd38
 8001862:	f241 03cd 	movw	r3, #4301	; 0x10cd
 8001866:	f64d 5140 	movw	r1, #56640	; 0xdd40
 800186a:	f641 0285 	movw	r2, #6277	; 0x1885
 800186e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001872:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001876:	f6c0 0300 	movt	r3, #2048	; 0x800
 800187a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800187e:	4798      	blx	r3
 8001880:	bd08      	pop	{r3, pc}
 8001882:	bf00      	nop

08001884 <Ap_StrCmd_MOVE>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_MOVE( u8 OpCode,  void *arg )
{
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
	char *argv[128];
	u16  argc;

	//sscanf((char *)arg, "%s %s %d %d", CmdMain, CmdSub, &LeftSpeed, &RightSpeed);

	argc = Lb_Util_PaseArgs( (char *)arg, argv );
 800188a:	4608      	mov	r0, r1
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <Ap_StrCmd_MOVE+0x50>)
 800188e:	4669      	mov	r1, sp
 8001890:	4798      	blx	r3


	if( strcmp( argv[1], "PWM" ) == 0 )
 8001892:	9801      	ldr	r0, [sp, #4]
 8001894:	4910      	ldr	r1, [pc, #64]	; (80018d8 <Ap_StrCmd_MOVE+0x54>)
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <Ap_StrCmd_MOVE+0x58>)
 8001898:	4790      	blx	r2
 800189a:	4604      	mov	r4, r0
 800189c:	b130      	cbz	r0, 80018ac <Ap_StrCmd_MOVE+0x28>
 800189e:	4d10      	ldr	r5, [pc, #64]	; (80018e0 <Ap_StrCmd_MOVE+0x5c>)

		Ap_StrCmd_SendResp( ErrCode, "%d %d\n", LeftSpeed, RightSpeed );
	}
	else
	{
		ErrCode = 0xFF;
 80018a0:	20ff      	movs	r0, #255	; 0xff
	}

	Ap_StrCmd_SendResp( ErrCode, "\n" );
 80018a2:	4910      	ldr	r1, [pc, #64]	; (80018e4 <Ap_StrCmd_MOVE+0x60>)
 80018a4:	47a8      	blx	r5
}
 80018a6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 80018aa:	bd70      	pop	{r4, r5, r6, pc}


	if( strcmp( argv[1], "PWM" ) == 0 )
	{
		
		LeftSpeed  = Lb_Util_atoi(argv[2]);
 80018ac:	4e0e      	ldr	r6, [pc, #56]	; (80018e8 <Ap_StrCmd_MOVE+0x64>)
 80018ae:	9802      	ldr	r0, [sp, #8]
 80018b0:	47b0      	blx	r6
 80018b2:	4605      	mov	r5, r0
		RightSpeed = Lb_Util_atoi(argv[3]); 
 80018b4:	9803      	ldr	r0, [sp, #12]
 80018b6:	47b0      	blx	r6


		Hw_DcMotor_Handle( LeftSpeed, RightSpeed );
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <Ap_StrCmd_MOVE+0x68>)
 80018ba:	b201      	sxth	r1, r0

	if( strcmp( argv[1], "PWM" ) == 0 )
	{
		
		LeftSpeed  = Lb_Util_atoi(argv[2]);
		RightSpeed = Lb_Util_atoi(argv[3]); 
 80018bc:	4606      	mov	r6, r0


		Hw_DcMotor_Handle( LeftSpeed, RightSpeed );
 80018be:	b228      	sxth	r0, r5
 80018c0:	4798      	blx	r3

		Ap_StrCmd_SendResp( ErrCode, "%d %d\n", LeftSpeed, RightSpeed );
 80018c2:	4620      	mov	r0, r4
 80018c4:	462a      	mov	r2, r5
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <Ap_StrCmd_MOVE+0x6c>)
 80018c8:	4633      	mov	r3, r6
 80018ca:	4d05      	ldr	r5, [pc, #20]	; (80018e0 <Ap_StrCmd_MOVE+0x5c>)
 80018cc:	47a8      	blx	r5
	int  LeftSpeed;
	int  RightSpeed;

	int  Cnt = -1;

	u8	 ErrCode = ERR_NONE;
 80018ce:	4620      	mov	r0, r4
 80018d0:	e7e7      	b.n	80018a2 <Ap_StrCmd_MOVE+0x1e>
 80018d2:	bf00      	nop
 80018d4:	080018f5 	.word	0x080018f5
 80018d8:	0800dd4c 	.word	0x0800dd4c
 80018dc:	080053cd 	.word	0x080053cd
 80018e0:	080012d9 	.word	0x080012d9
 80018e4:	0800dc50 	.word	0x0800dc50
 80018e8:	08001929 	.word	0x08001929
 80018ec:	08003725 	.word	0x08003725
 80018f0:	0800dd50 	.word	0x0800dd50

080018f4 <Lb_Util_PaseArgs>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
{
 80018f4:	b570      	push	{r4, r5, r6, lr}
	char *tok;
	int argc = 0;

	argv[argc] = NULL;
 80018f6:	2400      	movs	r4, #0
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
{
 80018f8:	460d      	mov	r5, r1
	char *tok;
	int argc = 0;

	argv[argc] = NULL;
 80018fa:	600c      	str	r4, [r1, #0]

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
 80018fc:	4e08      	ldr	r6, [pc, #32]	; (8001920 <Lb_Util_PaseArgs+0x2c>)
 80018fe:	4909      	ldr	r1, [pc, #36]	; (8001924 <Lb_Util_PaseArgs+0x30>)
 8001900:	47b0      	blx	r6
 8001902:	b150      	cbz	r0, 800191a <Lb_Util_PaseArgs+0x26>
     TITLE   : Lb_Util_PaseArgs
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
 8001904:	3d04      	subs	r5, #4

	argv[argc] = NULL;

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
	{
		argv[argc++] = tok;
 8001906:	f845 0f04 	str.w	r0, [r5, #4]!
	char *tok;
	int argc = 0;

	argv[argc] = NULL;

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
 800190a:	4906      	ldr	r1, [pc, #24]	; (8001924 <Lb_Util_PaseArgs+0x30>)
 800190c:	2000      	movs	r0, #0
 800190e:	47b0      	blx	r6
	{
		argv[argc++] = tok;
 8001910:	3401      	adds	r4, #1
	char *tok;
	int argc = 0;

	argv[argc] = NULL;

	for (tok = strtok(cmdline, delim); tok; tok = strtok(NULL, delim))
 8001912:	2800      	cmp	r0, #0
 8001914:	d1f7      	bne.n	8001906 <Lb_Util_PaseArgs+0x12>
	{
		argv[argc++] = tok;
	}

	return argc;
}
 8001916:	4620      	mov	r0, r4
 8001918:	bd70      	pop	{r4, r5, r6, pc}
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_PaseArgs(char *cmdline, char **argv)
{
	char *tok;
	int argc = 0;
 800191a:	4604      	mov	r4, r0
 800191c:	e7fb      	b.n	8001916 <Lb_Util_PaseArgs+0x22>
 800191e:	bf00      	nop
 8001920:	08005729 	.word	0x08005729
 8001924:	0800dd58 	.word	0x0800dd58

08001928 <Lb_Util_atoi>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_atoi(char *str)
{
 8001928:	b410      	push	{r4}
	int i = 0, j = 0;
 
    if (*str == '-' || isdigit(*str)) 
 800192a:	7803      	ldrb	r3, [r0, #0]
 800192c:	2b2d      	cmp	r3, #45	; 0x2d
 800192e:	d016      	beq.n	800195e <Lb_Util_atoi+0x36>
 8001930:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001934:	2a09      	cmp	r2, #9
 8001936:	d810      	bhi.n	800195a <Lb_Util_atoi+0x32>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_atoi(char *str)
{
	int i = 0, j = 0;
 8001938:	2400      	movs	r4, #0
 800193a:	4602      	mov	r2, r0
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int Lb_Util_atoi(char *str)
{
 800193c:	2000      	movs	r0, #0
    {
		if(*str == '-') j = 1, str++;

		while(isdigit(*str))
		{
			i = i * 10 + (*(str)) - 48;
 800193e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001942:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;

		while(isdigit(*str))
 8001946:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		{
			i = i * 10 + (*(str)) - 48;
 800194a:	3830      	subs	r0, #48	; 0x30
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;

		while(isdigit(*str))
 800194c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001950:	2909      	cmp	r1, #9
 8001952:	d9f4      	bls.n	800193e <Lb_Util_atoi+0x16>
		{
			i = i * 10 + (*(str)) - 48;
			str++;
		}
		if (j == 1) return -i;
 8001954:	b954      	cbnz	r4, 800196c <Lb_Util_atoi+0x44>
		else 		return i;
	}
	else
		return 0;
}
 8001956:	bc10      	pop	{r4}
 8001958:	4770      	bx	lr
		}
		if (j == 1) return -i;
		else 		return i;
	}
	else
		return 0;
 800195a:	2000      	movs	r0, #0
 800195c:	e7fb      	b.n	8001956 <Lb_Util_atoi+0x2e>
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;

		while(isdigit(*str))
 800195e:	7843      	ldrb	r3, [r0, #1]
{
	int i = 0, j = 0;
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;
 8001960:	3001      	adds	r0, #1

		while(isdigit(*str))
 8001962:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001966:	2909      	cmp	r1, #9
 8001968:	d902      	bls.n	8001970 <Lb_Util_atoi+0x48>
 800196a:	2000      	movs	r0, #0
		{
			i = i * 10 + (*(str)) - 48;
			str++;
		}
		if (j == 1) return -i;
 800196c:	4240      	negs	r0, r0
 800196e:	e7f2      	b.n	8001956 <Lb_Util_atoi+0x2e>
{
	int i = 0, j = 0;
 
    if (*str == '-' || isdigit(*str)) 
    {
		if(*str == '-') j = 1, str++;
 8001970:	2401      	movs	r4, #1
 8001972:	e7e2      	b.n	800193a <Lb_Util_atoi+0x12>

08001974 <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __asm volatile ("MRS %0, msp\n\t" 
 8001974:	f3ef 8008 	mrs	r0, MSP
 8001978:	4600      	mov	r0, r0
 800197a:	4770      	bx	lr

0800197c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 800197c:	b570      	push	{r4, r5, r6, lr}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 800197e:	4d0b      	ldr	r5, [pc, #44]	; (80019ac <_sbrk+0x30>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8001980:	4606      	mov	r6, r0

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8001982:	682c      	ldr	r4, [r5, #0]
 8001984:	b17c      	cbz	r4, 80019a6 <_sbrk+0x2a>
        heap_end = &_ebss;
    }
    prev_heap_end = heap_end;

char * stack = (char*) __get_MSP();
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <_sbrk+0x34>)
 8001988:	4798      	blx	r3
     if (heap_end + incr >  stack)
 800198a:	19a1      	adds	r1, r4, r6
 800198c:	4281      	cmp	r1, r0
 800198e:	d802      	bhi.n	8001996 <_sbrk+0x1a>
         errno = ENOMEM;
         return  (caddr_t) -1;
         //abort ();
     }

    heap_end += incr;
 8001990:	6029      	str	r1, [r5, #0]
    return (caddr_t) prev_heap_end;

}
 8001992:	4620      	mov	r0, r4
 8001994:	bd70      	pop	{r4, r5, r6, pc}

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
     {
         //_write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <_sbrk+0x38>)
 8001998:	4780      	blx	r0
         return  (caddr_t) -1;
 800199a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

char * stack = (char*) __get_MSP();
     if (heap_end + incr >  stack)
     {
         //_write (STDERR_FILENO, "Heap and stack collision\n", 25);
         errno = ENOMEM;
 800199e:	220c      	movs	r2, #12
 80019a0:	6002      	str	r2, [r0, #0]
     }

    heap_end += incr;
    return (caddr_t) prev_heap_end;

}
 80019a2:	4620      	mov	r0, r4
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
        heap_end = &_ebss;
 80019a6:	4c04      	ldr	r4, [pc, #16]	; (80019b8 <_sbrk+0x3c>)
 80019a8:	602c      	str	r4, [r5, #0]
 80019aa:	e7ec      	b.n	8001986 <_sbrk+0xa>
 80019ac:	20000a04 	.word	0x20000a04
 80019b0:	08001975 	.word	0x08001975
 80019b4:	08005361 	.word	0x08005361
 80019b8:	20001d48 	.word	0x20001d48

080019bc <print_byte_out>:




void print_byte_out(unsigned int c)
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 80019c0:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 80019c2:	7819      	ldrb	r1, [r3, #0]
 80019c4:	b151      	cbz	r1, 80019dc <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <print_byte_out+0x2c>)
 80019c8:	4908      	ldr	r1, [pc, #32]	; (80019ec <print_byte_out+0x30>)
 80019ca:	6814      	ldr	r4, [r2, #0]
 80019cc:	6808      	ldr	r0, [r1, #0]
 80019ce:	1c63      	adds	r3, r4, #1
 80019d0:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 80019d2:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 80019d4:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 80019d6:	2200      	movs	r2, #0
 80019d8:	54ca      	strb	r2, [r1, r3]
 80019da:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <print_byte_out+0x34>)
 80019de:	4798      	blx	r3
 80019e0:	bd38      	pop	{r3, r4, r5, pc}
 80019e2:	bf00      	nop
 80019e4:	20000a0c 	.word	0x20000a0c
 80019e8:	20000a08 	.word	0x20000a08
 80019ec:	20001094 	.word	0x20001094
 80019f0:	08002e51 	.word	0x08002e51

080019f4 <PrintString>:
        }
        return;
}

void PrintString(char *fmt, char *s)
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
        if (!fmt || !s) return;
 80019f6:	b148      	cbz	r0, 8001a0c <PrintString+0x18>
 80019f8:	b141      	cbz	r1, 8001a0c <PrintString+0x18>
        while (*s) print_byte_out(*s++);
 80019fa:	7808      	ldrb	r0, [r1, #0]
 80019fc:	b130      	cbz	r0, 8001a0c <PrintString+0x18>
 80019fe:	4d04      	ldr	r5, [pc, #16]	; (8001a10 <PrintString+0x1c>)
 8001a00:	460c      	mov	r4, r1
 8001a02:	47a8      	blx	r5
 8001a04:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d1fa      	bne.n	8001a02 <PrintString+0xe>
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
 8001a0e:	bf00      	nop
 8001a10:	080019bd 	.word	0x080019bd

08001a14 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8001a14:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 8001a16:	b1c8      	cbz	r0, 8001a4c <DecToLong+0x38>
 8001a18:	7803      	ldrb	r3, [r0, #0]
 8001a1a:	b1cb      	cbz	r3, 8001a50 <DecToLong+0x3c>


        for (*retval=0; *s; s++){
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	7802      	ldrb	r2, [r0, #0]
 8001a22:	b192      	cbz	r2, 8001a4a <DecToLong+0x36>
                if (*s < '0' || *s > '9') return false;
 8001a24:	3a30      	subs	r2, #48	; 0x30
 8001a26:	b2d4      	uxtb	r4, r2
 8001a28:	2c09      	cmp	r4, #9
 8001a2a:	d902      	bls.n	8001a32 <DecToLong+0x1e>
 8001a2c:	e012      	b.n	8001a54 <DecToLong+0x40>
 8001a2e:	2d09      	cmp	r5, #9
 8001a30:	d810      	bhi.n	8001a54 <DecToLong+0x40>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8001a32:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8001a36:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8001a3a:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8001a3c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 8001a40:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8001a44:	b2d5      	uxtb	r5, r2
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d1f1      	bne.n	8001a2e <DecToLong+0x1a>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8001a4a:	2001      	movs	r0, #1
}        // DecToLong.
 8001a4c:	bc30      	pop	{r4, r5}
 8001a4e:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8001a50:	4618      	mov	r0, r3
 8001a52:	e7fb      	b.n	8001a4c <DecToLong+0x38>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8001a54:	2000      	movs	r0, #0
 8001a56:	e7f9      	b.n	8001a4c <DecToLong+0x38>

08001a58 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8001a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a5c:	4682      	mov	sl, r0
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8001a5e:	7800      	ldrb	r0, [r0, #0]
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8001a60:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 8001a62:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 8001a64:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8001a68:	9300      	str	r3, [sp, #0]
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 8001a6a:	bfba      	itte	lt
 8001a6c:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 8001a70:	f04f 0901 	movlt.w	r9, #1
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 8001a74:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8001a76:	2800      	cmp	r0, #0
 8001a78:	f000 8140 	beq.w	8001cfc <PrintDec+0x2a4>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8001a7c:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8001a7e:	2864      	cmp	r0, #100	; 0x64
 8001a80:	d029      	beq.n	8001ad6 <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 8001a82:	4ea1      	ldr	r6, [pc, #644]	; (8001d08 <PrintDec+0x2b0>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8001a84:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001a86:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 8001a88:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
 8001a8c:	2a08      	cmp	r2, #8
 8001a8e:	f200 808e 	bhi.w	8001bae <PrintDec+0x156>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001a92:	f81a 2004 	ldrb.w	r2, [sl, r4]
 8001a96:	eb0a 0104 	add.w	r1, sl, r4
 8001a9a:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8001a9e:	2809      	cmp	r0, #9
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	a801      	add	r0, sp, #4
 8001aa6:	d809      	bhi.n	8001abc <PrintDec+0x64>
			{
				tol[j] = s[i++];
 8001aa8:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001aaa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 8001aae:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8001ab0:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f1be 0f09 	cmp.w	lr, #9
 8001aba:	d9f5      	bls.n	8001aa8 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001abc:	a904      	add	r1, sp, #16
 8001abe:	18ca      	adds	r2, r1, r3
			i--;
			DecToLong(tol, &flagcnt);
 8001ac0:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8001ac2:	f802 7c0c 	strb.w	r7, [r2, #-12]
			i--;
 8001ac6:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8001ac8:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8001aca:	3401      	adds	r4, #1
 8001acc:	f81a 0004 	ldrb.w	r0, [sl, r4]
 8001ad0:	b108      	cbz	r0, 8001ad6 <PrintDec+0x7e>
	{
		if (c=='d') break;
 8001ad2:	2864      	cmp	r0, #100	; 0x64
 8001ad4:	d1d8      	bne.n	8001a88 <PrintDec+0x30>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8001ad6:	f1b9 0f00 	cmp.w	r9, #0
 8001ada:	f040 810b 	bne.w	8001cf4 <PrintDec+0x29c>
 8001ade:	4e8b      	ldr	r6, [pc, #556]	; (8001d0c <PrintDec+0x2b4>)


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8001ae0:	9800      	ldr	r0, [sp, #0]
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d067      	beq.n	8001bb6 <PrintDec+0x15e>
	{
                if (flagcnt>9) flagcnt=9;
 8001ae6:	2809      	cmp	r0, #9
 8001ae8:	f300 80ff 	bgt.w	8001cea <PrintDec+0x292>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8001aec:	1e44      	subs	r4, r0, #1


        while (cnt--){
 8001aee:	1e81      	subs	r1, r0, #2
 8001af0:	1ec7      	subs	r7, r0, #3
 8001af2:	2c00      	cmp	r4, #0
 8001af4:	f000 8104 	beq.w	8001d00 <PrintDec+0x2a8>
 8001af8:	f001 0401 	and.w	r4, r1, #1
                retval *= num;
 8001afc:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001afe:	1e4a      	subs	r2, r1, #1
 8001b00:	b171      	cbz	r1, 8001b20 <PrintDec+0xc8>
 8001b02:	b124      	cbz	r4, 8001b0e <PrintDec+0xb6>
 8001b04:	3a01      	subs	r2, #1
 8001b06:	1c51      	adds	r1, r2, #1
                retval *= num;
 8001b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b0c:	d008      	beq.n	8001b20 <PrintDec+0xc8>
                retval *= num;
 8001b0e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8001b12:	00e1      	lsls	r1, r4, #3
 8001b14:	eb01 0344 	add.w	r3, r1, r4, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b18:	3a02      	subs	r2, #2
                retval *= num;
 8001b1a:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b1c:	1c51      	adds	r1, r2, #1
 8001b1e:	d1f6      	bne.n	8001b0e <PrintDec+0xb6>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8001b20:	fb98 f2f3 	sdiv	r2, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b24:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8001b26:	fb03 8812 	mls	r8, r3, r2, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b2a:	f000 80eb 	beq.w	8001d04 <PrintDec+0x2ac>
 8001b2e:	f007 0001 	and.w	r0, r7, #1
                retval *= num;
 8001b32:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b34:	1e79      	subs	r1, r7, #1
 8001b36:	b177      	cbz	r7, 8001b56 <PrintDec+0xfe>
 8001b38:	b120      	cbz	r0, 8001b44 <PrintDec+0xec>
 8001b3a:	3901      	subs	r1, #1
 8001b3c:	1c48      	adds	r0, r1, #1
                retval *= num;
 8001b3e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b42:	d008      	beq.n	8001b56 <PrintDec+0xfe>
                retval *= num;
 8001b44:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8001b48:	00fc      	lsls	r4, r7, #3
 8001b4a:	eb04 0347 	add.w	r3, r4, r7, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b4e:	3902      	subs	r1, #2
                retval *= num;
 8001b50:	005c      	lsls	r4, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001b52:	1c4f      	adds	r7, r1, #1
 8001b54:	d1f6      	bne.n	8001b44 <PrintDec+0xec>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001b56:	f246 6767 	movw	r7, #26215	; 0x6667
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8001b5a:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001b5e:	f2c6 6766 	movt	r7, #26214	; 0x6666
 8001b62:	e00f      	b.n	8001b84 <PrintDec+0x12c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8001b64:	2c01      	cmp	r4, #1
 8001b66:	d015      	beq.n	8001b94 <PrintDec+0x13c>


                        if (leading_zero==true){
 8001b68:	f1b9 0f00 	cmp.w	r9, #0
 8001b6c:	d012      	beq.n	8001b94 <PrintDec+0x13c>
                                if (flag0)        print_byte_out('0');
 8001b6e:	2030      	movs	r0, #48	; 0x30
 8001b70:	b905      	cbnz	r5, 8001b74 <PrintDec+0x11c>
                                else                print_byte_out(' ');
 8001b72:	2020      	movs	r0, #32
 8001b74:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001b76:	fb87 2004 	smull	r2, r0, r7, r4
 8001b7a:	17e1      	asrs	r1, r4, #31
 8001b7c:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 8001b80:	2c00      	cmp	r4, #0
 8001b82:	dd11      	ble.n	8001ba8 <PrintDec+0x150>
                        result = remainder/divisor;
 8001b84:	fb98 f2f4 	sdiv	r2, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8001b88:	b2d0      	uxtb	r0, r2
 8001b8a:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8001b8c:	fb04 8812 	mls	r8, r4, r2, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d0e7      	beq.n	8001b64 <PrintDec+0x10c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8001b94:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001b96:	fb87 2004 	smull	r2, r0, r7, r4
 8001b9a:	17e1      	asrs	r1, r4, #31
 8001b9c:	ebc1 04a0 	rsb	r4, r1, r0, asr #2
 8001ba0:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8001ba2:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8001ba6:	dced      	bgt.n	8001b84 <PrintDec+0x12c>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8001ba8:	b004      	add	sp, #16
 8001baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 8001bae:	2830      	cmp	r0, #48	; 0x30
 8001bb0:	bf08      	it	eq
 8001bb2:	2501      	moveq	r5, #1
 8001bb4:	e789      	b.n	8001aca <PrintDec+0x72>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bb6:	f642 73a1 	movw	r3, #12193	; 0x2fa1
 8001bba:	f2c4 43b8 	movt	r3, #17592	; 0x44b8
 8001bbe:	fb83 2408 	smull	r2, r4, r3, r8
 8001bc2:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8001bc6:	f44f 424a 	mov.w	r2, #51712	; 0xca00
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bca:	ebc1 7024 	rsb	r0, r1, r4, asr #28
                        remainder %= divisor;
 8001bce:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
 8001bd2:	fb02 8810 	mls	r8, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	f000 809a 	beq.w	8001d10 <PrintDec+0x2b8>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001bdc:	b2c0      	uxtb	r0, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bde:	f643 3489 	movw	r4, #15241	; 0x3b89
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001be2:	3030      	adds	r0, #48	; 0x30
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001be4:	f2c5 54e6 	movt	r4, #21990	; 0x55e6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001be8:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bea:	fb84 2008 	smull	r2, r0, r4, r8
 8001bee:	ea4f 71e8 	mov.w	r1, r8, asr #31
                        remainder %= divisor;
 8001bf2:	f44f 4261 	mov.w	r2, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001bf6:	ebc1 6060 	rsb	r0, r1, r0, asr #25
                        remainder %= divisor;
 8001bfa:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
 8001bfe:	fb02 8410 	mls	r4, r2, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001c02:	3030      	adds	r0, #48	; 0x30
 8001c04:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c06:	f64c 236b 	movw	r3, #51819	; 0xca6b
 8001c0a:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
 8001c0e:	fb83 2004 	smull	r2, r0, r3, r4
 8001c12:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001c14:	f249 6280 	movw	r2, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c18:	ebc1 50a0 	rsb	r0, r1, r0, asr #22
                        remainder %= divisor;
 8001c1c:	f2c0 0298 	movt	r2, #152	; 0x98
 8001c20:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001c24:	3030      	adds	r0, #48	; 0x30
 8001c26:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c28:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001c2c:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8001c30:	fb83 2004 	smull	r2, r0, r3, r4
 8001c34:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001c36:	f244 2240 	movw	r2, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c3a:	ebc1 40a0 	rsb	r0, r1, r0, asr #18
                        remainder %= divisor;
 8001c3e:	f2c0 020f 	movt	r2, #15
 8001c42:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001c46:	3030      	adds	r0, #48	; 0x30
 8001c48:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c4a:	f24b 5389 	movw	r3, #46473	; 0xb589
 8001c4e:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
 8001c52:	fb83 2004 	smull	r2, r0, r3, r4
 8001c56:	17e1      	asrs	r1, r4, #31
                        remainder %= divisor;
 8001c58:	f248 62a0 	movw	r2, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c5c:	ebc1 3060 	rsb	r0, r1, r0, asr #13
                        remainder %= divisor;
 8001c60:	f2c0 0201 	movt	r2, #1
 8001c64:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001c68:	3030      	adds	r0, #48	; 0x30
 8001c6a:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c6c:	f648 33ad 	movw	r3, #35757	; 0x8bad
 8001c70:	f6c6 03db 	movt	r3, #26843	; 0x68db
 8001c74:	fb83 2004 	smull	r2, r0, r3, r4
 8001c78:	17e1      	asrs	r1, r4, #31
 8001c7a:	ebc1 3020 	rsb	r0, r1, r0, asr #12
                        remainder %= divisor;
 8001c7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c82:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001c86:	3030      	adds	r0, #48	; 0x30
 8001c88:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001c8a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001c8e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8001c92:	fb83 2004 	smull	r2, r0, r3, r4
 8001c96:	17e1      	asrs	r1, r4, #31
 8001c98:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
                        remainder %= divisor;
 8001c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca0:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001ca4:	3030      	adds	r0, #48	; 0x30
 8001ca6:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001ca8:	f248 531f 	movw	r3, #34079	; 0x851f
 8001cac:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8001cb0:	fb83 2004 	smull	r2, r0, r3, r4
 8001cb4:	17e1      	asrs	r1, r4, #31
 8001cb6:	ebc1 1060 	rsb	r0, r1, r0, asr #5
                        remainder %= divisor;
 8001cba:	2264      	movs	r2, #100	; 0x64
 8001cbc:	fb02 4410 	mls	r4, r2, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001cc0:	3030      	adds	r0, #48	; 0x30
 8001cc2:	47b0      	blx	r6
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001cc4:	f246 6367 	movw	r3, #26215	; 0x6667
 8001cc8:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8001ccc:	fb83 2004 	smull	r2, r0, r3, r4
 8001cd0:	17e1      	asrs	r1, r4, #31
 8001cd2:	ebc1 00a0 	rsb	r0, r1, r0, asr #2
                        remainder %= divisor;
 8001cd6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001cda:	eba4 0442 	sub.w	r4, r4, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 8001cde:	3030      	adds	r0, #48	; 0x30
 8001ce0:	47b0      	blx	r6
 8001ce2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001ce6:	47b0      	blx	r6
 8001ce8:	e75e      	b.n	8001ba8 <PrintDec+0x150>


	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
 8001cea:	2009      	movs	r0, #9
 8001cec:	9000      	str	r0, [sp, #0]
 8001cee:	2706      	movs	r7, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001cf0:	2107      	movs	r1, #7
 8001cf2:	e701      	b.n	8001af8 <PrintDec+0xa0>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8001cf4:	202d      	movs	r0, #45	; 0x2d
 8001cf6:	4e05      	ldr	r6, [pc, #20]	; (8001d0c <PrintDec+0x2b4>)
 8001cf8:	47b0      	blx	r6
 8001cfa:	e6f1      	b.n	8001ae0 <PrintDec+0x88>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	e6ea      	b.n	8001ad6 <PrintDec+0x7e>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8001d00:	230a      	movs	r3, #10
 8001d02:	e70d      	b.n	8001b20 <PrintDec+0xc8>
 8001d04:	240a      	movs	r4, #10
 8001d06:	e726      	b.n	8001b56 <PrintDec+0xfe>
 8001d08:	08001a15 	.word	0x08001a15
 8001d0c:	080019bd 	.word	0x080019bd
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d10:	f643 3389 	movw	r3, #15241	; 0x3b89
 8001d14:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
 8001d18:	fb83 2108 	smull	r2, r1, r3, r8
                        remainder %= divisor;
 8001d1c:	f44f 4461 	mov.w	r4, #57600	; 0xe100
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d20:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8001d24:	ebc2 6061 	rsb	r0, r2, r1, asr #25
                        remainder %= divisor;
 8001d28:	f2c0 54f5 	movt	r4, #1525	; 0x5f5
 8001d2c:	fb04 8410 	mls	r4, r4, r0, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8001d30:	2800      	cmp	r0, #0
 8001d32:	f47f af66 	bne.w	8001c02 <PrintDec+0x1aa>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d36:	f64c 206b 	movw	r0, #51819	; 0xca6b
 8001d3a:	f6c6 305f 	movt	r0, #27487	; 0x6b5f
 8001d3e:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001d42:	f249 6380 	movw	r3, #38528	; 0x9680
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d46:	17e2      	asrs	r2, r4, #31
 8001d48:	ebc2 50a1 	rsb	r0, r2, r1, asr #22
                        remainder %= divisor;
 8001d4c:	f2c0 0398 	movt	r3, #152	; 0x98
 8001d50:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001d54:	2800      	cmp	r0, #0
 8001d56:	f47f af65 	bne.w	8001c24 <PrintDec+0x1cc>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d5a:	f64d 6083 	movw	r0, #56963	; 0xde83
 8001d5e:	f2c4 301b 	movt	r0, #17179	; 0x431b
 8001d62:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001d66:	f244 2340 	movw	r3, #16960	; 0x4240
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d6a:	17e2      	asrs	r2, r4, #31
 8001d6c:	ebc2 40a1 	rsb	r0, r2, r1, asr #18
                        remainder %= divisor;
 8001d70:	f2c0 030f 	movt	r3, #15
 8001d74:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	f47f af64 	bne.w	8001c46 <PrintDec+0x1ee>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d7e:	f24b 5089 	movw	r0, #46473	; 0xb589
 8001d82:	f2c1 40f8 	movt	r0, #5368	; 0x14f8
 8001d86:	fb80 2104 	smull	r2, r1, r0, r4
                        remainder %= divisor;
 8001d8a:	f248 63a0 	movw	r3, #34464	; 0x86a0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001d8e:	17e2      	asrs	r2, r4, #31
 8001d90:	ebc2 3061 	rsb	r0, r2, r1, asr #13
                        remainder %= divisor;
 8001d94:	f2c0 0301 	movt	r3, #1
 8001d98:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f47f af63 	bne.w	8001c68 <PrintDec+0x210>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001da2:	f648 30ad 	movw	r0, #35757	; 0x8bad
 8001da6:	f6c6 00db 	movt	r0, #26843	; 0x68db
 8001daa:	fb80 2104 	smull	r2, r1, r0, r4
 8001dae:	17e2      	asrs	r2, r4, #31
 8001db0:	ebc2 3021 	rsb	r0, r2, r1, asr #12
                        remainder %= divisor;
 8001db4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001db8:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f47f af62 	bne.w	8001c86 <PrintDec+0x22e>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001dc2:	f644 50d3 	movw	r0, #19923	; 0x4dd3
 8001dc6:	f2c1 0062 	movt	r0, #4194	; 0x1062
 8001dca:	fb80 2104 	smull	r2, r1, r0, r4
 8001dce:	17e2      	asrs	r2, r4, #31
 8001dd0:	ebc2 10a1 	rsb	r0, r2, r1, asr #6
                        remainder %= divisor;
 8001dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd8:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	f47f af61 	bne.w	8001ca4 <PrintDec+0x24c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001de2:	f248 501f 	movw	r0, #34079	; 0x851f
 8001de6:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8001dea:	fb80 2104 	smull	r2, r1, r0, r4
 8001dee:	17e2      	asrs	r2, r4, #31
 8001df0:	ebc2 1061 	rsb	r0, r2, r1, asr #5
                        remainder %= divisor;
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	fb03 4410 	mls	r4, r3, r0, r4


                        if (result!=0 || divisor==1) leading_zero = false;
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	f47f af60 	bne.w	8001cc0 <PrintDec+0x268>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001e00:	f246 6067 	movw	r0, #26215	; 0x6667
 8001e04:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8001e08:	fb80 2104 	smull	r2, r1, r0, r4
 8001e0c:	17e2      	asrs	r2, r4, #31
 8001e0e:	ebc2 00a1 	rsb	r0, r2, r1, asr #2
                        remainder %= divisor;
 8001e12:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001e16:	eba4 0443 	sub.w	r4, r4, r3, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	f43f af61 	beq.w	8001ce2 <PrintDec+0x28a>
 8001e20:	e75d      	b.n	8001cde <PrintDec+0x286>
 8001e22:	bf00      	nop

08001e24 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001e28:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001e2a:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8001e2c:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001e2e:	4681      	mov	r9, r0
 8001e30:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8001e32:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80b7 	beq.w	8001fa8 <PrintHex+0x184>
                if (c=='x') break;
 8001e3a:	2b78      	cmp	r3, #120	; 0x78
 8001e3c:	f000 80b4 	beq.w	8001fa8 <PrintHex+0x184>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8001e40:	4fb4      	ldr	r7, [pc, #720]	; (8002114 <PrintHex+0x2f0>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 8001e42:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001e44:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8001e46:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8001e4a:	2a08      	cmp	r2, #8
 8001e4c:	f200 80a8 	bhi.w	8001fa0 <PrintHex+0x17c>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001e50:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001e54:	eb09 0104 	add.w	r1, r9, r4
 8001e58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	a803      	add	r0, sp, #12
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	d808      	bhi.n	8001e78 <PrintHex+0x54>
                                tol[j] = s[i++];
 8001e66:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001e68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 8001e6c:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001e6e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8001e72:	3301      	adds	r3, #1
 8001e74:	2d09      	cmp	r5, #9
 8001e76:	d9f6      	bls.n	8001e66 <PrintHex+0x42>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001e78:	a906      	add	r1, sp, #24
 8001e7a:	18ca      	adds	r2, r1, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8001e7c:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8001e7e:	f802 8c0c 	strb.w	r8, [r2, #-12]
                        i--;
 8001e82:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8001e84:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8001e86:	3401      	adds	r4, #1
 8001e88:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001e8c:	b10b      	cbz	r3, 8001e92 <PrintHex+0x6e>
                if (c=='x') break;
 8001e8e:	2b78      	cmp	r3, #120	; 0x78
 8001e90:	d1d9      	bne.n	8001e46 <PrintHex+0x22>
 8001e92:	9901      	ldr	r1, [sp, #4]
 8001e94:	9b02      	ldr	r3, [sp, #8]
 8001e96:	ba0a      	rev	r2, r1
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001e98:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <PrintHex+0x18a>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8001ea0:	07d8      	lsls	r0, r3, #31
 8001ea2:	f100 810f 	bmi.w	80020c4 <PrintHex+0x2a0>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8001ea6:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001ea8:	f1c3 0208 	rsb	r2, r3, #8
 8001eac:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8001eb0:	105a      	asrs	r2, r3, #1
 8001eb2:	2a03      	cmp	r2, #3
 8001eb4:	f300 80c9 	bgt.w	800204a <PrintHex+0x226>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001eb8:	ac01      	add	r4, sp, #4
 8001eba:	18a5      	adds	r5, r4, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001ebc:	462c      	mov	r4, r5
 8001ebe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ec2:	43ef      	mvns	r7, r5
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001ec4:	0903      	lsrs	r3, r0, #4
 8001ec6:	f007 0901 	and.w	r9, r7, #1
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8001eca:	f10d 0808 	add.w	r8, sp, #8
 8001ece:	4d92      	ldr	r5, [pc, #584]	; (8002118 <PrintHex+0x2f4>)
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001ed0:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001ed4:	f000 8131 	beq.w	800213a <PrintHex+0x316>
                        if (uHex<10) uHex+='0';
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	f240 816e 	bls.w	80021ba <PrintHex+0x396>
                        else         uHex+='A'-10;
 8001ede:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001ee2:	47a8      	blx	r5
 8001ee4:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	f000 8130 	beq.w	800214c <PrintHex+0x328>
                        if (lHex<10) lHex+='0';
 8001eec:	2f09      	cmp	r7, #9
 8001eee:	f240 8152 	bls.w	8002196 <PrintHex+0x372>
                        else         lHex+='A'-10;
 8001ef2:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001ef6:	47a8      	blx	r5
 8001ef8:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001efa:	4544      	cmp	r4, r8
 8001efc:	f000 80a5 	beq.w	800204a <PrintHex+0x226>
 8001f00:	f1b9 0f00 	cmp.w	r9, #0
 8001f04:	d017      	beq.n	8001f36 <PrintHex+0x112>
                        c = s[i];
 8001f06:	f814 0b01 	ldrb.w	r0, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001f0a:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001f0c:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001f10:	d031      	beq.n	8001f76 <PrintHex+0x152>
                        if (uHex<10) uHex+='0';
 8001f12:	2b09      	cmp	r3, #9
 8001f14:	f240 8142 	bls.w	800219c <PrintHex+0x378>
                        else         uHex+='A'-10;
 8001f18:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001f1c:	47a8      	blx	r5
 8001f1e:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001f20:	b3a7      	cbz	r7, 8001f8c <PrintHex+0x168>
                        if (lHex<10) lHex+='0';
 8001f22:	2f09      	cmp	r7, #9
 8001f24:	f240 813d 	bls.w	80021a2 <PrintHex+0x37e>
                        else         lHex+='A'-10;
 8001f28:	f107 0037 	add.w	r0, r7, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001f2c:	47a8      	blx	r5
 8001f2e:	2100      	movs	r1, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001f30:	4544      	cmp	r4, r8
 8001f32:	f000 808a 	beq.w	800204a <PrintHex+0x226>
                        c = s[i];
 8001f36:	f814 3b01 	ldrb.w	r3, [r4], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001f3a:	091a      	lsrs	r2, r3, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001f3c:	f003 070f 	and.w	r7, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001f40:	f000 80d4 	beq.w	80020ec <PrintHex+0x2c8>
                        if (uHex<10) uHex+='0';
 8001f44:	2a09      	cmp	r2, #9
                        else         uHex+='A'-10;
 8001f46:	bf88      	it	hi
 8001f48:	f102 0037 	addhi.w	r0, r2, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001f4c:	f240 812c 	bls.w	80021a8 <PrintHex+0x384>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8001f50:	47a8      	blx	r5
 8001f52:	2100      	movs	r1, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001f54:	2f00      	cmp	r7, #0
 8001f56:	f000 80d2 	beq.w	80020fe <PrintHex+0x2da>
                        if (lHex<10) lHex+='0';
 8001f5a:	2f09      	cmp	r7, #9
                        else         lHex+='A'-10;
 8001f5c:	bf88      	it	hi
 8001f5e:	f107 0037 	addhi.w	r0, r7, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001f62:	f240 8124 	bls.w	80021ae <PrintHex+0x38a>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001f66:	47a8      	blx	r5
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8001f68:	f814 0b01 	ldrb.w	r0, [r4], #1
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8001f6c:	2100      	movs	r1, #0
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001f6e:	0903      	lsrs	r3, r0, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001f70:	f000 070f 	and.w	r7, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001f74:	d1cd      	bne.n	8001f12 <PrintHex+0xee>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001f76:	2900      	cmp	r1, #0
 8001f78:	f000 8110 	beq.w	800219c <PrintHex+0x378>
                                if (flag0) print_byte_out('0');
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	f040 80cd 	bne.w	800211c <PrintHex+0x2f8>
                                else       print_byte_out(' ');
 8001f82:	2020      	movs	r0, #32
 8001f84:	47a8      	blx	r5
 8001f86:	2201      	movs	r2, #1
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001f88:	2f00      	cmp	r7, #0
 8001f8a:	d1ca      	bne.n	8001f22 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	f000 8108 	beq.w	80021a2 <PrintHex+0x37e>
                                if (flag0) print_byte_out('0');
 8001f92:	2e00      	cmp	r6, #0
 8001f94:	f040 80ba 	bne.w	800210c <PrintHex+0x2e8>
                                else       print_byte_out(' ');
 8001f98:	2020      	movs	r0, #32
 8001f9a:	47a8      	blx	r5
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	e7c7      	b.n	8001f30 <PrintHex+0x10c>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8001fa0:	2b30      	cmp	r3, #48	; 0x30
 8001fa2:	bf08      	it	eq
 8001fa4:	2601      	moveq	r6, #1
 8001fa6:	e76e      	b.n	8001e86 <PrintHex+0x62>
 8001fa8:	9c01      	ldr	r4, [sp, #4]
 8001faa:	ba25      	rev	r5, r4
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8001fac:	9501      	str	r5, [sp, #4]
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001fae:	f89d 3004 	ldrb.w	r3, [sp, #4]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001fb2:	091a      	lsrs	r2, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001fb4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001fb8:	d04a      	beq.n	8002050 <PrintHex+0x22c>
                        if (uHex<10) uHex+='0';
 8001fba:	2a09      	cmp	r2, #9
 8001fbc:	f240 80fa 	bls.w	80021b4 <PrintHex+0x390>
                        else         uHex+='A'-10;
 8001fc0:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001fc4:	4d54      	ldr	r5, [pc, #336]	; (8002118 <PrintHex+0x2f4>)
 8001fc6:	47a8      	blx	r5
 8001fc8:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001fca:	2c00      	cmp	r4, #0
 8001fcc:	d144      	bne.n	8002058 <PrintHex+0x234>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	f000 80fb 	beq.w	80021cc <PrintHex+0x3a8>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001fd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001fda:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001fdc:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001fe0:	d047      	beq.n	8002072 <PrintHex+0x24e>
                        if (uHex<10) uHex+='0';
 8001fe2:	2909      	cmp	r1, #9
 8001fe4:	f240 80ec 	bls.w	80021c0 <PrintHex+0x39c>
                        else         uHex+='A'-10;
 8001fe8:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8001fec:	47a8      	blx	r5
 8001fee:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d144      	bne.n	800207e <PrintHex+0x25a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80e5 	beq.w	80021c6 <PrintHex+0x3a2>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001ffc:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002000:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8002002:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002006:	d047      	beq.n	8002098 <PrintHex+0x274>
                        if (uHex<10) uHex+='0';
 8002008:	2b09      	cmp	r3, #9
 800200a:	f240 80be 	bls.w	800218a <PrintHex+0x366>
                        else         uHex+='A'-10;
 800200e:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte_out(uHex);
 8002012:	47a8      	blx	r5
 8002014:	2100      	movs	r1, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8002016:	2c00      	cmp	r4, #0
 8002018:	d143      	bne.n	80020a2 <PrintHex+0x27e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800201a:	2201      	movs	r2, #1
 800201c:	2900      	cmp	r1, #0
 800201e:	f000 80b7 	beq.w	8002190 <PrintHex+0x36c>
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8002022:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002026:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8002028:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800202c:	d045      	beq.n	80020ba <PrintHex+0x296>
                        if (uHex<10) uHex+='0';
 800202e:	2909      	cmp	r1, #9
                        else         uHex+='A'-10;
 8002030:	bf88      	it	hi
 8002032:	f101 0037 	addhi.w	r0, r1, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8002036:	d942      	bls.n	80020be <PrintHex+0x29a>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8002038:	47a8      	blx	r5
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800203a:	2c00      	cmp	r4, #0
 800203c:	d07a      	beq.n	8002134 <PrintHex+0x310>
                        if (lHex<10) lHex+='0';
 800203e:	2c09      	cmp	r4, #9
                        else         lHex+='A'-10;
 8002040:	bf88      	it	hi
 8002042:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8002046:	d975      	bls.n	8002134 <PrintHex+0x310>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8002048:	47a8      	blx	r5
                }
        }
        return;
}
 800204a:	b007      	add	sp, #28
 800204c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002050:	2101      	movs	r1, #1
 8002052:	4d31      	ldr	r5, [pc, #196]	; (8002118 <PrintHex+0x2f4>)
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8002054:	2c00      	cmp	r4, #0
 8002056:	d0ba      	beq.n	8001fce <PrintHex+0x1aa>
                        if (lHex<10) lHex+='0';
 8002058:	2c09      	cmp	r4, #9
 800205a:	f240 80b7 	bls.w	80021cc <PrintHex+0x3a8>
                        else         lHex+='A'-10;
 800205e:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8002062:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8002064:	f89d 3005 	ldrb.w	r3, [sp, #5]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8002068:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800206a:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800206c:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002070:	d1b7      	bne.n	8001fe2 <PrintHex+0x1be>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8002072:	2a00      	cmp	r2, #0
 8002074:	f000 80a4 	beq.w	80021c0 <PrintHex+0x39c>
 8002078:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800207a:	2c00      	cmp	r4, #0
 800207c:	d0ba      	beq.n	8001ff4 <PrintHex+0x1d0>
                        if (lHex<10) lHex+='0';
 800207e:	2c09      	cmp	r4, #9
 8002080:	f240 80a1 	bls.w	80021c6 <PrintHex+0x3a2>
                        else         lHex+='A'-10;
 8002084:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 8002088:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800208a:	f89d 1006 	ldrb.w	r1, [sp, #6]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800208e:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002090:	090b      	lsrs	r3, r1, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8002092:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8002096:	d1b7      	bne.n	8002008 <PrintHex+0x1e4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8002098:	2a00      	cmp	r2, #0
 800209a:	d076      	beq.n	800218a <PrintHex+0x366>
 800209c:	2101      	movs	r1, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800209e:	2c00      	cmp	r4, #0
 80020a0:	d0bb      	beq.n	800201a <PrintHex+0x1f6>
                        if (lHex<10) lHex+='0';
 80020a2:	2c09      	cmp	r4, #9
 80020a4:	d974      	bls.n	8002190 <PrintHex+0x36c>
                        else         lHex+='A'-10;
 80020a6:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte_out(lHex);
 80020aa:	47a8      	blx	r5
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80020ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80020b0:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80020b2:	0919      	lsrs	r1, r3, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80020b4:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80020b8:	d1b9      	bne.n	800202e <PrintHex+0x20a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d1bd      	bne.n	800203a <PrintHex+0x216>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80020be:	f101 0030 	add.w	r0, r1, #48	; 0x30
 80020c2:	e7b9      	b.n	8002038 <PrintHex+0x214>
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 80020c4:	43d8      	mvns	r0, r3
 80020c6:	3008      	adds	r0, #8
 80020c8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80020cc:	aa06      	add	r2, sp, #24
 80020ce:	eb02 0163 	add.w	r1, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 80020d2:	f811 0c14 	ldrb.w	r0, [r1, #-20]
                        if (lHex!=0) leading_zero=false;
 80020d6:	f010 030f 	ands.w	r3, r0, #15
 80020da:	d045      	beq.n	8002168 <PrintHex+0x344>
                        if (lHex<10) lHex+='0';
 80020dc:	2b09      	cmp	r3, #9
 80020de:	d951      	bls.n	8002184 <PrintHex+0x360>
                        else         lHex+='A'-10;
 80020e0:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <PrintHex+0x2f4>)
 80020e6:	4798      	blx	r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	e042      	b.n	8002172 <PrintHex+0x34e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80020ec:	2900      	cmp	r1, #0
 80020ee:	d05b      	beq.n	80021a8 <PrintHex+0x384>
                                if (flag0) print_byte_out('0');
 80020f0:	b1e6      	cbz	r6, 800212c <PrintHex+0x308>
 80020f2:	2030      	movs	r0, #48	; 0x30
 80020f4:	47a8      	blx	r5
 80020f6:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80020f8:	2f00      	cmp	r7, #0
 80020fa:	f47f af2e 	bne.w	8001f5a <PrintHex+0x136>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80020fe:	2900      	cmp	r1, #0
 8002100:	d055      	beq.n	80021ae <PrintHex+0x38a>
                                if (flag0) print_byte_out('0');
 8002102:	b17e      	cbz	r6, 8002124 <PrintHex+0x300>
 8002104:	2030      	movs	r0, #48	; 0x30
 8002106:	47a8      	blx	r5
 8002108:	2101      	movs	r1, #1
 800210a:	e6fc      	b.n	8001f06 <PrintHex+0xe2>
 800210c:	2030      	movs	r0, #48	; 0x30
 800210e:	47a8      	blx	r5
 8002110:	2101      	movs	r1, #1
 8002112:	e70d      	b.n	8001f30 <PrintHex+0x10c>
 8002114:	08001a15 	.word	0x08001a15
 8002118:	080019bd 	.word	0x080019bd
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 800211c:	2030      	movs	r0, #48	; 0x30
 800211e:	47a8      	blx	r5
 8002120:	2201      	movs	r2, #1
 8002122:	e6fd      	b.n	8001f20 <PrintHex+0xfc>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8002124:	2020      	movs	r0, #32
 8002126:	47a8      	blx	r5
 8002128:	2101      	movs	r1, #1
 800212a:	e6ec      	b.n	8001f06 <PrintHex+0xe2>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800212c:	2020      	movs	r0, #32
 800212e:	47a8      	blx	r5
 8002130:	2101      	movs	r1, #1
 8002132:	e70f      	b.n	8001f54 <PrintHex+0x130>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8002134:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002138:	e786      	b.n	8002048 <PrintHex+0x224>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800213a:	2900      	cmp	r1, #0
 800213c:	d03d      	beq.n	80021ba <PrintHex+0x396>
                                if (flag0) print_byte_out('0');
 800213e:	b17e      	cbz	r6, 8002160 <PrintHex+0x33c>
 8002140:	2030      	movs	r0, #48	; 0x30
 8002142:	47a8      	blx	r5
 8002144:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8002146:	2f00      	cmp	r7, #0
 8002148:	f47f aed0 	bne.w	8001eec <PrintHex+0xc8>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800214c:	b319      	cbz	r1, 8002196 <PrintHex+0x372>
                                if (flag0) print_byte_out('0');
 800214e:	b11e      	cbz	r6, 8002158 <PrintHex+0x334>
 8002150:	2030      	movs	r0, #48	; 0x30
 8002152:	47a8      	blx	r5
 8002154:	2101      	movs	r1, #1
 8002156:	e6d0      	b.n	8001efa <PrintHex+0xd6>
                                else       print_byte_out(' ');
 8002158:	2020      	movs	r0, #32
 800215a:	47a8      	blx	r5
 800215c:	2101      	movs	r1, #1
 800215e:	e6cc      	b.n	8001efa <PrintHex+0xd6>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8002160:	2020      	movs	r0, #32
 8002162:	47a8      	blx	r5
 8002164:	2101      	movs	r1, #1
 8002166:	e6be      	b.n	8001ee6 <PrintHex+0xc2>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8002168:	b13e      	cbz	r6, 800217a <PrintHex+0x356>
 800216a:	491a      	ldr	r1, [pc, #104]	; (80021d4 <PrintHex+0x3b0>)
 800216c:	2030      	movs	r0, #48	; 0x30
 800216e:	4788      	blx	r1
 8002170:	2101      	movs	r1, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8002172:	9802      	ldr	r0, [sp, #8]
 8002174:	1e43      	subs	r3, r0, #1
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	e696      	b.n	8001ea8 <PrintHex+0x84>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800217a:	2020      	movs	r0, #32
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <PrintHex+0x3b0>)
 800217e:	4790      	blx	r2
 8002180:	2101      	movs	r1, #1
 8002182:	e7f6      	b.n	8002172 <PrintHex+0x34e>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8002184:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002188:	e7ac      	b.n	80020e4 <PrintHex+0x2c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800218a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800218e:	e740      	b.n	8002012 <PrintHex+0x1ee>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8002190:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002194:	e789      	b.n	80020aa <PrintHex+0x286>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8002196:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800219a:	e6ac      	b.n	8001ef6 <PrintHex+0xd2>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800219c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80021a0:	e6bc      	b.n	8001f1c <PrintHex+0xf8>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80021a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80021a6:	e6c1      	b.n	8001f2c <PrintHex+0x108>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80021a8:	f102 0030 	add.w	r0, r2, #48	; 0x30
 80021ac:	e6d0      	b.n	8001f50 <PrintHex+0x12c>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80021ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80021b2:	e6d8      	b.n	8001f66 <PrintHex+0x142>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80021b4:	f102 0030 	add.w	r0, r2, #48	; 0x30
 80021b8:	e704      	b.n	8001fc4 <PrintHex+0x1a0>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80021ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80021be:	e690      	b.n	8001ee2 <PrintHex+0xbe>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80021c0:	f101 0030 	add.w	r0, r1, #48	; 0x30
 80021c4:	e712      	b.n	8001fec <PrintHex+0x1c8>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80021c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80021ca:	e75d      	b.n	8002088 <PrintHex+0x264>
 80021cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80021d0:	e747      	b.n	8002062 <PrintHex+0x23e>
 80021d2:	bf00      	nop
 80021d4:	080019bd 	.word	0x080019bd

080021d8 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 80021d8:	b40f      	push	{r0, r1, r2, r3}
 80021da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021de:	b085      	sub	sp, #20
	int		i;
	va_list args;
	char	*s=fmt;
 80021e0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80021e4:	4bac      	ldr	r3, [pc, #688]	; (8002498 <Lb_printf+0x2c0>)
 80021e6:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 80021e8:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80021ec:	4dab      	ldr	r5, [pc, #684]	; (800249c <Lb_printf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80021ee:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80024a8 <Lb_printf+0x2d0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80021f2:	4fab      	ldr	r7, [pc, #684]	; (80024a0 <Lb_printf+0x2c8>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80021f4:	4eab      	ldr	r6, [pc, #684]	; (80024a4 <Lb_printf+0x2cc>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80021f6:	701a      	strb	r2, [r3, #0]
	
	while (*s)
 80021f8:	7820      	ldrb	r0, [r4, #0]
 80021fa:	2800      	cmp	r0, #0
 80021fc:	f000 80be 	beq.w	800237c <Lb_printf+0x1a4>
	{
		if (*s=='%')
 8002200:	2825      	cmp	r0, #37	; 0x25
 8002202:	f040 80c0 	bne.w	8002386 <Lb_printf+0x1ae>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002206:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8002208:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800220a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800220e:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8002210:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002214:	f240 80d6 	bls.w	80023c4 <Lb_printf+0x1ec>
 8002218:	2a78      	cmp	r2, #120	; 0x78
 800221a:	f000 80dd 	beq.w	80023d8 <Lb_printf+0x200>
 800221e:	2a73      	cmp	r2, #115	; 0x73
 8002220:	f000 80dd 	beq.w	80023de <Lb_printf+0x206>
 8002224:	2a25      	cmp	r2, #37	; 0x25
 8002226:	f000 80dd 	beq.w	80023e4 <Lb_printf+0x20c>
 800222a:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800222c:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002230:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002234:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002236:	2a01      	cmp	r2, #1
 8002238:	f240 80d6 	bls.w	80023e8 <Lb_printf+0x210>
 800223c:	2978      	cmp	r1, #120	; 0x78
 800223e:	f000 80d6 	beq.w	80023ee <Lb_printf+0x216>
 8002242:	2973      	cmp	r1, #115	; 0x73
 8002244:	f000 80d6 	beq.w	80023f4 <Lb_printf+0x21c>
 8002248:	2925      	cmp	r1, #37	; 0x25
 800224a:	f000 80d6 	beq.w	80023fa <Lb_printf+0x222>
 800224e:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002250:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002254:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002258:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800225a:	2901      	cmp	r1, #1
 800225c:	f240 80cf 	bls.w	80023fe <Lb_printf+0x226>
 8002260:	2a78      	cmp	r2, #120	; 0x78
 8002262:	f000 80cf 	beq.w	8002404 <Lb_printf+0x22c>
 8002266:	2a73      	cmp	r2, #115	; 0x73
 8002268:	f000 80cf 	beq.w	800240a <Lb_printf+0x232>
 800226c:	2a25      	cmp	r2, #37	; 0x25
 800226e:	f000 80cf 	beq.w	8002410 <Lb_printf+0x238>
 8002272:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002274:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002278:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800227c:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800227e:	2a01      	cmp	r2, #1
 8002280:	f240 80c8 	bls.w	8002414 <Lb_printf+0x23c>
 8002284:	2978      	cmp	r1, #120	; 0x78
 8002286:	f000 80c8 	beq.w	800241a <Lb_printf+0x242>
 800228a:	2973      	cmp	r1, #115	; 0x73
 800228c:	f000 80c8 	beq.w	8002420 <Lb_printf+0x248>
 8002290:	2925      	cmp	r1, #37	; 0x25
 8002292:	f000 80c8 	beq.w	8002426 <Lb_printf+0x24e>
 8002296:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002298:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800229c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022a0:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022a2:	2901      	cmp	r1, #1
 80022a4:	f240 80c1 	bls.w	800242a <Lb_printf+0x252>
 80022a8:	2a78      	cmp	r2, #120	; 0x78
 80022aa:	f000 80c1 	beq.w	8002430 <Lb_printf+0x258>
 80022ae:	2a73      	cmp	r2, #115	; 0x73
 80022b0:	f000 80c1 	beq.w	8002436 <Lb_printf+0x25e>
 80022b4:	2a25      	cmp	r2, #37	; 0x25
 80022b6:	f000 80c1 	beq.w	800243c <Lb_printf+0x264>
 80022ba:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022bc:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022c0:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022c4:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022c6:	2a01      	cmp	r2, #1
 80022c8:	f240 80ba 	bls.w	8002440 <Lb_printf+0x268>
 80022cc:	2978      	cmp	r1, #120	; 0x78
 80022ce:	f000 80ba 	beq.w	8002446 <Lb_printf+0x26e>
 80022d2:	2973      	cmp	r1, #115	; 0x73
 80022d4:	f000 80ba 	beq.w	800244c <Lb_printf+0x274>
 80022d8:	2925      	cmp	r1, #37	; 0x25
 80022da:	f000 80ba 	beq.w	8002452 <Lb_printf+0x27a>
 80022de:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022e0:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022e4:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80022e8:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80022ea:	2901      	cmp	r1, #1
 80022ec:	f240 80b3 	bls.w	8002456 <Lb_printf+0x27e>
 80022f0:	2a78      	cmp	r2, #120	; 0x78
 80022f2:	f000 80b3 	beq.w	800245c <Lb_printf+0x284>
 80022f6:	2a73      	cmp	r2, #115	; 0x73
 80022f8:	f000 80b3 	beq.w	8002462 <Lb_printf+0x28a>
 80022fc:	2a25      	cmp	r2, #37	; 0x25
 80022fe:	f000 80b3 	beq.w	8002468 <Lb_printf+0x290>
 8002302:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002304:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002308:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 800230c:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800230e:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002312:	f240 80ab 	bls.w	800246c <Lb_printf+0x294>
 8002316:	2978      	cmp	r1, #120	; 0x78
 8002318:	f000 80ab 	beq.w	8002472 <Lb_printf+0x29a>
 800231c:	2973      	cmp	r1, #115	; 0x73
 800231e:	f000 80ab 	beq.w	8002478 <Lb_printf+0x2a0>
 8002322:	2925      	cmp	r1, #37	; 0x25
 8002324:	f000 80ab 	beq.w	800247e <Lb_printf+0x2a6>
 8002328:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800232a:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800232e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8002332:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002334:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002338:	f240 80a3 	bls.w	8002482 <Lb_printf+0x2aa>
 800233c:	2a78      	cmp	r2, #120	; 0x78
 800233e:	f000 80a3 	beq.w	8002488 <Lb_printf+0x2b0>
 8002342:	2a73      	cmp	r2, #115	; 0x73
 8002344:	f000 80a3 	beq.w	800248e <Lb_printf+0x2b6>
 8002348:	2a25      	cmp	r2, #37	; 0x25
 800234a:	f000 80a3 	beq.w	8002494 <Lb_printf+0x2bc>
 800234e:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002350:	f88d 200d 	strb.w	r2, [sp, #13]
 8002354:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8002358:	1c5c      	adds	r4, r3, #1
 800235a:	2864      	cmp	r0, #100	; 0x64
 800235c:	d02b      	beq.n	80023b6 <Lb_printf+0x1de>
 800235e:	d815      	bhi.n	800238c <Lb_printf+0x1b4>
 8002360:	2825      	cmp	r0, #37	; 0x25
 8002362:	d01f      	beq.n	80023a4 <Lb_printf+0x1cc>
 8002364:	2863      	cmp	r0, #99	; 0x63
 8002366:	f47f af47 	bne.w	80021f8 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800236a:	f899 0000 	ldrb.w	r0, [r9]
 800236e:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8002370:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8002372:	f109 0904 	add.w	r9, r9, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8002376:	2800      	cmp	r0, #0
 8002378:	f47f af42 	bne.w	8002200 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 800237c:	b005      	add	sp, #20
 800237e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002382:	b004      	add	sp, #16
 8002384:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002386:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8002388:	3401      	adds	r4, #1
 800238a:	e735      	b.n	80021f8 <Lb_printf+0x20>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800238c:	2873      	cmp	r0, #115	; 0x73
 800238e:	d00b      	beq.n	80023a8 <Lb_printf+0x1d0>
 8002390:	2878      	cmp	r0, #120	; 0x78
 8002392:	f47f af31 	bne.w	80021f8 <Lb_printf+0x20>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8002396:	f8d9 1000 	ldr.w	r1, [r9]
 800239a:	a801      	add	r0, sp, #4
 800239c:	f109 0904 	add.w	r9, r9, #4
 80023a0:	47b0      	blx	r6
					break;
 80023a2:	e729      	b.n	80021f8 <Lb_printf+0x20>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80023a4:	47a8      	blx	r5
 80023a6:	e727      	b.n	80021f8 <Lb_printf+0x20>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80023a8:	f8d9 1000 	ldr.w	r1, [r9]
 80023ac:	a801      	add	r0, sp, #4
 80023ae:	f109 0904 	add.w	r9, r9, #4
 80023b2:	47b8      	blx	r7
 					break;
 80023b4:	e720      	b.n	80021f8 <Lb_printf+0x20>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80023b6:	f8d9 1000 	ldr.w	r1, [r9]
 80023ba:	a801      	add	r0, sp, #4
 80023bc:	f109 0904 	add.w	r9, r9, #4
 80023c0:	47c0      	blx	r8
					break;
 80023c2:	e719      	b.n	80021f8 <Lb_printf+0x20>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023c4:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80023c6:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80023c8:	aa04      	add	r2, sp, #16
 80023ca:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 80023cc:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80023ce:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 80023d2:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 80023d6:	e7bf      	b.n	8002358 <Lb_printf+0x180>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80023d8:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023da:	2078      	movs	r0, #120	; 0x78
 80023dc:	e7f4      	b.n	80023c8 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80023de:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023e0:	2073      	movs	r0, #115	; 0x73
 80023e2:	e7f1      	b.n	80023c8 <Lb_printf+0x1f0>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80023e4:	2401      	movs	r4, #1
 80023e6:	e7ef      	b.n	80023c8 <Lb_printf+0x1f0>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023e8:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80023ea:	2402      	movs	r4, #2
 80023ec:	e7ec      	b.n	80023c8 <Lb_printf+0x1f0>
 80023ee:	2402      	movs	r4, #2
 80023f0:	2078      	movs	r0, #120	; 0x78
 80023f2:	e7e9      	b.n	80023c8 <Lb_printf+0x1f0>
 80023f4:	2402      	movs	r4, #2
 80023f6:	2073      	movs	r0, #115	; 0x73
 80023f8:	e7e6      	b.n	80023c8 <Lb_printf+0x1f0>
 80023fa:	2402      	movs	r4, #2
 80023fc:	e7e4      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80023fe:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002400:	2403      	movs	r4, #3
 8002402:	e7e1      	b.n	80023c8 <Lb_printf+0x1f0>
 8002404:	2403      	movs	r4, #3
 8002406:	2078      	movs	r0, #120	; 0x78
 8002408:	e7de      	b.n	80023c8 <Lb_printf+0x1f0>
 800240a:	2403      	movs	r4, #3
 800240c:	2073      	movs	r0, #115	; 0x73
 800240e:	e7db      	b.n	80023c8 <Lb_printf+0x1f0>
 8002410:	2403      	movs	r4, #3
 8002412:	e7d9      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002414:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002416:	2404      	movs	r4, #4
 8002418:	e7d6      	b.n	80023c8 <Lb_printf+0x1f0>
 800241a:	2404      	movs	r4, #4
 800241c:	2078      	movs	r0, #120	; 0x78
 800241e:	e7d3      	b.n	80023c8 <Lb_printf+0x1f0>
 8002420:	2404      	movs	r4, #4
 8002422:	2073      	movs	r0, #115	; 0x73
 8002424:	e7d0      	b.n	80023c8 <Lb_printf+0x1f0>
 8002426:	2404      	movs	r4, #4
 8002428:	e7ce      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800242a:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800242c:	2405      	movs	r4, #5
 800242e:	e7cb      	b.n	80023c8 <Lb_printf+0x1f0>
 8002430:	2405      	movs	r4, #5
 8002432:	2078      	movs	r0, #120	; 0x78
 8002434:	e7c8      	b.n	80023c8 <Lb_printf+0x1f0>
 8002436:	2405      	movs	r4, #5
 8002438:	2073      	movs	r0, #115	; 0x73
 800243a:	e7c5      	b.n	80023c8 <Lb_printf+0x1f0>
 800243c:	2405      	movs	r4, #5
 800243e:	e7c3      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002440:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002442:	2406      	movs	r4, #6
 8002444:	e7c0      	b.n	80023c8 <Lb_printf+0x1f0>
 8002446:	2406      	movs	r4, #6
 8002448:	2078      	movs	r0, #120	; 0x78
 800244a:	e7bd      	b.n	80023c8 <Lb_printf+0x1f0>
 800244c:	2406      	movs	r4, #6
 800244e:	2073      	movs	r0, #115	; 0x73
 8002450:	e7ba      	b.n	80023c8 <Lb_printf+0x1f0>
 8002452:	2406      	movs	r4, #6
 8002454:	e7b8      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002456:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002458:	2407      	movs	r4, #7
 800245a:	e7b5      	b.n	80023c8 <Lb_printf+0x1f0>
 800245c:	2407      	movs	r4, #7
 800245e:	2078      	movs	r0, #120	; 0x78
 8002460:	e7b2      	b.n	80023c8 <Lb_printf+0x1f0>
 8002462:	2407      	movs	r4, #7
 8002464:	2073      	movs	r0, #115	; 0x73
 8002466:	e7af      	b.n	80023c8 <Lb_printf+0x1f0>
 8002468:	2407      	movs	r4, #7
 800246a:	e7ad      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800246c:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800246e:	2408      	movs	r4, #8
 8002470:	e7aa      	b.n	80023c8 <Lb_printf+0x1f0>
 8002472:	2408      	movs	r4, #8
 8002474:	2078      	movs	r0, #120	; 0x78
 8002476:	e7a7      	b.n	80023c8 <Lb_printf+0x1f0>
 8002478:	2408      	movs	r4, #8
 800247a:	2073      	movs	r0, #115	; 0x73
 800247c:	e7a4      	b.n	80023c8 <Lb_printf+0x1f0>
 800247e:	2408      	movs	r4, #8
 8002480:	e7a2      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002482:	4610      	mov	r0, r2
 8002484:	2409      	movs	r4, #9
 8002486:	e79f      	b.n	80023c8 <Lb_printf+0x1f0>
 8002488:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800248a:	2078      	movs	r0, #120	; 0x78
 800248c:	e79c      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800248e:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002490:	2073      	movs	r0, #115	; 0x73
 8002492:	e799      	b.n	80023c8 <Lb_printf+0x1f0>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002494:	2409      	movs	r4, #9
 8002496:	e797      	b.n	80023c8 <Lb_printf+0x1f0>
 8002498:	20000a0c 	.word	0x20000a0c
 800249c:	080019bd 	.word	0x080019bd
 80024a0:	080019f5 	.word	0x080019f5
 80024a4:	08001e25 	.word	0x08001e25
 80024a8:	08001a59 	.word	0x08001a59

080024ac <Lb_sprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 80024ac:	b40e      	push	{r1, r2, r3}
 80024ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 80024b2:	49b1      	ldr	r1, [pc, #708]	; (8002778 <Lb_sprintf+0x2cc>)
	StrPrintBufIndex = 0;
 80024b4:	4db1      	ldr	r5, [pc, #708]	; (800277c <Lb_sprintf+0x2d0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 80024b6:	b084      	sub	sp, #16
	int		i;
	char	*s=fmt;
 80024b8:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80024bc:	4bb0      	ldr	r3, [pc, #704]	; (8002780 <Lb_sprintf+0x2d4>)
	pStrPrintBuf = pStr;
 80024be:	6008      	str	r0, [r1, #0]
	StrPrintBufIndex = 0;
 80024c0:	2000      	movs	r0, #0
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80024c2:	2201      	movs	r2, #1
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80024c4:	6028      	str	r0, [r5, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 80024c6:	f859 4b04 	ldr.w	r4, [r9], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80024ca:	4dae      	ldr	r5, [pc, #696]	; (8002784 <Lb_sprintf+0x2d8>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80024cc:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8002790 <Lb_sprintf+0x2e4>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80024d0:	4fad      	ldr	r7, [pc, #692]	; (8002788 <Lb_sprintf+0x2dc>)
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80024d2:	4eae      	ldr	r6, [pc, #696]	; (800278c <Lb_sprintf+0x2e0>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80024d4:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 80024d6:	7820      	ldrb	r0, [r4, #0]
 80024d8:	2800      	cmp	r0, #0
 80024da:	f000 80be 	beq.w	800265a <Lb_sprintf+0x1ae>
	{
		if (*s=='%')
 80024de:	2825      	cmp	r0, #37	; 0x25
 80024e0:	f040 80c0 	bne.w	8002664 <Lb_sprintf+0x1b8>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80024e4:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80024e6:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80024e8:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80024ec:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80024ee:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80024f2:	f240 80d6 	bls.w	80026a2 <Lb_sprintf+0x1f6>
 80024f6:	2a78      	cmp	r2, #120	; 0x78
 80024f8:	f000 80dd 	beq.w	80026b6 <Lb_sprintf+0x20a>
 80024fc:	2a73      	cmp	r2, #115	; 0x73
 80024fe:	f000 80dd 	beq.w	80026bc <Lb_sprintf+0x210>
 8002502:	2a25      	cmp	r2, #37	; 0x25
 8002504:	f000 80dd 	beq.w	80026c2 <Lb_sprintf+0x216>
 8002508:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800250a:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800250e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002512:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002514:	2a01      	cmp	r2, #1
 8002516:	f240 80d6 	bls.w	80026c6 <Lb_sprintf+0x21a>
 800251a:	2978      	cmp	r1, #120	; 0x78
 800251c:	f000 80d6 	beq.w	80026cc <Lb_sprintf+0x220>
 8002520:	2973      	cmp	r1, #115	; 0x73
 8002522:	f000 80d6 	beq.w	80026d2 <Lb_sprintf+0x226>
 8002526:	2925      	cmp	r1, #37	; 0x25
 8002528:	f000 80d6 	beq.w	80026d8 <Lb_sprintf+0x22c>
 800252c:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800252e:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002532:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002536:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002538:	2901      	cmp	r1, #1
 800253a:	f240 80cf 	bls.w	80026dc <Lb_sprintf+0x230>
 800253e:	2a78      	cmp	r2, #120	; 0x78
 8002540:	f000 80cf 	beq.w	80026e2 <Lb_sprintf+0x236>
 8002544:	2a73      	cmp	r2, #115	; 0x73
 8002546:	f000 80cf 	beq.w	80026e8 <Lb_sprintf+0x23c>
 800254a:	2a25      	cmp	r2, #37	; 0x25
 800254c:	f000 80cf 	beq.w	80026ee <Lb_sprintf+0x242>
 8002550:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002552:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002556:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800255a:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800255c:	2a01      	cmp	r2, #1
 800255e:	f240 80c8 	bls.w	80026f2 <Lb_sprintf+0x246>
 8002562:	2978      	cmp	r1, #120	; 0x78
 8002564:	f000 80c8 	beq.w	80026f8 <Lb_sprintf+0x24c>
 8002568:	2973      	cmp	r1, #115	; 0x73
 800256a:	f000 80c8 	beq.w	80026fe <Lb_sprintf+0x252>
 800256e:	2925      	cmp	r1, #37	; 0x25
 8002570:	f000 80c8 	beq.w	8002704 <Lb_sprintf+0x258>
 8002574:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002576:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800257a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800257e:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002580:	2901      	cmp	r1, #1
 8002582:	f240 80c1 	bls.w	8002708 <Lb_sprintf+0x25c>
 8002586:	2a78      	cmp	r2, #120	; 0x78
 8002588:	f000 80c1 	beq.w	800270e <Lb_sprintf+0x262>
 800258c:	2a73      	cmp	r2, #115	; 0x73
 800258e:	f000 80c1 	beq.w	8002714 <Lb_sprintf+0x268>
 8002592:	2a25      	cmp	r2, #37	; 0x25
 8002594:	f000 80c1 	beq.w	800271a <Lb_sprintf+0x26e>
 8002598:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800259a:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800259e:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025a2:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025a4:	2a01      	cmp	r2, #1
 80025a6:	f240 80ba 	bls.w	800271e <Lb_sprintf+0x272>
 80025aa:	2978      	cmp	r1, #120	; 0x78
 80025ac:	f000 80ba 	beq.w	8002724 <Lb_sprintf+0x278>
 80025b0:	2973      	cmp	r1, #115	; 0x73
 80025b2:	f000 80ba 	beq.w	800272a <Lb_sprintf+0x27e>
 80025b6:	2925      	cmp	r1, #37	; 0x25
 80025b8:	f000 80ba 	beq.w	8002730 <Lb_sprintf+0x284>
 80025bc:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025be:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025c2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025c6:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025c8:	2901      	cmp	r1, #1
 80025ca:	f240 80b3 	bls.w	8002734 <Lb_sprintf+0x288>
 80025ce:	2a78      	cmp	r2, #120	; 0x78
 80025d0:	f000 80b3 	beq.w	800273a <Lb_sprintf+0x28e>
 80025d4:	2a73      	cmp	r2, #115	; 0x73
 80025d6:	f000 80b3 	beq.w	8002740 <Lb_sprintf+0x294>
 80025da:	2a25      	cmp	r2, #37	; 0x25
 80025dc:	f000 80b3 	beq.w	8002746 <Lb_sprintf+0x29a>
 80025e0:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025e2:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025e6:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 80025ea:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80025ec:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80025f0:	f240 80ab 	bls.w	800274a <Lb_sprintf+0x29e>
 80025f4:	2978      	cmp	r1, #120	; 0x78
 80025f6:	f000 80ab 	beq.w	8002750 <Lb_sprintf+0x2a4>
 80025fa:	2973      	cmp	r1, #115	; 0x73
 80025fc:	f000 80ab 	beq.w	8002756 <Lb_sprintf+0x2aa>
 8002600:	2925      	cmp	r1, #37	; 0x25
 8002602:	f000 80ab 	beq.w	800275c <Lb_sprintf+0x2b0>
 8002606:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002608:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800260c:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8002610:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002612:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002616:	f240 80a3 	bls.w	8002760 <Lb_sprintf+0x2b4>
 800261a:	2a78      	cmp	r2, #120	; 0x78
 800261c:	f000 80a3 	beq.w	8002766 <Lb_sprintf+0x2ba>
 8002620:	2a73      	cmp	r2, #115	; 0x73
 8002622:	f000 80a3 	beq.w	800276c <Lb_sprintf+0x2c0>
 8002626:	2a25      	cmp	r2, #37	; 0x25
 8002628:	f000 80a3 	beq.w	8002772 <Lb_sprintf+0x2c6>
 800262c:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800262e:	f88d 200d 	strb.w	r2, [sp, #13]
 8002632:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8002636:	1c5c      	adds	r4, r3, #1
 8002638:	2864      	cmp	r0, #100	; 0x64
 800263a:	d02b      	beq.n	8002694 <Lb_sprintf+0x1e8>
 800263c:	d815      	bhi.n	800266a <Lb_sprintf+0x1be>
 800263e:	2825      	cmp	r0, #37	; 0x25
 8002640:	d01f      	beq.n	8002682 <Lb_sprintf+0x1d6>
 8002642:	2863      	cmp	r0, #99	; 0x63
 8002644:	f47f af47 	bne.w	80024d6 <Lb_sprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002648:	f899 0000 	ldrb.w	r0, [r9]
 800264c:	47a8      	blx	r5
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800264e:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8002650:	f109 0904 	add.w	r9, r9, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 8002654:	2800      	cmp	r0, #0
 8002656:	f47f af42 	bne.w	80024de <Lb_sprintf+0x32>
	}
	
	va_end(args);
	
	return;
}
 800265a:	b004      	add	sp, #16
 800265c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002660:	b003      	add	sp, #12
 8002662:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002664:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8002666:	3401      	adds	r4, #1
 8002668:	e735      	b.n	80024d6 <Lb_sprintf+0x2a>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800266a:	2873      	cmp	r0, #115	; 0x73
 800266c:	d00b      	beq.n	8002686 <Lb_sprintf+0x1da>
 800266e:	2878      	cmp	r0, #120	; 0x78
 8002670:	f47f af31 	bne.w	80024d6 <Lb_sprintf+0x2a>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8002674:	f8d9 1000 	ldr.w	r1, [r9]
 8002678:	a801      	add	r0, sp, #4
 800267a:	f109 0904 	add.w	r9, r9, #4
 800267e:	47b0      	blx	r6
					break;
 8002680:	e729      	b.n	80024d6 <Lb_sprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002682:	47a8      	blx	r5
 8002684:	e727      	b.n	80024d6 <Lb_sprintf+0x2a>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 8002686:	f8d9 1000 	ldr.w	r1, [r9]
 800268a:	a801      	add	r0, sp, #4
 800268c:	f109 0904 	add.w	r9, r9, #4
 8002690:	47b8      	blx	r7
 					break;
 8002692:	e720      	b.n	80024d6 <Lb_sprintf+0x2a>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8002694:	f8d9 1000 	ldr.w	r1, [r9]
 8002698:	a801      	add	r0, sp, #4
 800269a:	f109 0904 	add.w	r9, r9, #4
 800269e:	47c0      	blx	r8
					break;
 80026a0:	e719      	b.n	80024d6 <Lb_sprintf+0x2a>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80026a2:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80026a4:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80026a6:	aa04      	add	r2, sp, #16
 80026a8:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 80026aa:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80026ac:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 80026b0:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 80026b4:	e7bf      	b.n	8002636 <Lb_sprintf+0x18a>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80026b6:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80026b8:	2078      	movs	r0, #120	; 0x78
 80026ba:	e7f4      	b.n	80026a6 <Lb_sprintf+0x1fa>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80026bc:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80026be:	2073      	movs	r0, #115	; 0x73
 80026c0:	e7f1      	b.n	80026a6 <Lb_sprintf+0x1fa>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80026c2:	2401      	movs	r4, #1
 80026c4:	e7ef      	b.n	80026a6 <Lb_sprintf+0x1fa>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80026c6:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80026c8:	2402      	movs	r4, #2
 80026ca:	e7ec      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026cc:	2402      	movs	r4, #2
 80026ce:	2078      	movs	r0, #120	; 0x78
 80026d0:	e7e9      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026d2:	2402      	movs	r4, #2
 80026d4:	2073      	movs	r0, #115	; 0x73
 80026d6:	e7e6      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026d8:	2402      	movs	r4, #2
 80026da:	e7e4      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80026dc:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80026de:	2403      	movs	r4, #3
 80026e0:	e7e1      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026e2:	2403      	movs	r4, #3
 80026e4:	2078      	movs	r0, #120	; 0x78
 80026e6:	e7de      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026e8:	2403      	movs	r4, #3
 80026ea:	2073      	movs	r0, #115	; 0x73
 80026ec:	e7db      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026ee:	2403      	movs	r4, #3
 80026f0:	e7d9      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80026f2:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80026f4:	2404      	movs	r4, #4
 80026f6:	e7d6      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026f8:	2404      	movs	r4, #4
 80026fa:	2078      	movs	r0, #120	; 0x78
 80026fc:	e7d3      	b.n	80026a6 <Lb_sprintf+0x1fa>
 80026fe:	2404      	movs	r4, #4
 8002700:	2073      	movs	r0, #115	; 0x73
 8002702:	e7d0      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002704:	2404      	movs	r4, #4
 8002706:	e7ce      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002708:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800270a:	2405      	movs	r4, #5
 800270c:	e7cb      	b.n	80026a6 <Lb_sprintf+0x1fa>
 800270e:	2405      	movs	r4, #5
 8002710:	2078      	movs	r0, #120	; 0x78
 8002712:	e7c8      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002714:	2405      	movs	r4, #5
 8002716:	2073      	movs	r0, #115	; 0x73
 8002718:	e7c5      	b.n	80026a6 <Lb_sprintf+0x1fa>
 800271a:	2405      	movs	r4, #5
 800271c:	e7c3      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800271e:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002720:	2406      	movs	r4, #6
 8002722:	e7c0      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002724:	2406      	movs	r4, #6
 8002726:	2078      	movs	r0, #120	; 0x78
 8002728:	e7bd      	b.n	80026a6 <Lb_sprintf+0x1fa>
 800272a:	2406      	movs	r4, #6
 800272c:	2073      	movs	r0, #115	; 0x73
 800272e:	e7ba      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002730:	2406      	movs	r4, #6
 8002732:	e7b8      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002734:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002736:	2407      	movs	r4, #7
 8002738:	e7b5      	b.n	80026a6 <Lb_sprintf+0x1fa>
 800273a:	2407      	movs	r4, #7
 800273c:	2078      	movs	r0, #120	; 0x78
 800273e:	e7b2      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002740:	2407      	movs	r4, #7
 8002742:	2073      	movs	r0, #115	; 0x73
 8002744:	e7af      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002746:	2407      	movs	r4, #7
 8002748:	e7ad      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800274a:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800274c:	2408      	movs	r4, #8
 800274e:	e7aa      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002750:	2408      	movs	r4, #8
 8002752:	2078      	movs	r0, #120	; 0x78
 8002754:	e7a7      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002756:	2408      	movs	r4, #8
 8002758:	2073      	movs	r0, #115	; 0x73
 800275a:	e7a4      	b.n	80026a6 <Lb_sprintf+0x1fa>
 800275c:	2408      	movs	r4, #8
 800275e:	e7a2      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002760:	4610      	mov	r0, r2
 8002762:	2409      	movs	r4, #9
 8002764:	e79f      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002766:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002768:	2078      	movs	r0, #120	; 0x78
 800276a:	e79c      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800276c:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800276e:	2073      	movs	r0, #115	; 0x73
 8002770:	e799      	b.n	80026a6 <Lb_sprintf+0x1fa>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002772:	2409      	movs	r4, #9
 8002774:	e797      	b.n	80026a6 <Lb_sprintf+0x1fa>
 8002776:	bf00      	nop
 8002778:	20001094 	.word	0x20001094
 800277c:	20000a08 	.word	0x20000a08
 8002780:	20000a0c 	.word	0x20000a0c
 8002784:	080019bd 	.word	0x080019bd
 8002788:	080019f5 	.word	0x080019f5
 800278c:	08001e25 	.word	0x08001e25
 8002790:	08001a59 	.word	0x08001a59

08002794 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 8002794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 8002798:	4cac      	ldr	r4, [pc, #688]	; (8002a4c <Lb_vsprintf+0x2b8>)
	StrPrintBufIndex = 0;
 800279a:	4ead      	ldr	r6, [pc, #692]	; (8002a50 <Lb_vsprintf+0x2bc>)
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800279c:	6020      	str	r0, [r4, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800279e:	4bad      	ldr	r3, [pc, #692]	; (8002a54 <Lb_vsprintf+0x2c0>)
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80027a0:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80027a2:	4615      	mov	r5, r2
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80027a4:	6030      	str	r0, [r6, #0]
{
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80027a6:	2201      	movs	r2, #1



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80027a8:	4eab      	ldr	r6, [pc, #684]	; (8002a58 <Lb_vsprintf+0x2c4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80027aa:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8002a60 <Lb_vsprintf+0x2cc>
					break;
				case 'X' :
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80027ae:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8002a64 <Lb_vsprintf+0x2d0>
					break;
				case 's' :
					PrintString(format, va_arg(args, char *));
 80027b2:	4faa      	ldr	r7, [pc, #680]	; (8002a5c <Lb_vsprintf+0x2c8>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80027b4:	b085      	sub	sp, #20
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80027b6:	701a      	strb	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 80027b8:	460c      	mov	r4, r1
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80027ba:	7820      	ldrb	r0, [r4, #0]
 80027bc:	2800      	cmp	r0, #0
 80027be:	f000 80bc 	beq.w	800293a <Lb_vsprintf+0x1a6>
	{
		if (*s=='%')
 80027c2:	2825      	cmp	r0, #37	; 0x25
 80027c4:	f040 80bc 	bne.w	8002940 <Lb_vsprintf+0x1ac>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80027c8:	7862      	ldrb	r2, [r4, #1]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80027ca:	1c63      	adds	r3, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80027cc:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80027d0:	2901      	cmp	r1, #1
	{
		if (*s=='%')
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 80027d2:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80027d6:	f240 80ce 	bls.w	8002976 <Lb_vsprintf+0x1e2>
 80027da:	2a78      	cmp	r2, #120	; 0x78
 80027dc:	f000 80d5 	beq.w	800298a <Lb_vsprintf+0x1f6>
 80027e0:	2a73      	cmp	r2, #115	; 0x73
 80027e2:	f000 80d5 	beq.w	8002990 <Lb_vsprintf+0x1fc>
 80027e6:	2a25      	cmp	r2, #37	; 0x25
 80027e8:	f000 80d5 	beq.w	8002996 <Lb_vsprintf+0x202>
 80027ec:	78a1      	ldrb	r1, [r4, #2]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80027ee:	f88d 2005 	strb.w	r2, [sp, #5]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80027f2:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80027f6:	1ca3      	adds	r3, r4, #2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80027f8:	2a01      	cmp	r2, #1
 80027fa:	f240 80ce 	bls.w	800299a <Lb_vsprintf+0x206>
 80027fe:	2978      	cmp	r1, #120	; 0x78
 8002800:	f000 80ce 	beq.w	80029a0 <Lb_vsprintf+0x20c>
 8002804:	2973      	cmp	r1, #115	; 0x73
 8002806:	f000 80ce 	beq.w	80029a6 <Lb_vsprintf+0x212>
 800280a:	2925      	cmp	r1, #37	; 0x25
 800280c:	f000 80ce 	beq.w	80029ac <Lb_vsprintf+0x218>
 8002810:	78e2      	ldrb	r2, [r4, #3]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002812:	f88d 1006 	strb.w	r1, [sp, #6]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002816:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800281a:	1ce3      	adds	r3, r4, #3
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800281c:	2901      	cmp	r1, #1
 800281e:	f240 80c7 	bls.w	80029b0 <Lb_vsprintf+0x21c>
 8002822:	2a78      	cmp	r2, #120	; 0x78
 8002824:	f000 80c7 	beq.w	80029b6 <Lb_vsprintf+0x222>
 8002828:	2a73      	cmp	r2, #115	; 0x73
 800282a:	f000 80c7 	beq.w	80029bc <Lb_vsprintf+0x228>
 800282e:	2a25      	cmp	r2, #37	; 0x25
 8002830:	f000 80c7 	beq.w	80029c2 <Lb_vsprintf+0x22e>
 8002834:	7921      	ldrb	r1, [r4, #4]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002836:	f88d 2007 	strb.w	r2, [sp, #7]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800283a:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800283e:	1d23      	adds	r3, r4, #4
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002840:	2a01      	cmp	r2, #1
 8002842:	f240 80c0 	bls.w	80029c6 <Lb_vsprintf+0x232>
 8002846:	2978      	cmp	r1, #120	; 0x78
 8002848:	f000 80c0 	beq.w	80029cc <Lb_vsprintf+0x238>
 800284c:	2973      	cmp	r1, #115	; 0x73
 800284e:	f000 80c0 	beq.w	80029d2 <Lb_vsprintf+0x23e>
 8002852:	2925      	cmp	r1, #37	; 0x25
 8002854:	f000 80c0 	beq.w	80029d8 <Lb_vsprintf+0x244>
 8002858:	7962      	ldrb	r2, [r4, #5]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800285a:	f88d 1008 	strb.w	r1, [sp, #8]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800285e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002862:	1d63      	adds	r3, r4, #5
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002864:	2901      	cmp	r1, #1
 8002866:	f240 80b9 	bls.w	80029dc <Lb_vsprintf+0x248>
 800286a:	2a78      	cmp	r2, #120	; 0x78
 800286c:	f000 80b9 	beq.w	80029e2 <Lb_vsprintf+0x24e>
 8002870:	2a73      	cmp	r2, #115	; 0x73
 8002872:	f000 80b9 	beq.w	80029e8 <Lb_vsprintf+0x254>
 8002876:	2a25      	cmp	r2, #37	; 0x25
 8002878:	f000 80b9 	beq.w	80029ee <Lb_vsprintf+0x25a>
 800287c:	79a1      	ldrb	r1, [r4, #6]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800287e:	f88d 2009 	strb.w	r2, [sp, #9]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002882:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002886:	1da3      	adds	r3, r4, #6
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002888:	2a01      	cmp	r2, #1
 800288a:	f240 80b2 	bls.w	80029f2 <Lb_vsprintf+0x25e>
 800288e:	2978      	cmp	r1, #120	; 0x78
 8002890:	f000 80b2 	beq.w	80029f8 <Lb_vsprintf+0x264>
 8002894:	2973      	cmp	r1, #115	; 0x73
 8002896:	f000 80b2 	beq.w	80029fe <Lb_vsprintf+0x26a>
 800289a:	2925      	cmp	r1, #37	; 0x25
 800289c:	f000 80b2 	beq.w	8002a04 <Lb_vsprintf+0x270>
 80028a0:	79e2      	ldrb	r2, [r4, #7]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80028a2:	f88d 100a 	strb.w	r1, [sp, #10]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80028a6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80028aa:	1de3      	adds	r3, r4, #7
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80028ac:	2901      	cmp	r1, #1
 80028ae:	f240 80ab 	bls.w	8002a08 <Lb_vsprintf+0x274>
 80028b2:	2a78      	cmp	r2, #120	; 0x78
 80028b4:	f000 80ab 	beq.w	8002a0e <Lb_vsprintf+0x27a>
 80028b8:	2a73      	cmp	r2, #115	; 0x73
 80028ba:	f000 80ab 	beq.w	8002a14 <Lb_vsprintf+0x280>
 80028be:	2a25      	cmp	r2, #37	; 0x25
 80028c0:	f000 80ab 	beq.w	8002a1a <Lb_vsprintf+0x286>
 80028c4:	7a21      	ldrb	r1, [r4, #8]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80028c6:	f88d 200b 	strb.w	r2, [sp, #11]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80028ca:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
 80028ce:	2a01      	cmp	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80028d0:	f104 0308 	add.w	r3, r4, #8
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80028d4:	f240 80a3 	bls.w	8002a1e <Lb_vsprintf+0x28a>
 80028d8:	2978      	cmp	r1, #120	; 0x78
 80028da:	f000 80a3 	beq.w	8002a24 <Lb_vsprintf+0x290>
 80028de:	2973      	cmp	r1, #115	; 0x73
 80028e0:	f000 80a3 	beq.w	8002a2a <Lb_vsprintf+0x296>
 80028e4:	2925      	cmp	r1, #37	; 0x25
 80028e6:	f000 80a3 	beq.w	8002a30 <Lb_vsprintf+0x29c>
 80028ea:	7a62      	ldrb	r2, [r4, #9]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80028ec:	f88d 100c 	strb.w	r1, [sp, #12]
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80028f0:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 80028f4:	2901      	cmp	r1, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80028f6:	f104 0309 	add.w	r3, r4, #9
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80028fa:	f240 809b 	bls.w	8002a34 <Lb_vsprintf+0x2a0>
 80028fe:	2a78      	cmp	r2, #120	; 0x78
 8002900:	f000 809b 	beq.w	8002a3a <Lb_vsprintf+0x2a6>
 8002904:	2a73      	cmp	r2, #115	; 0x73
 8002906:	f000 809b 	beq.w	8002a40 <Lb_vsprintf+0x2ac>
 800290a:	2a25      	cmp	r2, #37	; 0x25
 800290c:	f000 809b 	beq.w	8002a46 <Lb_vsprintf+0x2b2>
 8002910:	7aa0      	ldrb	r0, [r4, #10]
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002912:	f88d 200d 	strb.w	r2, [sp, #13]
 8002916:	f104 030a 	add.w	r3, r4, #10
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800291a:	1c5c      	adds	r4, r3, #1
 800291c:	2864      	cmp	r0, #100	; 0x64
 800291e:	d025      	beq.n	800296c <Lb_vsprintf+0x1d8>
 8002920:	d811      	bhi.n	8002946 <Lb_vsprintf+0x1b2>
 8002922:	2858      	cmp	r0, #88	; 0x58
 8002924:	d014      	beq.n	8002950 <Lb_vsprintf+0x1bc>
 8002926:	2863      	cmp	r0, #99	; 0x63
 8002928:	d01c      	beq.n	8002964 <Lb_vsprintf+0x1d0>
 800292a:	2825      	cmp	r0, #37	; 0x25
 800292c:	f47f af45 	bne.w	80027ba <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002930:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8002932:	7820      	ldrb	r0, [r4, #0]
 8002934:	2800      	cmp	r0, #0
 8002936:	f47f af44 	bne.w	80027c2 <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 800293a:	b005      	add	sp, #20
 800293c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002940:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8002942:	3401      	adds	r4, #1
 8002944:	e739      	b.n	80027ba <Lb_vsprintf+0x26>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8002946:	2873      	cmp	r0, #115	; 0x73
 8002948:	d007      	beq.n	800295a <Lb_vsprintf+0x1c6>
 800294a:	2878      	cmp	r0, #120	; 0x78
 800294c:	f47f af35 	bne.w	80027ba <Lb_vsprintf+0x26>
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'X' :
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8002950:	6829      	ldr	r1, [r5, #0]
 8002952:	a801      	add	r0, sp, #4
 8002954:	3504      	adds	r5, #4
 8002956:	47c0      	blx	r8
					break;
 8002958:	e72f      	b.n	80027ba <Lb_vsprintf+0x26>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800295a:	6829      	ldr	r1, [r5, #0]
 800295c:	a801      	add	r0, sp, #4
 800295e:	3504      	adds	r5, #4
 8002960:	47b8      	blx	r7
 					break;
 8002962:	e72a      	b.n	80027ba <Lb_vsprintf+0x26>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002964:	7828      	ldrb	r0, [r5, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8002966:	3504      	adds	r5, #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8002968:	47b0      	blx	r6
 800296a:	e726      	b.n	80027ba <Lb_vsprintf+0x26>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800296c:	6829      	ldr	r1, [r5, #0]
 800296e:	a801      	add	r0, sp, #4
 8002970:	3504      	adds	r5, #4
 8002972:	47c8      	blx	r9
					break;
 8002974:	e721      	b.n	80027ba <Lb_vsprintf+0x26>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002976:	4610      	mov	r0, r2
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002978:	2401      	movs	r4, #1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800297a:	aa04      	add	r2, sp, #16
 800297c:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 800297e:	2100      	movs	r1, #0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8002980:	f804 0c0c 	strb.w	r0, [r4, #-12]
					format[i] = '\0';
 8002984:	f804 1c0b 	strb.w	r1, [r4, #-11]
                	break;
 8002988:	e7c7      	b.n	800291a <Lb_vsprintf+0x186>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800298a:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800298c:	2078      	movs	r0, #120	; 0x78
 800298e:	e7f4      	b.n	800297a <Lb_vsprintf+0x1e6>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002990:	2401      	movs	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002992:	2073      	movs	r0, #115	; 0x73
 8002994:	e7f1      	b.n	800297a <Lb_vsprintf+0x1e6>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8002996:	2401      	movs	r4, #1
 8002998:	e7ef      	b.n	800297a <Lb_vsprintf+0x1e6>
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800299a:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800299c:	2402      	movs	r4, #2
 800299e:	e7ec      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029a0:	2402      	movs	r4, #2
 80029a2:	2078      	movs	r0, #120	; 0x78
 80029a4:	e7e9      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029a6:	2402      	movs	r4, #2
 80029a8:	2073      	movs	r0, #115	; 0x73
 80029aa:	e7e6      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029ac:	2402      	movs	r4, #2
 80029ae:	e7e4      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80029b0:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80029b2:	2403      	movs	r4, #3
 80029b4:	e7e1      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029b6:	2403      	movs	r4, #3
 80029b8:	2078      	movs	r0, #120	; 0x78
 80029ba:	e7de      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029bc:	2403      	movs	r4, #3
 80029be:	2073      	movs	r0, #115	; 0x73
 80029c0:	e7db      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029c2:	2403      	movs	r4, #3
 80029c4:	e7d9      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80029c6:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80029c8:	2404      	movs	r4, #4
 80029ca:	e7d6      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029cc:	2404      	movs	r4, #4
 80029ce:	2078      	movs	r0, #120	; 0x78
 80029d0:	e7d3      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029d2:	2404      	movs	r4, #4
 80029d4:	2073      	movs	r0, #115	; 0x73
 80029d6:	e7d0      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029d8:	2404      	movs	r4, #4
 80029da:	e7ce      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80029dc:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80029de:	2405      	movs	r4, #5
 80029e0:	e7cb      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029e2:	2405      	movs	r4, #5
 80029e4:	2078      	movs	r0, #120	; 0x78
 80029e6:	e7c8      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029e8:	2405      	movs	r4, #5
 80029ea:	2073      	movs	r0, #115	; 0x73
 80029ec:	e7c5      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029ee:	2405      	movs	r4, #5
 80029f0:	e7c3      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80029f2:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80029f4:	2406      	movs	r4, #6
 80029f6:	e7c0      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029f8:	2406      	movs	r4, #6
 80029fa:	2078      	movs	r0, #120	; 0x78
 80029fc:	e7bd      	b.n	800297a <Lb_vsprintf+0x1e6>
 80029fe:	2406      	movs	r4, #6
 8002a00:	2073      	movs	r0, #115	; 0x73
 8002a02:	e7ba      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a04:	2406      	movs	r4, #6
 8002a06:	e7b8      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002a08:	4610      	mov	r0, r2
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002a0a:	2407      	movs	r4, #7
 8002a0c:	e7b5      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a0e:	2407      	movs	r4, #7
 8002a10:	2078      	movs	r0, #120	; 0x78
 8002a12:	e7b2      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a14:	2407      	movs	r4, #7
 8002a16:	2073      	movs	r0, #115	; 0x73
 8002a18:	e7af      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a1a:	2407      	movs	r4, #7
 8002a1c:	e7ad      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002a1e:	4608      	mov	r0, r1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002a20:	2408      	movs	r4, #8
 8002a22:	e7aa      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a24:	2408      	movs	r4, #8
 8002a26:	2078      	movs	r0, #120	; 0x78
 8002a28:	e7a7      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a2a:	2408      	movs	r4, #8
 8002a2c:	2073      	movs	r0, #115	; 0x73
 8002a2e:	e7a4      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a30:	2408      	movs	r4, #8
 8002a32:	e7a2      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002a34:	4610      	mov	r0, r2
 8002a36:	2409      	movs	r4, #9
 8002a38:	e79f      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a3a:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002a3c:	2078      	movs	r0, #120	; 0x78
 8002a3e:	e79c      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002a40:	2409      	movs	r4, #9
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8002a42:	2073      	movs	r0, #115	; 0x73
 8002a44:	e799      	b.n	800297a <Lb_vsprintf+0x1e6>
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8002a46:	2409      	movs	r4, #9
 8002a48:	e797      	b.n	800297a <Lb_vsprintf+0x1e6>
 8002a4a:	bf00      	nop
 8002a4c:	20001094 	.word	0x20001094
 8002a50:	20000a08 	.word	0x20000a08
 8002a54:	20000a0c 	.word	0x20000a0c
 8002a58:	080019bd 	.word	0x080019bd
 8002a5c:	080019f5 	.word	0x080019f5
 8002a60:	08001a59 	.word	0x08001a59
 8002a64:	08001e25 	.word	0x08001e25

08002a68 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8002a68:	4668      	mov	r0, sp
 8002a6a:	f020 0107 	bic.w	r1, r0, #7
 8002a6e:	468d      	mov	sp, r1
 8002a70:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002a72:	492a      	ldr	r1, [pc, #168]	; (8002b1c <zero_loop+0x62>)
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <zero_loop+0x66>)
 8002a76:	4299      	cmp	r1, r3
 8002a78:	d21b      	bcs.n	8002ab2 <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8002a7a:	1cda      	adds	r2, r3, #3
 8002a7c:	1d0c      	adds	r4, r1, #4
 8002a7e:	1b15      	subs	r5, r2, r4
 8002a80:	4828      	ldr	r0, [pc, #160]	; (8002b24 <zero_loop+0x6a>)
 8002a82:	f025 0203 	bic.w	r2, r5, #3
 8002a86:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8002a88:	6805      	ldr	r5, [r0, #0]
 8002a8a:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002a8c:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8002a8e:	600d      	str	r5, [r1, #0]
 8002a90:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002a94:	d00d      	beq.n	8002ab2 <Hw_StartUp_Init+0x4a>
 8002a96:	b122      	cbz	r2, 8002aa2 <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8002a98:	6842      	ldr	r2, [r0, #4]
 8002a9a:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002a9c:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8002a9e:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002aa0:	d007      	beq.n	8002ab2 <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 8002aa2:	581d      	ldr	r5, [r3, r0]
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	505d      	str	r5, [r3, r1]
 8002aa8:	5884      	ldr	r4, [r0, r2]
 8002aaa:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002aac:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 8002aae:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8002ab0:	d1f7      	bne.n	8002aa2 <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8002ab2:	481e      	ldr	r0, [pc, #120]	; (8002b2c <zero_loop+0x72>)
 8002ab4:	491e      	ldr	r1, [pc, #120]	; (8002b30 <zero_loop+0x76>)
 8002ab6:	f04f 0200 	mov.w	r2, #0

08002aba <zero_loop>:
 8002aba:	4288      	cmp	r0, r1
 8002abc:	bfb8      	it	lt
 8002abe:	f840 2b04 	strlt.w	r2, [r0], #4
 8002ac2:	f6ff affa 	blt.w	8002aba <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8002ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ace:	6811      	ldr	r1, [r2, #0]
 8002ad0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002ad4:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8002ad8:	6010      	str	r0, [r2, #0]
 8002ada:	e004      	b.n	8002ae6 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8002adc:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8002ade:	0381      	lsls	r1, r0, #14
 8002ae0:	d405      	bmi.n	8002aee <zero_loop+0x34>
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	d003      	beq.n	8002aee <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8002aea:	0388      	lsls	r0, r1, #14
 8002aec:	d5f6      	bpl.n	8002adc <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8002aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002af6:	680a      	ldr	r2, [r1, #0]
 8002af8:	f042 0010 	orr.w	r0, r2, #16
 8002afc:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8002afe:	680b      	ldr	r3, [r1, #0]
 8002b00:	f023 0203 	bic.w	r2, r3, #3
 8002b04:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8002b06:	6808      	ldr	r0, [r1, #0]
 8002b08:	f040 0302 	orr.w	r3, r0, #2
 8002b0c:	600b      	str	r3, [r1, #0]


    main();
 8002b0e:	4906      	ldr	r1, [pc, #24]	; (8002b28 <zero_loop+0x6e>)
 8002b10:	4788      	blx	r1

}
 8002b12:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 8002b16:	4685      	mov	sp, r0
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	200009ac 	.word	0x200009ac
 8002b24:	0800e128 	.word	0x0800e128
 8002b28:	08000fc5 	.word	0x08000fc5
 8002b2c:	20000a00 	.word	0x20000a00
 8002b30:	20001d48 	.word	0x20001d48

08002b34 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8002b36:	f642 636d 	movw	r3, #11885	; 0x2e6d
 8002b3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002b3e:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8002b40:	f243 0001 	movw	r0, #12289	; 0x3001
 8002b44:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b48:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002b4a:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8002b4e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002b52:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8002b56:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8002b5a:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8002b5e:	f241 0104 	movw	r1, #4100	; 0x1004
 8002b62:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8002b66:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002b6a:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8002b6e:	f2c3 3044 	movt	r0, #13124	; 0x3344
 8002b72:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002b76:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8002b7a:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8002b7e:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8002b82:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8002b86:	f642 539d 	movw	r3, #11677	; 0x2d9d
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8002b8a:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8002b8e:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8002b92:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8002b94:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8002b96:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8002b98:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8002b9a:	4798      	blx	r3
	Hw_Timer_Init();
 8002b9c:	f243 0151 	movw	r1, #12369	; 0x3051
 8002ba0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ba4:	4788      	blx	r1

	Hw_Adc_Init();
 8002ba6:	f243 4049 	movw	r0, #13385	; 0x3449
 8002baa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bae:	4780      	blx	r0

	Hw_VCom_Init();
 8002bb0:	f243 32f5 	movw	r2, #13301	; 0x33f5
 8002bb4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002bb8:	4790      	blx	r2
	
	Hw_Led_Init();
 8002bba:	f642 7301 	movw	r3, #12033	; 0x2f01
 8002bbe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bc2:	4798      	blx	r3

	Hw_DcMotor_Init();
 8002bc4:	f243 5185 	movw	r1, #13701	; 0x3585
 8002bc8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002bcc:	4788      	blx	r1
 8002bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bd0 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8002bd0:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8002bd2:	f244 4304 	movw	r3, #17412	; 0x4404
 8002bd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bda:	6818      	ldr	r0, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8002bdc:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8002bde:	a902      	add	r1, sp, #8
 8002be0:	f801 0d01 	strb.w	r0, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 8002be4:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <Hw_ISR_UART2_Handler+0x2c>)
 8002be6:	2001      	movs	r0, #1
 8002be8:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 8002bea:	4905      	ldr	r1, [pc, #20]	; (8002c00 <Hw_ISR_UART2_Handler+0x30>)
 8002bec:	694b      	ldr	r3, [r1, #20]
 8002bee:	b113      	cbz	r3, 8002bf6 <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 8002bf0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002bf4:	4798      	blx	r3
	} 
}
 8002bf6:	b003      	add	sp, #12
 8002bf8:	bd00      	pop	{pc}
 8002bfa:	bf00      	nop
 8002bfc:	08002f89 	.word	0x08002f89
 8002c00:	20001098 	.word	0x20001098

08002c04 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8002c04:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8002c06:	f643 0304 	movw	r3, #14340	; 0x3804
 8002c0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002c0e:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8002c10:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8002c12:	a902      	add	r1, sp, #8
 8002c14:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <Hw_ISR_UART1_Handler+0x2c>)
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 8002c1e:	4905      	ldr	r1, [pc, #20]	; (8002c34 <Hw_ISR_UART1_Handler+0x30>)
 8002c20:	688b      	ldr	r3, [r1, #8]
 8002c22:	b113      	cbz	r3, 8002c2a <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 8002c24:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002c28:	4798      	blx	r3
	} 
}
 8002c2a:	b003      	add	sp, #12
 8002c2c:	bd00      	pop	{pc}
 8002c2e:	bf00      	nop
 8002c30:	08002f89 	.word	0x08002f89
 8002c34:	20001098 	.word	0x20001098

08002c38 <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 8002c38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	d5fc      	bpl.n	8002c40 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 8002c46:	f643 0104 	movw	r1, #14340	; 0x3804
 8002c4a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002c4e:	6008      	str	r0, [r1, #0]
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8002c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002c58:	f241 0618 	movw	r6, #4120	; 0x1018
 8002c5c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8002c60:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8002c62:	f241 0398 	movw	r3, #4248	; 0x1098
 8002c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002c6a:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002c6e:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8002c72:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002c76:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8002c7a:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8002c7c:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002c7e:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002c82:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002c84:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002c88:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8002c8c:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002c90:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002c92:	f240 2171 	movw	r1, #625	; 0x271
 8002c96:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002c9a:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8002c9e:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002ca2:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8002ca6:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002ca8:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 8002cac:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8002cb0:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	f043 0020 	orr.w	r0, r3, #32
 8002cb8:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002cba:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002cbc:	f243 0315 	movw	r3, #12309	; 0x3015
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002cc0:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002cc4:	f642 4105 	movw	r1, #11269	; 0x2c05
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8002cc8:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8002cca:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002cce:	2025      	movs	r0, #37	; 0x25
 8002cd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002cd4:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8002cdc:	6021      	str	r1, [r4, #0]
 8002cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce2:	bf00      	nop

08002ce4 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8002ce6:	f241 041c 	movw	r4, #4124	; 0x101c
 8002cea:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8002cee:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8002cf0:	f241 0298 	movw	r2, #4248	; 0x1098
 8002cf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8002cf8:	f445 3600 	orr.w	r6, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8002cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8002d00:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 8002d02:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8002d04:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8002d08:	6026      	str	r6, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8002d0a:	6818      	ldr	r0, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8002d0c:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8002d10:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
 8002d14:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 8002d16:	681f      	ldr	r7, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8002d18:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 8002d1c:	f447 7540 	orr.w	r5, r7, #768	; 0x300
 8002d20:	601d      	str	r5, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8002d22:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002d24:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8002d28:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
 8002d2c:	6018      	str	r0, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8002d2e:	6819      	ldr	r1, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 8002d30:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8002d34:	f421 4770 	bic.w	r7, r1, #61440	; 0xf000
 8002d38:	601f      	str	r7, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 8002d3a:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8002d3c:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 8002d40:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8002d42:	6819      	ldr	r1, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002d44:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8002d46:	f441 4780 	orr.w	r7, r1, #16384	; 0x4000
 8002d4a:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8002d4c:	230c      	movs	r3, #12
 8002d4e:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8002d50:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002d54:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002d58:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 8002d5c:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002d60:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8002d64:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002d66:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 8002d6a:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8002d6c:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8002d6e:	6808      	ldr	r0, [r1, #0]
 8002d70:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8002d74:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8002d76:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8002d78:	f243 0315 	movw	r3, #12309	; 0x3015
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8002d7c:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8002d80:	f642 31d1 	movw	r1, #11217	; 0x2bd1
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8002d84:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8002d86:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d8a:	2026      	movs	r0, #38	; 0x26
 8002d8c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002d90:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 8002d98:	6021      	str	r1, [r4, #0]
 8002d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d9c <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8002d9c:	f642 7359 	movw	r3, #12121	; 0x2f59
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8002da0:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8002da2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002da6:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002da8:	f241 0398 	movw	r3, #4248	; 0x1098
 8002dac:	2400      	movs	r4, #0
 8002dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8002db2:	f642 4255 	movw	r2, #11349	; 0x2c55
 8002db6:	4621      	mov	r1, r4
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002db8:	605c      	str	r4, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002dba:	609c      	str	r4, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002dbc:	611c      	str	r4, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002dbe:	615c      	str	r4, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002dc0:	61dc      	str	r4, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002dc2:	621c      	str	r4, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002dc4:	629c      	str	r4, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002dc6:	62dc      	str	r4, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002dc8:	635c      	str	r4, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002dca:	639c      	str	r4, [r3, #56]	; 0x38
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8002dcc:	641c      	str	r4, [r3, #64]	; 0x40
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8002dce:	645c      	str	r4, [r3, #68]	; 0x44
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8002dd0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002dd4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002dd8:	4790      	blx	r2
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 8002dda:	f642 43e5 	movw	r3, #11493	; 0x2ce5
 8002dde:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002de2:	4621      	mov	r1, r4
 8002de4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002de8:	4798      	blx	r3
 8002dea:	bd10      	pop	{r4, pc}

08002dec <Hw_Uart_SetReceiveFuncISR>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_SetReceiveFuncISR( u8 Ch, void (*ISR_FuncPtr)(char Ch) )
{
	if( Ch == HW_UART_VCOM )
 8002dec:	2805      	cmp	r0, #5
			: 시리얼 포트에서 데이터 수신시 실행할 함수 설정 .
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_SetReceiveFuncISR( u8 Ch, void (*ISR_FuncPtr)(char Ch) )
{
 8002dee:	b508      	push	{r3, lr}
	if( Ch == HW_UART_VCOM )
 8002df0:	d006      	beq.n	8002e00 <Hw_Uart_SetReceiveFuncISR+0x14>
	{
		Hw_VCom_SetReceiveFuncISR( ISR_FuncPtr );
	}
	else
	{
		Hw_Uart_Ch[Ch].ISR_FuncPtr = ISR_FuncPtr;			
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <Hw_Uart_SetReceiveFuncISR+0x1c>)
 8002df4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002df8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002dfc:	6091      	str	r1, [r2, #8]
 8002dfe:	bd08      	pop	{r3, pc}
---------------------------------------------------------------------------*/
void Hw_Uart_SetReceiveFuncISR( u8 Ch, void (*ISR_FuncPtr)(char Ch) )
{
	if( Ch == HW_UART_VCOM )
	{
		Hw_VCom_SetReceiveFuncISR( ISR_FuncPtr );
 8002e00:	4608      	mov	r0, r1
 8002e02:	4902      	ldr	r1, [pc, #8]	; (8002e0c <Hw_Uart_SetReceiveFuncISR+0x20>)
 8002e04:	4788      	blx	r1
 8002e06:	bd08      	pop	{r3, pc}
 8002e08:	20001098 	.word	0x20001098
 8002e0c:	0800343d 	.word	0x0800343d

08002e10 <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
 8002e10:	2801      	cmp	r0, #1
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 8002e12:	b508      	push	{r3, lr}
	switch( Ch )
 8002e14:	d00a      	beq.n	8002e2c <Hw_Uart_Putch+0x1c>
 8002e16:	d305      	bcc.n	8002e24 <Hw_Uart_Putch+0x14>
 8002e18:	2805      	cmp	r0, #5
 8002e1a:	d102      	bne.n	8002e22 <Hw_Uart_Putch+0x12>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			Hw_VCom_Putch( Uart_PutData );
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <Hw_Uart_Putch+0x38>)
 8002e20:	4798      	blx	r3
 8002e22:	bd08      	pop	{r3, pc}
 8002e24:	4608      	mov	r0, r1
 8002e26:	4909      	ldr	r1, [pc, #36]	; (8002e4c <Hw_Uart_Putch+0x3c>)
 8002e28:	4788      	blx	r1
 8002e2a:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 8002e2c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8002e30:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e34:	6810      	ldr	r0, [r2, #0]
 8002e36:	0600      	lsls	r0, r0, #24
 8002e38:	d5fc      	bpl.n	8002e34 <Hw_Uart_Putch+0x24>
    		REG_USART2_DR = Uart_PutData;
 8002e3a:	f244 4304 	movw	r3, #17412	; 0x4404
 8002e3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e42:	6019      	str	r1, [r3, #0]
			break;
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	0800342d 	.word	0x0800342d
 8002e4c:	08002c39 	.word	0x08002c39

08002e50 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 8002e50:	280a      	cmp	r0, #10


//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
 8002e52:	b538      	push	{r3, r4, r5, lr}
 8002e54:	4604      	mov	r4, r0
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 8002e56:	d003      	beq.n	8002e60 <print_byte+0x10>
 8002e58:	4d03      	ldr	r5, [pc, #12]	; (8002e68 <print_byte+0x18>)
 8002e5a:	b2e0      	uxtb	r0, r4
 8002e5c:	47a8      	blx	r5
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	200d      	movs	r0, #13
 8002e62:	4d01      	ldr	r5, [pc, #4]	; (8002e68 <print_byte+0x18>)
 8002e64:	47a8      	blx	r5
 8002e66:	e7f8      	b.n	8002e5a <print_byte+0xa>
 8002e68:	08002c39 	.word	0x08002c39

08002e6c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002e6c:	f241 0304 	movw	r3, #4100	; 0x1004
 8002e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e74:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8002e7a:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8002e7e:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 8002e82:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8002e84:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002e86:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8002e8a:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 8002e8e:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002e90:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8002e92:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8002e94:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e98:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8002e9a:	6801      	ldr	r1, [r0, #0]
 8002e9c:	018b      	lsls	r3, r1, #6
 8002e9e:	d5fc      	bpl.n	8002e9a <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8002ea0:	f241 0304 	movw	r3, #4100	; 0x1004
 8002ea4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ea8:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8002eaa:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8002eac:	f020 0103 	bic.w	r1, r0, #3
 8002eb0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	f040 0102 	orr.w	r1, r0, #2
 8002eb8:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 8002ec0:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 8002ec8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8002ed0:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 8002ed8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	f003 010c 	and.w	r1, r3, #12
 8002ee4:	2908      	cmp	r1, #8
 8002ee6:	d1fa      	bne.n	8002ede <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8002ee8:	f241 0018 	movw	r0, #4120	; 0x1018
 8002eec:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002ef0:	6802      	ldr	r2, [r0, #0]
 8002ef2:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 8002ef6:	f043 011d 	orr.w	r1, r3, #29
 8002efa:	6001      	str	r1, [r0, #0]
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8002f00:	2204      	movs	r2, #4
 8002f02:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f06:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002f08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8002f0c:	f021 60e0 	bic.w	r0, r1, #117440512	; 0x7000000
 8002f10:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8002f12:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002f14:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8002f18:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 8002f1c:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002f1e:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002f20:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8002f24:	f421 4070 	bic.w	r0, r1, #61440	; 0xf000
 8002f28:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8002f2a:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002f2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8002f30:	f441 5040 	orr.w	r0, r1, #12288	; 0x3000
 8002f34:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	f043 0008 	orr.w	r0, r3, #8
 8002f40:	6010      	str	r0, [r2, #0]
 8002f42:	4770      	bx	lr

08002f44 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8002f44:	b938      	cbnz	r0, 8002f56 <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8002f46:	f640 430c 	movw	r3, #3084	; 0xc0c
 8002f4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f082 0008 	eor.w	r0, r2, #8
 8002f54:	6018      	str	r0, [r3, #0]
 8002f56:	4770      	bx	lr

08002f58 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8002f58:	f241 11d8 	movw	r1, #4568	; 0x11d8
 8002f5c:	f241 12e8 	movw	r2, #4584	; 0x11e8
 8002f60:	2300      	movs	r3, #0
 8002f62:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002f66:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f6a:	800b      	strh	r3, [r1, #0]
 8002f6c:	8013      	strh	r3, [r2, #0]
 8002f6e:	804b      	strh	r3, [r1, #2]
 8002f70:	8053      	strh	r3, [r2, #2]
 8002f72:	808b      	strh	r3, [r1, #4]
 8002f74:	8093      	strh	r3, [r2, #4]
 8002f76:	80cb      	strh	r3, [r1, #6]
 8002f78:	80d3      	strh	r3, [r2, #6]
 8002f7a:	810b      	strh	r3, [r1, #8]
 8002f7c:	8113      	strh	r3, [r2, #8]
 8002f7e:	814b      	strh	r3, [r1, #10]
 8002f80:	8153      	strh	r3, [r2, #10]
 8002f82:	818b      	strh	r3, [r1, #12]
 8002f84:	8193      	strh	r3, [r2, #12]
 8002f86:	4770      	bx	lr

08002f88 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002f88:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <Hw_Uart_Q_Push+0x6c>)
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8002f8c:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002f8e:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8002f92:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8002f96:	b22c      	sxth	r4, r5
 8002f98:	231f      	movs	r3, #31
 8002f9a:	1ba6      	subs	r6, r4, r6
 8002f9c:	3620      	adds	r6, #32
 8002f9e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002fa2:	4033      	ands	r3, r6
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db18      	blt.n	8002fda <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8002fa8:	2b1f      	cmp	r3, #31
 8002faa:	d01c      	beq.n	8002fe6 <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002fac:	3501      	adds	r5, #1
 8002fae:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002fb0:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002fb2:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002fb4:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8002fb8:	b229      	sxth	r1, r5
 8002fba:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002fbc:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 8002fc0:	490e      	ldr	r1, [pc, #56]	; (8002ffc <Hw_Uart_Q_Push+0x74>)
 8002fc2:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002fc4:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8002fc6:	550e      	strb	r6, [r1, r4]
 8002fc8:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002fcc:	db0d      	blt.n	8002fea <Hw_Uart_Q_Push+0x62>
 8002fce:	4909      	ldr	r1, [pc, #36]	; (8002ff4 <Hw_Uart_Q_Push+0x6c>)
 8002fd0:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 8002fd4:	2001      	movs	r0, #1
}
 8002fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8002fd8:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f063 031f 	orn	r3, r3, #31
 8002fe0:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8002fe2:	2b1f      	cmp	r3, #31
 8002fe4:	d1e2      	bne.n	8002fac <Hw_Uart_Q_Push+0x24>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e7f5      	b.n	8002fd6 <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8002fea:	1e5a      	subs	r2, r3, #1
 8002fec:	f062 031f 	orn	r3, r2, #31
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e7ec      	b.n	8002fce <Hw_Uart_Q_Push+0x46>
 8002ff4:	200011e8 	.word	0x200011e8
 8002ff8:	200011d8 	.word	0x200011d8
 8002ffc:	200010e0 	.word	0x200010e0

08003000 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8003000:	f241 2300 	movw	r3, #4608	; 0x1200
 8003004:	f64e 5208 	movw	r2, #60680	; 0xed08
 8003008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800300c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4770      	bx	lr

08003014 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8003014:	f241 2300 	movw	r3, #4608	; 0x1200
 8003018:	3010      	adds	r0, #16
 800301a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800301e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8003022:	4770      	bx	lr

08003024 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8003024:	f241 2300 	movw	r3, #4608	; 0x1200
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8003028:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800302a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800302e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8003032:	4770      	bx	lr

08003034 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8003034:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8003036:	f243 31b1 	movw	r1, #13233	; 0x33b1
 800303a:	f243 0325 	movw	r3, #12325	; 0x3025
 800303e:	203c      	movs	r0, #60	; 0x3c
 8003040:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003044:	2200      	movs	r2, #0
 8003046:	f6c0 0300 	movt	r3, #2048	; 0x800
 800304a:	4798      	blx	r3
 800304c:	bd08      	pop	{r3, pc}
 800304e:	bf00      	nop

08003050 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8003050:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8003052:	4d33      	ldr	r5, [pc, #204]	; (8003120 <Hw_Timer_Init+0xd0>)
 8003054:	782b      	ldrb	r3, [r5, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d061      	beq.n	800311e <Hw_Timer_Init+0xce>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800305a:	4832      	ldr	r0, [pc, #200]	; (8003124 <Hw_Timer_Init+0xd4>)
 800305c:	2400      	movs	r4, #0
 800305e:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8003060:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8003062:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8003064:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8003066:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8003068:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 800306a:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 800306c:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800306e:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8003072:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8003074:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 8003076:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8003078:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 800307c:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 800307e:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 8003080:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8003082:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8003086:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 800308a:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 800308e:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8003090:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8003094:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8003098:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 800309c:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800309e:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 80030a2:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 80030a6:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 80030aa:	6684      	str	r4, [r0, #104]	; 0x68
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80030ac:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
		Timer_Tbl[i].Timer_Ctn  = 0;
 80030b0:	f8a0 4072 	strh.w	r4, [r0, #114]	; 0x72
		Timer_Tbl[i].Timer_Init = 0;
 80030b4:	f8a0 4074 	strh.w	r4, [r0, #116]	; 0x74
		Timer_Tbl[i].TmrFnct    = NULL;
 80030b8:	6784      	str	r4, [r0, #120]	; 0x78
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80030ba:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 80030be:	491a      	ldr	r1, [pc, #104]	; (8003128 <Hw_Timer_Init+0xd8>)
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
		Timer_Tbl[i].Timer_Ctn  = 0;
 80030c0:	f8a0 4082 	strh.w	r4, [r0, #130]	; 0x82
		Timer_Tbl[i].Timer_Init = 0;
 80030c4:	f8a0 4084 	strh.w	r4, [r0, #132]	; 0x84
		Timer_Tbl[i].TmrFnct    = NULL;
 80030c8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 80030cc:	f880 4090 	strb.w	r4, [r0, #144]	; 0x90
		Timer_Tbl[i].Timer_Ctn  = 0;
 80030d0:	f8a0 4092 	strh.w	r4, [r0, #146]	; 0x92
		Timer_Tbl[i].Timer_Init = 0;
 80030d4:	f8a0 4094 	strh.w	r4, [r0, #148]	; 0x94
		Timer_Tbl[i].TmrFnct    = NULL;
 80030d8:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	}	                   
	
	
	Hw_Timer_SetupISR();
 80030dc:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80030de:	f24e 0114 	movw	r1, #57364	; 0xe014
 80030e2:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 80030e6:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80030ea:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80030ee:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 80030f2:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80030f6:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80030fa:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80030fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8003100:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	f041 0004 	orr.w	r0, r1, #4
 8003108:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f042 0102 	orr.w	r1, r2, #2
 8003110:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	f040 0201 	orr.w	r2, r0, #1
 8003118:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	702b      	strb	r3, [r5, #0]
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	20000a0d 	.word	0x20000a0d
 8003124:	20000a10 	.word	0x20000a10
 8003128:	08003035 	.word	0x08003035

0800312c <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800312c:	4a9d      	ldr	r2, [pc, #628]	; (80033a4 <Hw_Timer_Tick+0x278>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 800312e:	4b9e      	ldr	r3, [pc, #632]	; (80033a8 <Hw_Timer_Tick+0x27c>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8003130:	6811      	ldr	r1, [r2, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8003132:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8003134:	1c48      	adds	r0, r1, #1
 8003136:	6010      	str	r0, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8003138:	881c      	ldrh	r4, [r3, #0]
 800313a:	b2a2      	uxth	r2, r4
 800313c:	b11a      	cbz	r2, 8003146 <Hw_Timer_Tick+0x1a>
 800313e:	8819      	ldrh	r1, [r3, #0]
 8003140:	1e48      	subs	r0, r1, #1
 8003142:	b284      	uxth	r4, r0
 8003144:	801c      	strh	r4, [r3, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8003146:	4c99      	ldr	r4, [pc, #612]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003148:	7823      	ldrb	r3, [r4, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d030      	beq.n	80031b0 <Hw_Timer_Tick+0x84>
 800314e:	7c20      	ldrb	r0, [r4, #16]
 8003150:	4a96      	ldr	r2, [pc, #600]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003152:	2801      	cmp	r0, #1
 8003154:	d03e      	beq.n	80031d4 <Hw_Timer_Tick+0xa8>
 8003156:	f894 0020 	ldrb.w	r0, [r4, #32]
 800315a:	4a94      	ldr	r2, [pc, #592]	; (80033ac <Hw_Timer_Tick+0x280>)
 800315c:	2801      	cmp	r0, #1
 800315e:	d04c      	beq.n	80031fa <Hw_Timer_Tick+0xce>
 8003160:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8003164:	4a91      	ldr	r2, [pc, #580]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003166:	2801      	cmp	r0, #1
 8003168:	d05b      	beq.n	8003222 <Hw_Timer_Tick+0xf6>
 800316a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800316e:	4a8f      	ldr	r2, [pc, #572]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003170:	2801      	cmp	r0, #1
 8003172:	d06a      	beq.n	800324a <Hw_Timer_Tick+0x11e>
 8003174:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8003178:	4a8c      	ldr	r2, [pc, #560]	; (80033ac <Hw_Timer_Tick+0x280>)
 800317a:	2801      	cmp	r0, #1
 800317c:	d07d      	beq.n	800327a <Hw_Timer_Tick+0x14e>
 800317e:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8003182:	4a8a      	ldr	r2, [pc, #552]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003184:	2801      	cmp	r0, #1
 8003186:	f000 8091 	beq.w	80032ac <Hw_Timer_Tick+0x180>
 800318a:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 800318e:	4a87      	ldr	r2, [pc, #540]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003190:	2801      	cmp	r0, #1
 8003192:	f000 80a4 	beq.w	80032de <Hw_Timer_Tick+0x1b2>
 8003196:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 800319a:	4a84      	ldr	r2, [pc, #528]	; (80033ac <Hw_Timer_Tick+0x280>)
 800319c:	2801      	cmp	r0, #1
 800319e:	f000 80b7 	beq.w	8003310 <Hw_Timer_Tick+0x1e4>
 80031a2:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 80031a6:	4a81      	ldr	r2, [pc, #516]	; (80033ac <Hw_Timer_Tick+0x280>)
 80031a8:	2801      	cmp	r0, #1
 80031aa:	f000 80cb 	beq.w	8003344 <Hw_Timer_Tick+0x218>
 80031ae:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80031b0:	8862      	ldrh	r2, [r4, #2]
 80031b2:	1e51      	subs	r1, r2, #1
 80031b4:	b288      	uxth	r0, r1
 80031b6:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d1c8      	bne.n	800314e <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80031bc:	7863      	ldrb	r3, [r4, #1]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f000 80d9 	beq.w	8003376 <Hw_Timer_Tick+0x24a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80031c4:	88a2      	ldrh	r2, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80031c6:	68a1      	ldr	r1, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80031c8:	8062      	strh	r2, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80031ca:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80031cc:	7c20      	ldrb	r0, [r4, #16]
 80031ce:	4a77      	ldr	r2, [pc, #476]	; (80033ac <Hw_Timer_Tick+0x280>)
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d1c0      	bne.n	8003156 <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80031d4:	8a53      	ldrh	r3, [r2, #18]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	b288      	uxth	r0, r1
 80031da:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1ba      	bne.n	8003156 <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80031e0:	7c53      	ldrb	r3, [r2, #17]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f000 80c5 	beq.w	8003372 <Hw_Timer_Tick+0x246>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80031e8:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80031ea:	69a1      	ldr	r1, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80031ec:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80031ee:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80031f0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80031f4:	4a6d      	ldr	r2, [pc, #436]	; (80033ac <Hw_Timer_Tick+0x280>)
 80031f6:	2801      	cmp	r0, #1
 80031f8:	d1b2      	bne.n	8003160 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80031fa:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 80031fc:	1e59      	subs	r1, r3, #1
 80031fe:	b288      	uxth	r0, r1
 8003200:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8003202:	2800      	cmp	r0, #0
 8003204:	d1ac      	bne.n	8003160 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8003206:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800320a:	2b01      	cmp	r3, #1
 800320c:	f000 80c7 	beq.w	800339e <Hw_Timer_Tick+0x272>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003210:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8003212:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003214:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8003216:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8003218:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800321c:	4a63      	ldr	r2, [pc, #396]	; (80033ac <Hw_Timer_Tick+0x280>)
 800321e:	2801      	cmp	r0, #1
 8003220:	d1a3      	bne.n	800316a <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8003222:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8003224:	1e59      	subs	r1, r3, #1
 8003226:	b288      	uxth	r0, r1
 8003228:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800322a:	2800      	cmp	r0, #0
 800322c:	d19d      	bne.n	800316a <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800322e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8003232:	2b01      	cmp	r3, #1
 8003234:	f000 80b0 	beq.w	8003398 <Hw_Timer_Tick+0x26c>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003238:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800323a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800323c:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800323e:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8003240:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8003244:	4a59      	ldr	r2, [pc, #356]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003246:	2801      	cmp	r0, #1
 8003248:	d194      	bne.n	8003174 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800324a:	f8b2 3042 	ldrh.w	r3, [r2, #66]	; 0x42
 800324e:	1e59      	subs	r1, r3, #1
 8003250:	b288      	uxth	r0, r1
 8003252:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8003256:	2800      	cmp	r0, #0
 8003258:	d18c      	bne.n	8003174 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800325a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800325e:	2b01      	cmp	r3, #1
 8003260:	f000 8097 	beq.w	8003392 <Hw_Timer_Tick+0x266>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003264:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8003268:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800326a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800326e:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8003270:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8003274:	4a4d      	ldr	r2, [pc, #308]	; (80033ac <Hw_Timer_Tick+0x280>)
 8003276:	2801      	cmp	r0, #1
 8003278:	d181      	bne.n	800317e <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800327a:	f8b2 3052 	ldrh.w	r3, [r2, #82]	; 0x52
 800327e:	1e59      	subs	r1, r3, #1
 8003280:	b288      	uxth	r0, r1
 8003282:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8003286:	2800      	cmp	r0, #0
 8003288:	f47f af79 	bne.w	800317e <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800328c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8003290:	2b01      	cmp	r3, #1
 8003292:	d07b      	beq.n	800338c <Hw_Timer_Tick+0x260>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003294:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8003298:	6da1      	ldr	r1, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800329a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800329e:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80032a0:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 80032a4:	4a41      	ldr	r2, [pc, #260]	; (80033ac <Hw_Timer_Tick+0x280>)
 80032a6:	2801      	cmp	r0, #1
 80032a8:	f47f af6f 	bne.w	800318a <Hw_Timer_Tick+0x5e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80032ac:	f8b2 3062 	ldrh.w	r3, [r2, #98]	; 0x62
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	b288      	uxth	r0, r1
 80032b4:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80032b8:	2800      	cmp	r0, #0
 80032ba:	f47f af66 	bne.w	800318a <Hw_Timer_Tick+0x5e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80032be:	f892 3061 	ldrb.w	r3, [r2, #97]	; 0x61
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d05f      	beq.n	8003386 <Hw_Timer_Tick+0x25a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80032c6:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80032ca:	6ea1      	ldr	r1, [r4, #104]	; 0x68
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80032cc:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80032d0:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 80032d2:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 80032d6:	4a35      	ldr	r2, [pc, #212]	; (80033ac <Hw_Timer_Tick+0x280>)
 80032d8:	2801      	cmp	r0, #1
 80032da:	f47f af5c 	bne.w	8003196 <Hw_Timer_Tick+0x6a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 80032de:	f8b2 3072 	ldrh.w	r3, [r2, #114]	; 0x72
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	b288      	uxth	r0, r1
 80032e6:	f8a2 0072 	strh.w	r0, [r2, #114]	; 0x72

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 80032ea:	2800      	cmp	r0, #0
 80032ec:	f47f af53 	bne.w	8003196 <Hw_Timer_Tick+0x6a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 80032f0:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d043      	beq.n	8003380 <Hw_Timer_Tick+0x254>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80032f8:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 80032fc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 80032fe:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8003302:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8003304:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <Hw_Timer_Tick+0x280>)
 800330a:	2801      	cmp	r0, #1
 800330c:	f47f af49 	bne.w	80031a2 <Hw_Timer_Tick+0x76>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8003310:	f8b2 3082 	ldrh.w	r3, [r2, #130]	; 0x82
 8003314:	1e59      	subs	r1, r3, #1
 8003316:	b288      	uxth	r0, r1
 8003318:	f8a2 0082 	strh.w	r0, [r2, #130]	; 0x82

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800331c:	2800      	cmp	r0, #0
 800331e:	f47f af40 	bne.w	80031a2 <Hw_Timer_Tick+0x76>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8003322:	f892 3081 	ldrb.w	r3, [r2, #129]	; 0x81
 8003326:	2b01      	cmp	r3, #1
 8003328:	d027      	beq.n	800337a <Hw_Timer_Tick+0x24e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800332a:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800332e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003332:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8003336:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8003338:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 800333c:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <Hw_Timer_Tick+0x280>)
 800333e:	2801      	cmp	r0, #1
 8003340:	f47f af35 	bne.w	80031ae <Hw_Timer_Tick+0x82>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8003344:	f8b2 3092 	ldrh.w	r3, [r2, #146]	; 0x92
 8003348:	1e59      	subs	r1, r3, #1
 800334a:	b288      	uxth	r0, r1
 800334c:	f8a2 0092 	strh.w	r0, [r2, #146]	; 0x92

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8003350:	2800      	cmp	r0, #0
 8003352:	f47f af2c 	bne.w	80031ae <Hw_Timer_Tick+0x82>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8003356:	f892 3091 	ldrb.w	r3, [r2, #145]	; 0x91

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800335a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800335e:	2b01      	cmp	r3, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8003360:	bf08      	it	eq
 8003362:	f882 0090 	strbeq.w	r0, [r2, #144]	; 0x90

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8003366:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
 800336a:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800336e:	4788      	blx	r1
 8003370:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8003372:	7410      	strb	r0, [r2, #16]
 8003374:	e738      	b.n	80031e8 <Hw_Timer_Tick+0xbc>
 8003376:	7020      	strb	r0, [r4, #0]
 8003378:	e724      	b.n	80031c4 <Hw_Timer_Tick+0x98>
 800337a:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
 800337e:	e7d4      	b.n	800332a <Hw_Timer_Tick+0x1fe>
 8003380:	f882 0070 	strb.w	r0, [r2, #112]	; 0x70
 8003384:	e7b8      	b.n	80032f8 <Hw_Timer_Tick+0x1cc>
 8003386:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 800338a:	e79c      	b.n	80032c6 <Hw_Timer_Tick+0x19a>
 800338c:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8003390:	e780      	b.n	8003294 <Hw_Timer_Tick+0x168>
 8003392:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8003396:	e765      	b.n	8003264 <Hw_Timer_Tick+0x138>
 8003398:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 800339c:	e74c      	b.n	8003238 <Hw_Timer_Tick+0x10c>
 800339e:	f882 0020 	strb.w	r0, [r2, #32]
 80033a2:	e735      	b.n	8003210 <Hw_Timer_Tick+0xe4>
 80033a4:	20000ab0 	.word	0x20000ab0
 80033a8:	20000ab4 	.word	0x20000ab4
 80033ac:	20000a10 	.word	0x20000a10

080033b0 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 80033b0:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 80033b2:	f243 132d 	movw	r3, #12589	; 0x312d
 80033b6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80033ba:	4798      	blx	r3
 80033bc:	bd08      	pop	{r3, pc}
 80033be:	bf00      	nop

080033c0 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 80033c0:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80033c2:	f640 2410 	movw	r4, #2576	; 0xa10
 80033c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80033ca:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 80033ce:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80033d0:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 80033d2:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80033d4:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 80033d6:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 80033d8:	8081      	strh	r1, [r0, #4]
}
 80033da:	bc10      	pop	{r4}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 80033e0:	2809      	cmp	r0, #9
 80033e2:	d803      	bhi.n	80033ec <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 80033e4:	4b02      	ldr	r3, [pc, #8]	; (80033f0 <Hw_Timer_Start+0x10>)
 80033e6:	0100      	lsls	r0, r0, #4
 80033e8:	2201      	movs	r2, #1
 80033ea:	541a      	strb	r2, [r3, r0]
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000a10 	.word	0x20000a10

080033f4 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 80033f4:	b508      	push	{r3, lr}
	Hw_VCom_RxdFuncPtr = NULL;
 80033f6:	f241 3290 	movw	r2, #5008	; 0x1390

	Set_System();
 80033fa:	f244 03fd 	movw	r3, #16637	; 0x40fd
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
	Hw_VCom_RxdFuncPtr = NULL;
 80033fe:	2100      	movs	r1, #0
 8003400:	f2c2 0200 	movt	r2, #8192	; 0x2000

	Set_System();
 8003404:	f6c0 0300 	movt	r3, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
	Hw_VCom_RxdFuncPtr = NULL;
 8003408:	6011      	str	r1, [r2, #0]

	Set_System();
 800340a:	4798      	blx	r3
	Set_USBClock();
 800340c:	f244 101d 	movw	r0, #16669	; 0x411d
 8003410:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003414:	4780      	blx	r0
	USB_Interrupts_Config();
 8003416:	f244 1261 	movw	r2, #16737	; 0x4161
 800341a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800341e:	4790      	blx	r2
	USB_Init();	
 8003420:	f644 53b9 	movw	r3, #19897	; 0x4db9
 8003424:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003428:	4798      	blx	r3
 800342a:	bd08      	pop	{r3, pc}

0800342c <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 800342c:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 800342e:	f244 3379 	movw	r3, #17273	; 0x4379
 8003432:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003436:	4798      	blx	r3
 8003438:	bd08      	pop	{r3, pc}
 800343a:	bf00      	nop

0800343c <Hw_VCom_SetReceiveFuncISR>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_SetReceiveFuncISR( void (*ISR_FuncPtr)(char Ch) )
{
	Hw_VCom_RxdFuncPtr = ISR_FuncPtr;	
 800343c:	f241 3390 	movw	r3, #5008	; 0x1390
 8003440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003444:	6018      	str	r0, [r3, #0]
 8003446:	4770      	bx	lr

08003448 <Hw_Adc_Init>:
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 8003448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800344c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003450:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 8003452:	f241 0204 	movw	r2, #4100	; 0x1004
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 8003456:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 800345a:	6018      	str	r0, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 800345c:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800345e:	f2c4 0202 	movt	r2, #16386	; 0x4002
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 8003462:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 8003464:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 8003466:	f241 0118 	movw	r1, #4120	; 0x1018

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 800346a:	6018      	str	r0, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800346c:	6813      	ldr	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800346e:	f2c4 0102 	movt	r1, #16386	; 0x4002


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 8003472:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8003476:	6010      	str	r0, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );
 8003478:	6813      	ldr	r3, [r2, #0]
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800347a:	f242 4004 	movw	r0, #9220	; 0x2404

	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
	CLR_BIT( REG_RCC_CFGR, 14 );
 800347e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003482:	6013      	str	r3, [r2, #0]


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 8003484:	680a      	ldr	r2, [r1, #0]


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 8003486:	f2c4 0001 	movt	r0, #16385	; 0x4001
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	600a      	str	r2, [r1, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 8003490:	f242 4308 	movw	r3, #9224	; 0x2408
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 8003494:	2100      	movs	r1, #0
 8003496:	6001      	str	r1, [r0, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 8003498:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800349c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034a0:	6018      	str	r0, [r3, #0]
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 80034a2:	681a      	ldr	r2, [r3, #0]
	//
	SET_BIT( REG_ADC1_CR2, 3 );	

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 80034a4:	4619      	mov	r1, r3
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 80034a6:	f042 0001 	orr.w	r0, r2, #1
 80034aa:	6018      	str	r0, [r3, #0]

	// Enable ADC1 reset calibaration register
	//
	SET_BIT( REG_ADC1_CR2, 3 );	
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f042 0008 	orr.w	r0, r2, #8
 80034b2:	6018      	str	r0, [r3, #0]

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 80034b4:	680a      	ldr	r2, [r1, #0]
 80034b6:	f242 4308 	movw	r3, #9224	; 0x2408
 80034ba:	0712      	lsls	r2, r2, #28
 80034bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80034c0:	d4f8      	bmi.n	80034b4 <Hw_Adc_Init+0x6c>

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 80034c2:	6819      	ldr	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 80034c4:	4618      	mov	r0, r3
	while(IS_SET_BIT(REG_ADC1_CR2, 3));

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 80034c6:	f041 0204 	orr.w	r2, r1, #4
 80034ca:	601a      	str	r2, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 80034cc:	6803      	ldr	r3, [r0, #0]
 80034ce:	f013 0104 	ands.w	r1, r3, #4
 80034d2:	d1fb      	bne.n	80034cc <Hw_Adc_Init+0x84>


	REG_ADC1_SQR1  = 0;
 80034d4:	f242 402c 	movw	r0, #9260	; 0x242c
 80034d8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80034dc:	6001      	str	r1, [r0, #0]
	REG_ADC1_SQR1 |= (1<<20);	// 1개 채널만 컨버젼
 80034de:	6802      	ldr	r2, [r0, #0]
 80034e0:	f442 1380 	orr.w	r3, r2, #1048576	; 0x100000
 80034e4:	6003      	str	r3, [r0, #0]
 80034e6:	4770      	bx	lr

080034e8 <Hw_DcMotor_Run>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Run( u8 Ch, u8 Dir )
{
	switch( Ch )
 80034e8:	b988      	cbnz	r0, 800350e <Hw_DcMotor_Run+0x26>
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_PWM );
 80034ea:	f640 430c 	movw	r3, #3084	; 0xc0c
 80034ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	f040 0201 	orr.w	r2, r0, #1
 80034f8:	601a      	str	r2, [r3, #0]

			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 80034fa:	6818      	ldr	r0, [r3, #0]
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_PWM );

			if( Dir == HW_DCMOTOR_FOR )
 80034fc:	b9e1      	cbnz	r1, 8003538 <Hw_DcMotor_Run+0x50>
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 80034fe:	f020 0104 	bic.w	r1, r0, #4
 8003502:	6019      	str	r1, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f442 6080 	orr.w	r0, r2, #1024	; 0x400
 800350a:	6018      	str	r0, [r3, #0]
 800350c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Run( u8 Ch, u8 Dir )
{
	switch( Ch )
 800350e:	2801      	cmp	r0, #1
 8003510:	d000      	beq.n	8003514 <Hw_DcMotor_Run+0x2c>
 8003512:	4770      	bx	lr
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			}
			break;

		case 1:
			SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_PWM );
 8003514:	f640 430c 	movw	r3, #3084	; 0xc0c
 8003518:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f042 0002 	orr.w	r0, r2, #2
 8003522:	6018      	str	r0, [r3, #0]

			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 8003524:	681a      	ldr	r2, [r3, #0]
			break;

		case 1:
			SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_PWM );

			if( Dir == HW_DCMOTOR_FOR )
 8003526:	b179      	cbz	r1, 8003548 <Hw_DcMotor_Run+0x60>
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 8003528:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
 800352c:	6019      	str	r1, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4770      	bx	lr
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			}
			else
			{
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
 8003538:	f040 0104 	orr.w	r1, r0, #4
 800353c:	6019      	str	r1, [r3, #0]
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	f422 6080 	bic.w	r0, r2, #1024	; 0x400
 8003544:	6018      	str	r0, [r3, #0]
 8003546:	4770      	bx	lr
		case 1:
			SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_PWM );

			if( Dir == HW_DCMOTOR_FOR )
			{
				CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_L );
 8003548:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800354c:	6019      	str	r1, [r3, #0]
				SET_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_R );
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	f440 6200 	orr.w	r2, r0, #2048	; 0x800
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	4770      	bx	lr

08003558 <Hw_DcMotor_Stop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Stop( u8 Ch )
{
	switch( Ch )
 8003558:	b940      	cbnz	r0, 800356c <Hw_DcMotor_Stop+0x14>
	{
		case 0:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_PWM );
 800355a:	f640 410c 	movw	r1, #3084	; 0xc0c
 800355e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003562:	680b      	ldr	r3, [r1, #0]
 8003564:	f023 0201 	bic.w	r2, r3, #1
 8003568:	600a      	str	r2, [r1, #0]
 800356a:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Stop( u8 Ch )
{
	switch( Ch )
 800356c:	2801      	cmp	r0, #1
 800356e:	d000      	beq.n	8003572 <Hw_DcMotor_Stop+0x1a>
 8003570:	4770      	bx	lr
			//CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_L );
			//CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_0_R );
			break;

		case 1:
			CLR_BIT( REG_GPIOB_ODR, HW_DCMOTOR_PORT_1_PWM );
 8003572:	f640 430c 	movw	r3, #3084	; 0xc0c
 8003576:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f022 0002 	bic.w	r0, r2, #2
 8003580:	6018      	str	r0, [r3, #0]
 8003582:	4770      	bx	lr

08003584 <Hw_DcMotor_Init>:

	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 8003584:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003588:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800358c:	6811      	ldr	r1, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
{
 800358e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 8003592:	f021 000f 	bic.w	r0, r1, #15
 8003596:	6010      	str	r0, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 8003598:	6814      	ldr	r4, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800359a:	f640 4304 	movw	r3, #3076	; 0xc04
	//-- GPIO 설정
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 800359e:	f044 0503 	orr.w	r5, r4, #3
 80035a2:	6015      	str	r5, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 80035a4:	6816      	ldr	r6, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80035a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
	//
	//-- L0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 80035aa:	6016      	str	r6, [r2, #0]

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 80035ac:	6811      	ldr	r1, [r2, #0]
			


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 80035ae:	f243 5759 	movw	r7, #13657	; 0x3559
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 80035b2:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 80035b6:	6010      	str	r0, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 80035b8:	6814      	ldr	r4, [r2, #0]
			


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 80035ba:	2000      	movs	r0, #0
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 80035bc:	f044 0530 	orr.w	r5, r4, #48	; 0x30
 80035c0:	6015      	str	r5, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 80035c2:	6811      	ldr	r1, [r2, #0]

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 80035c4:	f241 3494 	movw	r4, #5012	; 0x1394

	//-- L1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 80035c8:	6011      	str	r1, [r2, #0]

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 80035ca:	6815      	ldr	r5, [r2, #0]

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 80035cc:	f2c2 0400 	movt	r4, #8192	; 0x2000
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 80035d0:	f425 6170 	bic.w	r1, r5, #3840	; 0xf00
 80035d4:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 80035d6:	6815      	ldr	r5, [r2, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DcMotor_Init( void )
{
 80035d8:	b082      	sub	sp, #8
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 80035da:	f445 7140 	orr.w	r1, r5, #768	; 0x300
 80035de:	6011      	str	r1, [r2, #0]
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 80035e0:	6811      	ldr	r1, [r2, #0]
	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
		Hw_DcMotor_State[i].Pin   = FALSE;
 80035e2:	4605      	mov	r5, r0

	//-- L2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 80035e4:	6011      	str	r1, [r2, #0]

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80035e6:	681a      	ldr	r2, [r3, #0]
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
		Hw_DcMotor_State[i].Pin   = FALSE;
		Hw_DcMotor_State[i].Speed = 0;
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 80035e8:	2601      	movs	r6, #1
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 80035ea:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 80035ee:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 80035f0:	681a      	ldr	r2, [r3, #0]

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 80035f2:	f04f 0802 	mov.w	r8, #2
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 80035f6:	f442 7140 	orr.w	r1, r2, #768	; 0x300
 80035fa:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 80035fc:	681a      	ldr	r2, [r3, #0]
			


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 80035fe:	f6c0 0700 	movt	r7, #2048	; 0x800

	//-- L3 PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 8003602:	601a      	str	r2, [r3, #0]

	//-- R0 PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	f421 4270 	bic.w	r2, r1, #61440	; 0xf000
 800360a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.2 Output mode, max speed 50Mhz
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	f441 5240 	orr.w	r2, r1, #12288	; 0x3000
 8003612:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.2 General purpose output push-pul	
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	6019      	str	r1, [r3, #0]
	
	//-- R1 PB.12
	//
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
 800361e:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE, PB.6 Output mode, max speed 50Mhz
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f442 3140 	orr.w	r1, r2, #196608	; 0x30000
 8003626:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (18));	// CNF,  PB.6 General purpose output push-pul	
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	601a      	str	r2, [r3, #0]
			


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 800362c:	47b8      	blx	r7
 800362e:	4630      	mov	r0, r6

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 8003630:	f884 8001 	strb.w	r8, [r4, #1]
		Hw_DcMotor_State[i].Pin   = FALSE;
 8003634:	70a5      	strb	r5, [r4, #2]
		Hw_DcMotor_State[i].Speed = 0;
 8003636:	80a5      	strh	r5, [r4, #4]
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 8003638:	7026      	strb	r6, [r4, #0]
			


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );
 800363a:	47b8      	blx	r7
		Hw_DcMotor_State[i].Pin   = FALSE;
		Hw_DcMotor_State[i].Speed = 0;
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
	}

	Hw_Timer_Set  ( HW_TIMER_CH_DCMOTOR, 1, LOOP_TIME, Hw_DcMotor_Tick, NULL );
 800363c:	f243 37c1 	movw	r7, #13249	; 0x33c1
 8003640:	f243 6375 	movw	r3, #13941	; 0x3675
 8003644:	9500      	str	r5, [sp, #0]
 8003646:	2006      	movs	r0, #6
 8003648:	4631      	mov	r1, r6
 800364a:	4642      	mov	r2, r8
 800364c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003650:	f6c0 0700 	movt	r7, #2048	; 0x800

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		Hw_DcMotor_Stop( i );

		Hw_DcMotor_State[i].Dir   = HW_DCMOTOR_STOP;
 8003654:	f884 8007 	strb.w	r8, [r4, #7]
		Hw_DcMotor_State[i].Pin   = FALSE;
 8003658:	7225      	strb	r5, [r4, #8]
		Hw_DcMotor_State[i].Speed = 0;
 800365a:	8165      	strh	r5, [r4, #10]
		Hw_DcMotor_State[i].State = HW_DCMOTOR_STATE_STOP;
 800365c:	71a6      	strb	r6, [r4, #6]
	}

	Hw_Timer_Set  ( HW_TIMER_CH_DCMOTOR, 1, LOOP_TIME, Hw_DcMotor_Tick, NULL );
 800365e:	47b8      	blx	r7
	Hw_Timer_Start( HW_TIMER_CH_DCMOTOR );
 8003660:	f243 33e1 	movw	r3, #13281	; 0x33e1
 8003664:	2006      	movs	r0, #6
 8003666:	f6c0 0300 	movt	r3, #2048	; 0x800
 800366a:	4798      	blx	r3
}
 800366c:	b002      	add	sp, #8
 800366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003672:	bf00      	nop

08003674 <Hw_DcMotor_Tick>:




void Hw_DcMotor_Tick( void )
{
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	4d27      	ldr	r5, [pc, #156]	; (8003714 <Hw_DcMotor_Tick+0xa0>)
 8003678:	882c      	ldrh	r4, [r5, #0]
		}
		else
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;
 800367a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800367e:	0058      	lsls	r0, r3, #1
 8003680:	b286      	uxth	r6, r0
	static u16 Cnt = 0;


	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
 8003682:	b19c      	cbz	r4, 80036ac <Hw_DcMotor_Tick+0x38>
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
 8003684:	4f24      	ldr	r7, [pc, #144]	; (8003718 <Hw_DcMotor_Tick+0xa4>)
 8003686:	88b9      	ldrh	r1, [r7, #4]
 8003688:	42b1      	cmp	r1, r6
 800368a:	d202      	bcs.n	8003692 <Hw_DcMotor_Tick+0x1e>
 800368c:	78ba      	ldrb	r2, [r7, #2]
 800368e:	2a01      	cmp	r2, #1
 8003690:	d039      	beq.n	8003706 <Hw_DcMotor_Tick+0x92>
 8003692:	8979      	ldrh	r1, [r7, #10]
 8003694:	4f20      	ldr	r7, [pc, #128]	; (8003718 <Hw_DcMotor_Tick+0xa4>)
 8003696:	42b1      	cmp	r1, r6
 8003698:	d321      	bcc.n	80036de <Hw_DcMotor_Tick+0x6a>
			}
		}
	}


	Cnt++;
 800369a:	3401      	adds	r4, #1
 800369c:	b2a4      	uxth	r4, r4

	if( Cnt >= HW_DCMOTOR_MAX_CNT ) Cnt = 0;
 800369e:	2c09      	cmp	r4, #9
			}
		}
	}


	Cnt++;
 80036a0:	802c      	strh	r4, [r5, #0]

	if( Cnt >= HW_DCMOTOR_MAX_CNT ) Cnt = 0;
 80036a2:	d91b      	bls.n	80036dc <Hw_DcMotor_Tick+0x68>
 80036a4:	491b      	ldr	r1, [pc, #108]	; (8003714 <Hw_DcMotor_Tick+0xa0>)
 80036a6:	2000      	movs	r0, #0
 80036a8:	8008      	strh	r0, [r1, #0]
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
 80036ac:	4e1a      	ldr	r6, [pc, #104]	; (8003718 <Hw_DcMotor_Tick+0xa4>)
 80036ae:	88b2      	ldrh	r2, [r6, #4]
 80036b0:	b112      	cbz	r2, 80036b8 <Hw_DcMotor_Tick+0x44>
 80036b2:	7871      	ldrb	r1, [r6, #1]
 80036b4:	2902      	cmp	r1, #2
 80036b6:	d120      	bne.n	80036fa <Hw_DcMotor_Tick+0x86>
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 80036b8:	2000      	movs	r0, #0
 80036ba:	4b18      	ldr	r3, [pc, #96]	; (800371c <Hw_DcMotor_Tick+0xa8>)
				Hw_DcMotor_State[i].Pin = FALSE;
 80036bc:	2400      	movs	r4, #0
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 80036be:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 80036c0:	70b4      	strb	r4, [r6, #2]

	for( i=0; i<HW_DCMOTOR_MAX_CH; i++ )
	{
		if( Cnt == 0 )
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
 80036c2:	8971      	ldrh	r1, [r6, #10]
 80036c4:	4c14      	ldr	r4, [pc, #80]	; (8003718 <Hw_DcMotor_Tick+0xa4>)
 80036c6:	b111      	cbz	r1, 80036ce <Hw_DcMotor_Tick+0x5a>
 80036c8:	79e1      	ldrb	r1, [r4, #7]
 80036ca:	2902      	cmp	r1, #2
 80036cc:	d10f      	bne.n	80036ee <Hw_DcMotor_Tick+0x7a>
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
				Hw_DcMotor_State[i].Pin = TRUE;
			}
			else
			{
				Hw_DcMotor_Stop(i);
 80036ce:	2001      	movs	r0, #1
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <Hw_DcMotor_Tick+0xa8>)
 80036d2:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 80036d4:	2200      	movs	r2, #0
 80036d6:	7232      	strb	r2, [r6, #8]
			}
		}
	}


	Cnt++;
 80036d8:	2101      	movs	r1, #1
 80036da:	8029      	strh	r1, [r5, #0]
 80036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			//-- 카운트 값을 0~100% 값으로 변환
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
 80036de:	7a38      	ldrb	r0, [r7, #8]
 80036e0:	2801      	cmp	r0, #1
 80036e2:	d1da      	bne.n	800369a <Hw_DcMotor_Tick+0x26>
			{
				Hw_DcMotor_Stop(i);
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <Hw_DcMotor_Tick+0xa8>)
 80036e6:	4790      	blx	r2
				Hw_DcMotor_State[i].Pin = FALSE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	723b      	strb	r3, [r7, #8]
 80036ec:	e7d5      	b.n	800369a <Hw_DcMotor_Tick+0x26>
	{
		if( Cnt == 0 )
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
			{
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
 80036ee:	2001      	movs	r0, #1
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <Hw_DcMotor_Tick+0xac>)
 80036f2:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = TRUE;
 80036f4:	2001      	movs	r0, #1
 80036f6:	7220      	strb	r0, [r4, #8]
 80036f8:	e7ee      	b.n	80036d8 <Hw_DcMotor_Tick+0x64>
	{
		if( Cnt == 0 )
		{
			if( Hw_DcMotor_State[i].Speed > 0 && Hw_DcMotor_State[i].Dir != HW_DCMOTOR_STOP )
			{
				Hw_DcMotor_Run( i, Hw_DcMotor_State[i].Dir );
 80036fa:	4620      	mov	r0, r4
 80036fc:	4a08      	ldr	r2, [pc, #32]	; (8003720 <Hw_DcMotor_Tick+0xac>)
 80036fe:	4790      	blx	r2
				Hw_DcMotor_State[i].Pin = TRUE;
 8003700:	2001      	movs	r0, #1
 8003702:	70b0      	strb	r0, [r6, #2]
 8003704:	e7dd      	b.n	80036c2 <Hw_DcMotor_Tick+0x4e>
			//
			DutyRatio = Cnt*HW_DCMOTOR_MAX_PWM/HW_DCMOTOR_MAX_CNT;

			if( DutyRatio > Hw_DcMotor_State[i].Speed && Hw_DcMotor_State[i].Pin == TRUE )
			{
				Hw_DcMotor_Stop(i);
 8003706:	2000      	movs	r0, #0
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <Hw_DcMotor_Tick+0xa8>)
 800370a:	4798      	blx	r3
				Hw_DcMotor_State[i].Pin = FALSE;
 800370c:	2000      	movs	r0, #0
 800370e:	70b8      	strb	r0, [r7, #2]
 8003710:	e7bf      	b.n	8003692 <Hw_DcMotor_Tick+0x1e>
 8003712:	bf00      	nop
 8003714:	20000ab6 	.word	0x20000ab6
 8003718:	20001394 	.word	0x20001394
 800371c:	08003559 	.word	0x08003559
 8003720:	080034e9 	.word	0x080034e9

08003724 <Hw_DcMotor_Handle>:
void Hw_DcMotor_Handle( s16 SpeedLeft, s16 SpeedRight )
{
	u16 Pwm;


	if( SpeedLeft  >  HW_DCMOTOR_MAX_PWM )	SpeedLeft  =  HW_DCMOTOR_MAX_PWM;
 8003724:	2864      	cmp	r0, #100	; 0x64
 8003726:	dc17      	bgt.n	8003758 <Hw_DcMotor_Handle+0x34>
	if( SpeedLeft  < -HW_DCMOTOR_MAX_PWM )	SpeedLeft  = -HW_DCMOTOR_MAX_PWM;
 8003728:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800372c:	4298      	cmp	r0, r3
 800372e:	bfb8      	it	lt
 8003730:	4618      	movlt	r0, r3
	if( SpeedRight >  HW_DCMOTOR_MAX_PWM )	SpeedRight =  HW_DCMOTOR_MAX_PWM;
 8003732:	2964      	cmp	r1, #100	; 0x64
 8003734:	dc13      	bgt.n	800375e <Hw_DcMotor_Handle+0x3a>
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;
 8003736:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800373a:	4291      	cmp	r1, r2
 800373c:	bfb8      	it	lt
 800373e:	4611      	movlt	r1, r2


	if( SpeedLeft > 0 )
 8003740:	2800      	cmp	r0, #0
 8003742:	dd0f      	ble.n	8003764 <Hw_DcMotor_Handle+0x40>
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <Hw_DcMotor_Handle+0x7c>)
 8003746:	8098      	strh	r0, [r3, #4]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003748:	2000      	movs	r0, #0
 800374a:	7058      	strb	r0, [r3, #1]
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 800374c:	2900      	cmp	r1, #0
 800374e:	dd0f      	ble.n	8003770 <Hw_DcMotor_Handle+0x4c>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003750:	2200      	movs	r2, #0
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8003752:	8159      	strh	r1, [r3, #10]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003754:	71da      	strb	r2, [r3, #7]
 8003756:	4770      	bx	lr
void Hw_DcMotor_Handle( s16 SpeedLeft, s16 SpeedRight )
{
	u16 Pwm;


	if( SpeedLeft  >  HW_DCMOTOR_MAX_PWM )	SpeedLeft  =  HW_DCMOTOR_MAX_PWM;
 8003758:	2064      	movs	r0, #100	; 0x64
	if( SpeedLeft  < -HW_DCMOTOR_MAX_PWM )	SpeedLeft  = -HW_DCMOTOR_MAX_PWM;
	if( SpeedRight >  HW_DCMOTOR_MAX_PWM )	SpeedRight =  HW_DCMOTOR_MAX_PWM;
 800375a:	2964      	cmp	r1, #100	; 0x64
 800375c:	ddeb      	ble.n	8003736 <Hw_DcMotor_Handle+0x12>
 800375e:	2164      	movs	r1, #100	; 0x64
	if( SpeedRight < -HW_DCMOTOR_MAX_PWM )	SpeedRight = -HW_DCMOTOR_MAX_PWM;


	if( SpeedLeft > 0 )
 8003760:	2800      	cmp	r0, #0
 8003762:	dcef      	bgt.n	8003744 <Hw_DcMotor_Handle+0x20>
		Hw_DcMotor_SetPwm( HW_DCMOTOR_LD, Pwm );		
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_FOR );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
 8003764:	d111      	bne.n	800378a <Hw_DcMotor_Handle+0x66>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <Hw_DcMotor_Handle+0x7c>)
 8003768:	2002      	movs	r0, #2
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 800376a:	2900      	cmp	r1, #0
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800376c:	7058      	strb	r0, [r3, #1]
		Hw_DcMotor_SetDir( HW_DCMOTOR_LU, HW_DCMOTOR_STOP );
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_STOP );				
	}


	if( SpeedRight > 0 )
 800376e:	dcef      	bgt.n	8003750 <Hw_DcMotor_Handle+0x2c>
		Hw_DcMotor_SetPwm( HW_DCMOTOR_RD, Pwm );		
		Hw_DcMotor_SetDir( HW_DCMOTOR_RU, HW_DCMOTOR_FOR );
		Hw_DcMotor_SetDir( HW_DCMOTOR_RD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedRight < 0 )
 8003770:	d102      	bne.n	8003778 <Hw_DcMotor_Handle+0x54>
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003772:	2102      	movs	r1, #2
 8003774:	71d9      	strb	r1, [r3, #7]
 8003776:	4770      	bx	lr
		Hw_DcMotor_SetDir( HW_DCMOTOR_RD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedRight < 0 )
	{
		Pwm = -SpeedRight;
 8003778:	424a      	negs	r2, r1
 800377a:	b290      	uxth	r0, r2
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800377c:	2864      	cmp	r0, #100	; 0x64
 800377e:	bf28      	it	cs
 8003780:	2064      	movcs	r0, #100	; 0x64
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003782:	2101      	movs	r1, #1
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8003784:	8158      	strh	r0, [r3, #10]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003786:	71d9      	strb	r1, [r3, #7]
 8003788:	4770      	bx	lr
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
	{
		Pwm = -SpeedLeft;
 800378a:	4242      	negs	r2, r0
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <Hw_DcMotor_Handle+0x7c>)
		Hw_DcMotor_SetDir( HW_DCMOTOR_LD, HW_DCMOTOR_FOR );		
	}
	else
	if( SpeedLeft < 0 )
	{
		Pwm = -SpeedLeft;
 800378e:	b290      	uxth	r0, r2
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8003790:	2864      	cmp	r0, #100	; 0x64
 8003792:	bf28      	it	cs
 8003794:	2064      	movcs	r0, #100	; 0x64
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 8003796:	2201      	movs	r2, #1
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	if( Pwm > HW_DCMOTOR_MAX_PWM ) Pwm = HW_DCMOTOR_MAX_PWM;

	Hw_DcMotor_State[Ch].Speed = Pwm;
 8003798:	8098      	strh	r0, [r3, #4]
---------------------------------------------------------------------------*/
void Hw_DcMotor_SetDir( u8 Ch, u8 Dir  )
{
	if( Ch >= HW_DCMOTOR_MAX_CH ) return;

	Hw_DcMotor_State[Ch].Dir = Dir;
 800379a:	705a      	strb	r2, [r3, #1]
 800379c:	e7d6      	b.n	800374c <Hw_DcMotor_Handle+0x28>
 800379e:	bf00      	nop
 80037a0:	20001394 	.word	0x20001394

080037a4 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 80037a4:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <EP1_IN_Callback+0x58>)
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	2a01      	cmp	r2, #1
 80037ac:	d000      	beq.n	80037b0 <EP1_IN_Callback+0xc>
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 80037b0:	4c13      	ldr	r4, [pc, #76]	; (8003800 <EP1_IN_Callback+0x5c>)
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	b300      	cbz	r0, 80037f8 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 80037b6:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 80037ba:	d814      	bhi.n	80037e6 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80037bc:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 80037be:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 80037c0:	1808      	adds	r0, r1, r0
 80037c2:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 80037c4:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 80037c6:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 80037c8:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80037ca:	480f      	ldr	r0, [pc, #60]	; (8003808 <EP1_IN_Callback+0x64>)
 80037cc:	21c0      	movs	r1, #192	; 0xc0
 80037ce:	18c0      	adds	r0, r0, r3
 80037d0:	462a      	mov	r2, r5
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <EP1_IN_Callback+0x68>)
 80037d4:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 80037d6:	2001      	movs	r0, #1
 80037d8:	4629      	mov	r1, r5
 80037da:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <EP1_IN_Callback+0x6c>)
 80037dc:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 80037de:	2001      	movs	r0, #1
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <EP1_IN_Callback+0x70>)
 80037e2:	4788      	blx	r1
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80037e6:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80037e8:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 80037ea:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 80037ee:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 80037f0:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 80037f2:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80037f4:	2540      	movs	r5, #64	; 0x40
 80037f6:	e7e8      	b.n	80037ca <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 80037f8:	7018      	strb	r0, [r3, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	20000ad8 	.word	0x20000ad8
 8003800:	20000ae4 	.word	0x20000ae4
 8003804:	20000ae0 	.word	0x20000ae0
 8003808:	20001408 	.word	0x20001408
 800380c:	08004dfd 	.word	0x08004dfd
 8003810:	080050ad 	.word	0x080050ad
 8003814:	08004f71 	.word	0x08004f71

08003818 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8003818:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800381a:	f241 34a0 	movw	r4, #5024	; 0x13a0
 800381e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003822:	f245 136d 	movw	r3, #20845	; 0x516d
 8003826:	4621      	mov	r1, r4
 8003828:	f6c0 0300 	movt	r3, #2048	; 0x800
 800382c:	2003      	movs	r0, #3
 800382e:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8003830:	f244 222d 	movw	r2, #16941	; 0x422d
 8003834:	b2c1      	uxtb	r1, r0
 8003836:	f6c0 0200 	movt	r2, #2048	; 0x800
 800383a:	4620      	mov	r0, r4
 800383c:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800383e:	f644 7195 	movw	r1, #20373	; 0x4f95
 8003842:	2003      	movs	r0, #3
 8003844:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003848:	4788      	blx	r1
 800384a:	bd10      	pop	{r4, pc}

0800384c <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 800384c:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <SOF_Callback+0x24>)
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	2805      	cmp	r0, #5
 8003854:	d000      	beq.n	8003858 <SOF_Callback+0xc>
 8003856:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <SOF_Callback+0x28>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	1c51      	adds	r1, r2, #1
 800385e:	2a05      	cmp	r2, #5
 8003860:	6019      	str	r1, [r3, #0]
 8003862:	d1f8      	bne.n	8003856 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8003864:	2000      	movs	r0, #0
 8003866:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <SOF_Callback+0x2c>)
 800386a:	4798      	blx	r3
 800386c:	e7f3      	b.n	8003856 <SOF_Callback+0xa>
 800386e:	bf00      	nop
 8003870:	20000acc 	.word	0x20000acc
 8003874:	20000ab8 	.word	0x20000ab8
 8003878:	080042d5 	.word	0x080042d5

0800387c <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800387c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003880:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003884:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8003886:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8003888:	4c8f      	ldr	r4, [pc, #572]	; (8003ac8 <USB_Istr+0x24c>)
 800388a:	b298      	uxth	r0, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800388c:	4d8f      	ldr	r5, [pc, #572]	; (8003acc <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800388e:	8020      	strh	r0, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003890:	8821      	ldrh	r1, [r4, #0]
 8003892:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8003894:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8003896:	4019      	ands	r1, r3
 8003898:	f401 7000 	and.w	r0, r1, #512	; 0x200
 800389c:	b281      	uxth	r1, r0
 800389e:	2900      	cmp	r1, #0
 80038a0:	d168      	bne.n	8003974 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80038a2:	8822      	ldrh	r2, [r4, #0]
 80038a4:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 80038a8:	420b      	tst	r3, r1
 80038aa:	d15f      	bne.n	800396c <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80038ac:	8822      	ldrh	r2, [r4, #0]
 80038ae:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 80038b2:	420b      	tst	r3, r1
 80038b4:	d14e      	bne.n	8003954 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 80038b6:	8820      	ldrh	r0, [r4, #0]
 80038b8:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 80038bc:	4213      	tst	r3, r2
 80038be:	d006      	beq.n	80038ce <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 80038c0:	f645 4044 	movw	r0, #23620	; 0x5c44
 80038c4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80038c8:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 80038cc:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 80038ce:	8822      	ldrh	r2, [r4, #0]
 80038d0:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 80038d4:	4203      	tst	r3, r0
 80038d6:	d131      	bne.n	800393c <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 80038d8:	8820      	ldrh	r0, [r4, #0]
 80038da:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 80038de:	420b      	tst	r3, r1
 80038e0:	d00e      	beq.n	8003900 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 80038e2:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <USB_Istr+0x254>)
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	2a00      	cmp	r2, #0
 80038e8:	d125      	bne.n	8003936 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 80038ea:	2002      	movs	r0, #2
 80038ec:	4979      	ldr	r1, [pc, #484]	; (8003ad4 <USB_Istr+0x258>)
 80038ee:	4788      	blx	r1
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 80038f0:	f645 4244 	movw	r2, #23620	; 0x5c44
 80038f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80038f8:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80038fc:	882b      	ldrh	r3, [r5, #0]
 80038fe:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8003900:	8820      	ldrh	r0, [r4, #0]
 8003902:	f400 7280 	and.w	r2, r0, #256	; 0x100
 8003906:	4213      	tst	r3, r2
 8003908:	d013      	beq.n	8003932 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800390a:	f645 4344 	movw	r3, #23620	; 0x5c44
 800390e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8003912:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8003916:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800391a:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800391e:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8003920:	6802      	ldr	r2, [r0, #0]
 8003922:	0410      	lsls	r0, r2, #16
 8003924:	d432      	bmi.n	800398c <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8003926:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <USB_Istr+0x25c>)
 8003928:	2000      	movs	r0, #0
 800392a:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 800392c:	2007      	movs	r0, #7
 800392e:	4b69      	ldr	r3, [pc, #420]	; (8003ad4 <USB_Istr+0x258>)
 8003930:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8003932:	b009      	add	sp, #36	; 0x24
 8003934:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8003936:	4869      	ldr	r0, [pc, #420]	; (8003adc <USB_Istr+0x260>)
 8003938:	4780      	blx	r0
 800393a:	e7d9      	b.n	80038f0 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 800393c:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003940:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003944:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8003948:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 800394a:	2000      	movs	r0, #0
 800394c:	4a61      	ldr	r2, [pc, #388]	; (8003ad4 <USB_Istr+0x258>)
 800394e:	4790      	blx	r2
 8003950:	882b      	ldrh	r3, [r5, #0]
 8003952:	e7c1      	b.n	80038d8 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 8003954:	4a62      	ldr	r2, [pc, #392]	; (8003ae0 <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8003956:	f645 4344 	movw	r3, #23620	; 0x5c44
 800395a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800395e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003962:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 8003964:	6851      	ldr	r1, [r2, #4]
 8003966:	4788      	blx	r1
 8003968:	882b      	ldrh	r3, [r5, #0]
 800396a:	e7a4      	b.n	80038b6 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800396c:	485d      	ldr	r0, [pc, #372]	; (8003ae4 <USB_Istr+0x268>)
 800396e:	4780      	blx	r0
 8003970:	882b      	ldrh	r3, [r5, #0]
 8003972:	e79b      	b.n	80038ac <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8003974:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8003976:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 800397a:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	1c51      	adds	r1, r2, #1
 8003980:	b2c8      	uxtb	r0, r1
 8003982:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <USB_Istr+0x270>)
 8003986:	4798      	blx	r3
 8003988:	882b      	ldrh	r3, [r5, #0]
 800398a:	e78a      	b.n	80038a2 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 800398c:	4852      	ldr	r0, [pc, #328]	; (8003ad8 <USB_Istr+0x25c>)
 800398e:	6801      	ldr	r1, [r0, #0]
 8003990:	1c4a      	adds	r2, r1, #1
 8003992:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8003994:	6801      	ldr	r1, [r0, #0]
 8003996:	2903      	cmp	r1, #3
 8003998:	d9c8      	bls.n	800392c <USB_Istr+0xb0>
 800399a:	f645 4240 	movw	r2, #23616	; 0x5c40
 800399e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80039a2:	6811      	ldr	r1, [r2, #0]
 80039a4:	0709      	lsls	r1, r1, #28
 80039a6:	d4c1      	bmi.n	800392c <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 80039a8:	6815      	ldr	r5, [r2, #0]
 80039aa:	4951      	ldr	r1, [pc, #324]	; (8003af0 <USB_Istr+0x274>)
 80039ac:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80039ae:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 80039b2:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80039b4:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	f645 4404 	movw	r4, #23556	; 0x5c04
 80039be:	b2ad      	uxth	r5, r5
 80039c0:	9500      	str	r5, [sp, #0]
 80039c2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80039c6:	6825      	ldr	r5, [r4, #0]
 80039c8:	f645 4408 	movw	r4, #23560	; 0x5c08
 80039cc:	b2ad      	uxth	r5, r5
 80039ce:	9501      	str	r5, [sp, #4]
 80039d0:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80039d4:	6825      	ldr	r5, [r4, #0]
 80039d6:	f645 440c 	movw	r4, #23564	; 0x5c0c
 80039da:	b2ad      	uxth	r5, r5
 80039dc:	9502      	str	r5, [sp, #8]
 80039de:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80039e2:	6825      	ldr	r5, [r4, #0]
 80039e4:	f645 4410 	movw	r4, #23568	; 0x5c10
 80039e8:	b2ad      	uxth	r5, r5
 80039ea:	9503      	str	r5, [sp, #12]
 80039ec:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80039f0:	6825      	ldr	r5, [r4, #0]
 80039f2:	f645 4414 	movw	r4, #23572	; 0x5c14
 80039f6:	b2ad      	uxth	r5, r5
 80039f8:	9504      	str	r5, [sp, #16]
 80039fa:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80039fe:	6825      	ldr	r5, [r4, #0]
 8003a00:	f645 4418 	movw	r4, #23576	; 0x5c18
 8003a04:	b2ad      	uxth	r5, r5
 8003a06:	9505      	str	r5, [sp, #20]
 8003a08:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003a0c:	6825      	ldr	r5, [r4, #0]
 8003a0e:	f645 441c 	movw	r4, #23580	; 0x5c1c
 8003a12:	b2ad      	uxth	r5, r5
 8003a14:	9506      	str	r5, [sp, #24]
 8003a16:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003a1a:	6824      	ldr	r4, [r4, #0]
 8003a1c:	b2a4      	uxth	r4, r4
 8003a1e:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8003a20:	680c      	ldr	r4, [r1, #0]
 8003a22:	f044 0401 	orr.w	r4, r4, #1
 8003a26:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8003a28:	680c      	ldr	r4, [r1, #0]
 8003a2a:	b2a4      	uxth	r4, r4
 8003a2c:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8003a2e:	680c      	ldr	r4, [r1, #0]
 8003a30:	f024 0401 	bic.w	r4, r4, #1
 8003a34:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 8003a36:	6809      	ldr	r1, [r1, #0]
 8003a38:	b289      	uxth	r1, r1
 8003a3a:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	f645 4244 	movw	r2, #23620	; 0x5c44
 8003a42:	0549      	lsls	r1, r1, #21
 8003a44:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003a48:	d5f8      	bpl.n	8003a3c <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8003a4a:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8003a4e:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8003a50:	9900      	ldr	r1, [sp, #0]
 8003a52:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8003a56:	b28a      	uxth	r2, r1
 8003a58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	9901      	ldr	r1, [sp, #4]
 8003a60:	f645 4304 	movw	r3, #23556	; 0x5c04
 8003a64:	b28a      	uxth	r2, r1
 8003a66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	9902      	ldr	r1, [sp, #8]
 8003a6e:	f645 4308 	movw	r3, #23560	; 0x5c08
 8003a72:	b28a      	uxth	r2, r1
 8003a74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	9903      	ldr	r1, [sp, #12]
 8003a7c:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8003a80:	b28a      	uxth	r2, r1
 8003a82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	9904      	ldr	r1, [sp, #16]
 8003a8a:	f645 4310 	movw	r3, #23568	; 0x5c10
 8003a8e:	b28a      	uxth	r2, r1
 8003a90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	9905      	ldr	r1, [sp, #20]
 8003a98:	f645 4314 	movw	r3, #23572	; 0x5c14
 8003a9c:	b28a      	uxth	r2, r1
 8003a9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	9906      	ldr	r1, [sp, #24]
 8003aa6:	f645 4318 	movw	r3, #23576	; 0x5c18
 8003aaa:	b28a      	uxth	r2, r1
 8003aac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	9907      	ldr	r1, [sp, #28]
 8003ab4:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8003ab8:	b28a      	uxth	r2, r1
 8003aba:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8003abe:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8003ac0:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 8003ac2:	6001      	str	r1, [r0, #0]
 8003ac4:	e732      	b.n	800392c <USB_Istr+0xb0>
 8003ac6:	bf00      	nop
 8003ac8:	200013e0 	.word	0x200013e0
 8003acc:	20001c3c 	.word	0x20001c3c
 8003ad0:	20000ad0 	.word	0x20000ad0
 8003ad4:	08003fa9 	.word	0x08003fa9
 8003ad8:	20000ac4 	.word	0x20000ac4
 8003adc:	08003dd9 	.word	0x08003dd9
 8003ae0:	2000005c 	.word	0x2000005c
 8003ae4:	080051a5 	.word	0x080051a5
 8003ae8:	20000ac0 	.word	0x20000ac0
 8003aec:	0800384d 	.word	0x0800384d
 8003af0:	20000abc 	.word	0x20000abc

08003af4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <Virtual_Com_Port_SetConfiguration+0x10>)
 8003af6:	7a98      	ldrb	r0, [r3, #10]
 8003af8:	b110      	cbz	r0, 8003b00 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8003afa:	4903      	ldr	r1, [pc, #12]	; (8003b08 <Virtual_Com_Port_SetConfiguration+0x14>)
 8003afc:	2205      	movs	r2, #5
 8003afe:	600a      	str	r2, [r1, #0]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20001c18 	.word	0x20001c18
 8003b08:	20000acc 	.word	0x20000acc

08003b0c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8003b0c:	f640 23cc 	movw	r3, #2764	; 0xacc
 8003b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b14:	2204      	movs	r2, #4
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <Virtual_Com_Port_Status_In+0x10>)
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	2a20      	cmp	r2, #32
 8003b22:	d101      	bne.n	8003b28 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8003b24:	2000      	movs	r0, #0
 8003b26:	7018      	strb	r0, [r3, #0]
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000ac8 	.word	0x20000ac8

08003b30 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop

08003b34 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8003b34:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8003b36:	b510      	push	{r4, lr}
 8003b38:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8003b3a:	d003      	beq.n	8003b44 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8003b3c:	2820      	cmp	r0, #32
 8003b3e:	d011      	beq.n	8003b64 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8003b40:	2002      	movs	r0, #2
 8003b42:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <Virtual_Com_Port_Data_Setup+0x50>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	7818      	ldrb	r0, [r3, #0]
 8003b4a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003b4e:	2921      	cmp	r1, #33	; 0x21
 8003b50:	d1f6      	bne.n	8003b40 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8003b52:	490d      	ldr	r1, [pc, #52]	; (8003b88 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003b54:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8003b56:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8003b58:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003b5a:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8003b5c:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8003b5e:	4788      	blx	r1
  return USB_SUCCESS;
 8003b60:	4620      	mov	r0, r4
 8003b62:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <Virtual_Com_Port_Data_Setup+0x50>)
 8003b66:	6811      	ldr	r1, [r2, #0]
 8003b68:	7808      	ldrb	r0, [r1, #0]
 8003b6a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003b6e:	2921      	cmp	r1, #33	; 0x21
 8003b70:	d003      	beq.n	8003b7a <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8003b74:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003b76:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8003b78:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8003b7a:	4c04      	ldr	r4, [pc, #16]	; (8003b8c <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8003b7e:	7023      	strb	r3, [r4, #0]
 8003b80:	e7e8      	b.n	8003b54 <Virtual_Com_Port_Data_Setup+0x20>
 8003b82:	bf00      	nop
 8003b84:	20001c38 	.word	0x20001c38
 8003b88:	08003bc9 	.word	0x08003bc9
 8003b8c:	20000ac8 	.word	0x20000ac8
 8003b90:	08003be1 	.word	0x08003be1

08003b94 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <Virtual_Com_Port_NoData_Setup+0x20>)
 8003b96:	6819      	ldr	r1, [r3, #0]
 8003b98:	780a      	ldrb	r2, [r1, #0]
 8003b9a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8003b9e:	2b21      	cmp	r3, #33	; 0x21
 8003ba0:	d001      	beq.n	8003ba6 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8003ba2:	2002      	movs	r0, #2
}
 8003ba4:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8003ba6:	2802      	cmp	r0, #2
 8003ba8:	d001      	beq.n	8003bae <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8003baa:	2822      	cmp	r0, #34	; 0x22
 8003bac:	d1f9      	bne.n	8003ba2 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8003bae:	2000      	movs	r0, #0
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20001c38 	.word	0x20001c38

08003bb8 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8003bb8:	b109      	cbz	r1, 8003bbe <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8003bba:	2002      	movs	r0, #2
 8003bbc:	4770      	bx	lr
  }
  else if (Interface > 1)
 8003bbe:	2801      	cmp	r0, #1
 8003bc0:	d8fb      	bhi.n	8003bba <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8003bc2:	4608      	mov	r0, r1
}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop

08003bc8 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8003bc8:	b108      	cbz	r0, 8003bce <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8003bca:	4803      	ldr	r0, [pc, #12]	; (8003bd8 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8003bcc:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8003bce:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <Virtual_Com_Port_GetLineCoding+0x14>)
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	820a      	strh	r2, [r1, #16]
    return NULL;
 8003bd6:	4770      	bx	lr
 8003bd8:	200000d8 	.word	0x200000d8
 8003bdc:	20001c38 	.word	0x20001c38

08003be0 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8003be0:	b108      	cbz	r0, 8003be6 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8003be2:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8003be4:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <Virtual_Com_Port_SetLineCoding+0x14>)
 8003be8:	2208      	movs	r2, #8
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	820a      	strh	r2, [r1, #16]
    return NULL;
 8003bee:	4770      	bx	lr
 8003bf0:	200000d8 	.word	0x200000d8
 8003bf4:	20001c38 	.word	0x20001c38

08003bf8 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8003bf8:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 8003c00:	2a04      	cmp	r2, #4
 8003c02:	d805      	bhi.n	8003c10 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8003c06:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8003c0a:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8003c0c:	4790      	blx	r2
 8003c0e:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8003c10:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8003c12:	bd08      	pop	{r3, pc}
 8003c14:	20001c38 	.word	0x20001c38
 8003c18:	200000b8 	.word	0x200000b8
 8003c1c:	080047c5 	.word	0x080047c5

08003c20 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8003c20:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8003c22:	f240 0154 	movw	r1, #84	; 0x54
 8003c26:	f244 73c5 	movw	r3, #18373	; 0x47c5
 8003c2a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003c2e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003c32:	4798      	blx	r3
}
 8003c34:	bd08      	pop	{r3, pc}
 8003c36:	bf00      	nop

08003c38 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8003c38:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8003c3a:	f240 01b0 	movw	r1, #176	; 0xb0
 8003c3e:	f244 73c5 	movw	r3, #18373	; 0x47c5
 8003c42:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003c46:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003c4a:	4798      	blx	r3
}
 8003c4c:	bd08      	pop	{r3, pc}
 8003c4e:	bf00      	nop

08003c50 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003c50:	f641 4238 	movw	r2, #7224	; 0x1c38

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003c54:	f64d 53d4 	movw	r3, #56788	; 0xddd4
 8003c58:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003c5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003c60:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003c62:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8003c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003c68:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8003c6a:	f644 65c5 	movw	r5, #20165	; 0x4ec5
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8003c6e:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8003c70:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8003c72:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8003c74:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003c78:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8003c7a:	f644 66d9 	movw	r6, #20185	; 0x4ed9
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8003c7e:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8003c80:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003c84:	4620      	mov	r0, r4
 8003c86:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8003c8a:	f644 65f1 	movw	r5, #20209	; 0x4ef1
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8003c8e:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8003c90:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003c94:	2110      	movs	r1, #16
 8003c96:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8003c98:	f245 0a45 	movw	sl, #20549	; 0x5045

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8003c9c:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8003c9e:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8003ca2:	2140      	movs	r1, #64	; 0x40
 8003ca4:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8003ca6:	f245 0821 	movw	r8, #20513	; 0x5021
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8003caa:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8003cac:	f6c0 0800 	movt	r8, #2048	; 0x800
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 8003cb4:	f644 77b9 	movw	r7, #20409	; 0x4fb9

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8003cb8:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8003cba:	f6c0 0700 	movt	r7, #2048	; 0x800
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8003cc2:	f240 025c 	movw	r2, #92	; 0x5c
 8003cc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003cca:	f245 09cd 	movw	r9, #20685	; 0x50cd
 8003cce:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003cd2:	f6c0 0900 	movt	r9, #2048	; 0x800
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8003cda:	f644 7395 	movw	r3, #20373	; 0x4f95
 8003cde:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	4621      	mov	r1, r4
 8003cea:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8003cec:	2001      	movs	r0, #1
 8003cee:	21c0      	movs	r1, #192	; 0xc0
 8003cf0:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8003cf2:	f644 7731 	movw	r7, #20273	; 0x4f31
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8003cfc:	f6c0 0700 	movt	r7, #2048	; 0x800
 8003d00:	2001      	movs	r0, #1
 8003d02:	4621      	mov	r1, r4
 8003d04:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8003d06:	2002      	movs	r0, #2
 8003d08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d0c:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8003d0e:	2002      	movs	r0, #2
 8003d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d14:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8003d16:	2002      	movs	r0, #2
 8003d18:	4621      	mov	r1, r4
 8003d1a:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	2120      	movs	r1, #32
 8003d20:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8003d22:	2003      	movs	r0, #3
 8003d24:	4621      	mov	r1, r4
 8003d26:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003d2e:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8003d30:	2003      	movs	r0, #3
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8003d36:	2003      	movs	r0, #3
 8003d38:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003d3c:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8003d3e:	4621      	mov	r1, r4
 8003d40:	2003      	movs	r0, #3
 8003d42:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8003d44:	f644 41a1 	movw	r1, #19617	; 0x4ca1
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003d4e:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8003d50:	f640 20cc 	movw	r0, #2764	; 0xacc
 8003d54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d58:	2201      	movs	r2, #1
 8003d5a:	6002      	str	r2, [r0, #0]
 8003d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d60 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8003d60:	f244 33b1 	movw	r3, #17329	; 0x43b1
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8003d64:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8003d66:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003d6a:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8003d6c:	f641 4038 	movw	r0, #7224	; 0x1c38
 8003d70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8003d78:	f643 519d 	movw	r1, #15773	; 0x3d9d

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8003d7c:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8003d7e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003d82:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8003d84:	f245 1341 	movw	r3, #20801	; 0x5141
 8003d88:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003d8c:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8003d8e:	f640 20cc 	movw	r0, #2764	; 0xacc
 8003d92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d96:	6004      	str	r4, [r0, #0]
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	bf00      	nop

08003d9c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8003d9c:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8003d9e:	f244 2311 	movw	r3, #16913	; 0x4211
 8003da2:	2001      	movs	r0, #1
 8003da4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003da8:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003daa:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003dae:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003db2:	f641 423c 	movw	r2, #7228	; 0x1c3c
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003db6:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8003dba:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003dbc:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003dc0:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003dc2:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003dc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8003dca:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8003dcc:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8003dce:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003dd0:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8003dd2:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8003dd4:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}

08003dd8 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8003dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8003dda:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8003ddc:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003dde:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003de2:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8003de6:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003de8:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003dec:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003df0:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003df2:	6814      	ldr	r4, [r2, #0]
 8003df4:	4960      	ldr	r1, [pc, #384]	; (8003f78 <Suspend+0x1a0>)
 8003df6:	b2a5      	uxth	r5, r4
 8003df8:	f645 4604 	movw	r6, #23556	; 0x5c04
 8003dfc:	600d      	str	r5, [r1, #0]
 8003dfe:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8003e02:	6837      	ldr	r7, [r6, #0]
 8003e04:	f645 4208 	movw	r2, #23560	; 0x5c08
 8003e08:	b2bc      	uxth	r4, r7
 8003e0a:	604c      	str	r4, [r1, #4]
 8003e0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e10:	6815      	ldr	r5, [r2, #0]
 8003e12:	f645 460c 	movw	r6, #23564	; 0x5c0c
 8003e16:	b2af      	uxth	r7, r5
 8003e18:	608f      	str	r7, [r1, #8]
 8003e1a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8003e1e:	6834      	ldr	r4, [r6, #0]
 8003e20:	f645 4210 	movw	r2, #23568	; 0x5c10
 8003e24:	b2a5      	uxth	r5, r4
 8003e26:	60cd      	str	r5, [r1, #12]
 8003e28:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e2c:	6816      	ldr	r6, [r2, #0]
 8003e2e:	f645 4714 	movw	r7, #23572	; 0x5c14
 8003e32:	b2b4      	uxth	r4, r6
 8003e34:	610c      	str	r4, [r1, #16]
 8003e36:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8003e3a:	683d      	ldr	r5, [r7, #0]
 8003e3c:	f645 4218 	movw	r2, #23576	; 0x5c18
 8003e40:	b2ae      	uxth	r6, r5
 8003e42:	614e      	str	r6, [r1, #20]
 8003e44:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e48:	6817      	ldr	r7, [r2, #0]
 8003e4a:	f645 451c 	movw	r5, #23580	; 0x5c1c
 8003e4e:	b2bc      	uxth	r4, r7
 8003e50:	618c      	str	r4, [r1, #24]
 8003e52:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8003e56:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8003e58:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003e5a:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8003e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003e62:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003e64:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003e66:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8003e6a:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003e6e:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003e72:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003e74:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8003e78:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8003e7a:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8003e7c:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003e7e:	6802      	ldr	r2, [r0, #0]
 8003e80:	f645 4344 	movw	r3, #23620	; 0x5c44
 8003e84:	0552      	lsls	r2, r2, #21
 8003e86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e8a:	d5f8      	bpl.n	8003e7e <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8003e8c:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003e90:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003e92:	6808      	ldr	r0, [r1, #0]
 8003e94:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003e98:	b280      	uxth	r0, r0
 8003e9a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e9e:	6010      	str	r0, [r2, #0]
 8003ea0:	6848      	ldr	r0, [r1, #4]
 8003ea2:	f645 4204 	movw	r2, #23556	; 0x5c04
 8003ea6:	b280      	uxth	r0, r0
 8003ea8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003eac:	6010      	str	r0, [r2, #0]
 8003eae:	6888      	ldr	r0, [r1, #8]
 8003eb0:	f645 4208 	movw	r2, #23560	; 0x5c08
 8003eb4:	b280      	uxth	r0, r0
 8003eb6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003eba:	6010      	str	r0, [r2, #0]
 8003ebc:	68c8      	ldr	r0, [r1, #12]
 8003ebe:	f645 420c 	movw	r2, #23564	; 0x5c0c
 8003ec2:	b280      	uxth	r0, r0
 8003ec4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ec8:	6010      	str	r0, [r2, #0]
 8003eca:	6908      	ldr	r0, [r1, #16]
 8003ecc:	f645 4210 	movw	r2, #23568	; 0x5c10
 8003ed0:	b280      	uxth	r0, r0
 8003ed2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ed6:	6010      	str	r0, [r2, #0]
 8003ed8:	6948      	ldr	r0, [r1, #20]
 8003eda:	f645 4214 	movw	r2, #23572	; 0x5c14
 8003ede:	b280      	uxth	r0, r0
 8003ee0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ee4:	6010      	str	r0, [r2, #0]
 8003ee6:	6988      	ldr	r0, [r1, #24]
 8003ee8:	f645 4218 	movw	r2, #23576	; 0x5c18
 8003eec:	b280      	uxth	r0, r0
 8003eee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ef2:	6010      	str	r0, [r2, #0]
 8003ef4:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003ef6:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003efa:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003efe:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003f02:	b280      	uxth	r0, r0
 8003f04:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8003f08:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003f0c:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003f0e:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8003f10:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8003f12:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8003f16:	b284      	uxth	r4, r0
 8003f18:	f044 0004 	orr.w	r0, r4, #4
 8003f1c:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8003f1e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003f22:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8003f24:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8003f28:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8003f2a:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8003f2c:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8003f30:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8003f34:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8003f38:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8003f3a:	6820      	ldr	r0, [r4, #0]
 8003f3c:	f040 0004 	orr.w	r0, r0, #4
 8003f40:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	04c0      	lsls	r0, r0, #19
 8003f46:	d50f      	bpl.n	8003f68 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8003f48:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8003f4c:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8003f4e:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 8003f50:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003f54:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 8003f56:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8003f58:	9a01      	ldr	r2, [sp, #4]
 8003f5a:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8003f5c:	6821      	ldr	r1, [r4, #0]
 8003f5e:	f021 0004 	bic.w	r0, r1, #4
 8003f62:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8003f64:	b003      	add	sp, #12
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <Suspend+0x1a4>)
 8003f6a:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	f022 0104 	bic.w	r1, r2, #4
 8003f72:	6021      	str	r1, [r4, #0]
 8003f74:	e7f6      	b.n	8003f64 <Suspend+0x18c>
 8003f76:	bf00      	nop
 8003f78:	200013e8 	.word	0x200013e8
 8003f7c:	080043f5 	.word	0x080043f5

08003f80 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8003f80:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8003f82:	f645 4440 	movw	r4, #23616	; 0x5c40
 8003f86:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8003f8a:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8003f8c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8003f90:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003f92:	f244 1041 	movw	r0, #16705	; 0x4141
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8003f96:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003f98:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003f9c:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8003f9e:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 8003fa2:	6021      	str	r1, [r4, #0]
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	bf00      	nop

08003fa8 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8003fa8:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8003faa:	4c2b      	ldr	r4, [pc, #172]	; (8004058 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8003fac:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8003fae:	bf18      	it	ne
 8003fb0:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8003fb2:	7823      	ldrb	r3, [r4, #0]
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d819      	bhi.n	8003fec <Resume+0x44>
 8003fb8:	e8df f003 	tbb	[pc, r3]
 8003fbc:	2f2a221b 	.word	0x2f2a221b
 8003fc0:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8003fc2:	7860      	ldrb	r0, [r4, #1]
 8003fc4:	1e41      	subs	r1, r0, #1
 8003fc6:	b2ca      	uxtb	r2, r1
 8003fc8:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8003fca:	7863      	ldrb	r3, [r4, #1]
 8003fcc:	b983      	cbnz	r3, 8003ff0 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8003fce:	f645 4240 	movw	r2, #23616	; 0x5c40
 8003fd2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003fd6:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8003fd8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003fdc:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8003fde:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <Resume+0xb0>)
        remotewakeupon = 0;
 8003fe2:	491e      	ldr	r1, [pc, #120]	; (800405c <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 8003fe4:	2006      	movs	r0, #6
 8003fe6:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8003fe8:	600b      	str	r3, [r1, #0]
 8003fea:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8003fec:	2106      	movs	r1, #6
 8003fee:	7021      	strb	r1, [r4, #0]
 8003ff0:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	; (800405c <Resume+0xb4>)
 8003ff4:	6811      	ldr	r1, [r2, #0]
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	d028      	beq.n	800404c <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8003ffa:	2005      	movs	r0, #5
 8003ffc:	7020      	strb	r0, [r4, #0]
 8003ffe:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <Resume+0xb8>)
 8004002:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 8004006:	2104      	movs	r1, #4
      remotewakeupon = 1;
 8004008:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 800400a:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 800400c:	6018      	str	r0, [r3, #0]
      break;
 800400e:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004010:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 8004012:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8004014:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8004016:	7020      	strb	r0, [r4, #0]
      break;
 8004018:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800401a:	7862      	ldrb	r2, [r4, #1]
 800401c:	1e51      	subs	r1, r2, #1
 800401e:	b2cb      	uxtb	r3, r1
 8004020:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8004022:	7860      	ldrb	r0, [r4, #1]
 8004024:	2800      	cmp	r0, #0
 8004026:	d1e3      	bne.n	8003ff0 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8004028:	490b      	ldr	r1, [pc, #44]	; (8004058 <Resume+0xb0>)
 800402a:	2204      	movs	r2, #4
 800402c:	700a      	strb	r2, [r1, #0]
 800402e:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8004030:	f645 4340 	movw	r3, #23616	; 0x5c40
 8004034:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004038:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800403a:	b282      	uxth	r2, r0
 800403c:	f042 0110 	orr.w	r1, r2, #16
 8004040:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 8004042:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 8004044:	2305      	movs	r3, #5
 8004046:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8004048:	7060      	strb	r0, [r4, #1]
      break;
 800404a:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <Resume+0xb8>)
 800404e:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8004050:	2206      	movs	r2, #6
 8004052:	7022      	strb	r2, [r4, #0]
 8004054:	bd10      	pop	{r4, pc}
 8004056:	bf00      	nop
 8004058:	200013e4 	.word	0x200013e4
 800405c:	20000ad4 	.word	0x20000ad4
 8004060:	08003f81 	.word	0x08003f81

08004064 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8004064:	f240 4314 	movw	r3, #1044	; 0x414
 8004068:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800406c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	4770      	bx	lr

08004074 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8004074:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004076:	b38a      	cbz	r2, 80040dc <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8004078:	1e56      	subs	r6, r2, #1
 800407a:	b2f2      	uxtb	r2, r6
 800407c:	1c53      	adds	r3, r2, #1
 800407e:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004080:	0f03      	lsrs	r3, r0, #28
 8004082:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004084:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8004086:	2b09      	cmp	r3, #9
 8004088:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800408c:	d928      	bls.n	80040e0 <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800408e:	3337      	adds	r3, #55	; 0x37
 8004090:	700b      	strb	r3, [r1, #0]
 8004092:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8004094:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004096:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004098:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800409a:	d01f      	beq.n	80040dc <IntToUnicode+0x68>
 800409c:	b152      	cbz	r2, 80040b4 <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 800409e:	0f02      	lsrs	r2, r0, #28
 80040a0:	2a09      	cmp	r2, #9
 80040a2:	d913      	bls.n	80040cc <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80040a4:	3237      	adds	r2, #55	; 0x37
 80040a6:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80040a8:	18ca      	adds	r2, r1, r3
 80040aa:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80040ac:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80040ae:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80040b0:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80040b2:	d013      	beq.n	80040dc <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 80040b4:	0f05      	lsrs	r5, r0, #28
 80040b6:	2d09      	cmp	r5, #9
 80040b8:	d815      	bhi.n	80040e6 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80040ba:	3530      	adds	r5, #48	; 0x30
 80040bc:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80040be:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80040c0:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80040c2:	18cd      	adds	r5, r1, r3
 80040c4:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80040c6:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80040c8:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80040ca:	d8eb      	bhi.n	80040a4 <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80040cc:	3230      	adds	r2, #48	; 0x30
 80040ce:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80040d0:	18ca      	adds	r2, r1, r3
 80040d2:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80040d4:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80040d6:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80040d8:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80040da:	d1eb      	bne.n	80040b4 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80040dc:	bc70      	pop	{r4, r5, r6}
 80040de:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80040e0:	3330      	adds	r3, #48	; 0x30
 80040e2:	700b      	strb	r3, [r1, #0]
 80040e4:	e7d5      	b.n	8004092 <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80040e6:	3537      	adds	r5, #55	; 0x37
 80040e8:	54cd      	strb	r5, [r1, r3]
 80040ea:	e7e8      	b.n	80040be <IntToUnicode+0x4a>

080040ec <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80040ec:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80040ee:	f643 037d 	movw	r3, #14461	; 0x387d
 80040f2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80040f6:	4798      	blx	r3
 80040f8:	bd08      	pop	{r3, pc}
 80040fa:	bf00      	nop

080040fc <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 80040fc:	f241 0304 	movw	r3, #4100	; 0x1004
 8004100:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 800410a:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 8004112:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	6018      	str	r0, [r3, #0]
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop

0800411c <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800411c:	f241 0204 	movw	r2, #4100	; 0x1004
 8004120:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004124:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8004126:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800412a:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 800412e:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8004130:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 800413a:	6019      	str	r1, [r3, #0]
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <Leave_LowPowerMode+0x18>)
 8004142:	7a98      	ldrb	r0, [r3, #10]
 8004144:	b918      	cbnz	r0, 800414e <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8004146:	4905      	ldr	r1, [pc, #20]	; (800415c <Leave_LowPowerMode+0x1c>)
 8004148:	2201      	movs	r2, #1
 800414a:	600a      	str	r2, [r1, #0]
 800414c:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800414e:	4b03      	ldr	r3, [pc, #12]	; (800415c <Leave_LowPowerMode+0x1c>)
 8004150:	2005      	movs	r0, #5
 8004152:	6018      	str	r0, [r3, #0]
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20001c18 	.word	0x20001c18
 800415c:	20000acc 	.word	0x20000acc

08004160 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004160:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8004164:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004166:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800416a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800416e:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8004172:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8004174:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004178:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800417a:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800417e:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8004182:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8004184:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004188:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800418a:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800418e:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8004192:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8004194:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004198:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800419a:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800419e:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 80041a2:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80041a4:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80041a8:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80041aa:	f243 0425 	movw	r4, #12325	; 0x3025
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80041ae:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80041b2:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80041b4:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80041b6:	f244 01ed 	movw	r1, #16621	; 0x40ed
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80041ba:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80041be:	2090      	movs	r0, #144	; 0x90
 80041c0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041c4:	2200      	movs	r2, #0
 80041c6:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80041ca:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80041cc:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80041ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80041d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80041d6:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80041d8:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80041da:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 80041de:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80041e0:	f244 0165 	movw	r1, #16485	; 0x4065
 80041e4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041e8:	2200      	movs	r2, #0
 80041ea:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80041ec:	f24e 1004 	movw	r0, #57604	; 0xe104
 80041f0:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80041f4:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80041f6:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80041fa:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 80041fe:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8004200:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	bd38      	pop	{r3, r4, r5, pc}
 800420e:	bf00      	nop

08004210 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8004210:	f241 030c 	movw	r3, #4108	; 0x100c
 8004214:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004218:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 800421a:	b918      	cbnz	r0, 8004224 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 800421c:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8004220:	6018      	str	r0, [r3, #0]
 8004222:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8004224:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004228:	6019      	str	r1, [r3, #0]
 800422a:	4770      	bx	lr

0800422c <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800422c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004230:	4689      	mov	r9, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8004232:	b083      	sub	sp, #12
 8004234:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004236:	2900      	cmp	r1, #0
 8004238:	d045      	beq.n	80042c6 <USB_To_USART_Send_Data+0x9a>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800423a:	7803      	ldrb	r3, [r0, #0]
 800423c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80042d0 <USB_To_USART_Send_Data+0xa4>
 8004240:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8004244:	4f21      	ldr	r7, [pc, #132]	; (80042cc <USB_To_USART_Send_Data+0xa0>)
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004246:	f10d 0107 	add.w	r1, sp, #7
 800424a:	2005      	movs	r0, #5
 800424c:	f002 0501 	and.w	r5, r2, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004250:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004254:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 8004256:	f8d8 1000 	ldr.w	r1, [r8]
 800425a:	b111      	cbz	r1, 8004262 <USB_To_USART_Send_Data+0x36>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 800425c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004260:	4788      	blx	r1
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004262:	2401      	movs	r4, #1
 8004264:	454c      	cmp	r4, r9
 8004266:	d22e      	bcs.n	80042c6 <USB_To_USART_Send_Data+0x9a>
 8004268:	b17d      	cbz	r5, 800428a <USB_To_USART_Send_Data+0x5e>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800426a:	5d33      	ldrb	r3, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800426c:	2005      	movs	r0, #5
 800426e:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004272:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004276:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 8004278:	f8d8 2000 	ldr.w	r2, [r8]
 800427c:	b112      	cbz	r2, 8004284 <USB_To_USART_Send_Data+0x58>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 800427e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004282:	4790      	blx	r2
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8004284:	3401      	adds	r4, #1
 8004286:	454c      	cmp	r4, r9
 8004288:	d21d      	bcs.n	80042c6 <USB_To_USART_Send_Data+0x9a>
 800428a:	1c65      	adds	r5, r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800428c:	5d34      	ldrb	r4, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800428e:	f10d 0107 	add.w	r1, sp, #7
 8004292:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8004294:	f88d 4007 	strb.w	r4, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8004298:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 800429a:	f8d8 1000 	ldr.w	r1, [r8]
 800429e:	b111      	cbz	r1, 80042a6 <USB_To_USART_Send_Data+0x7a>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 80042a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80042a4:	4788      	blx	r1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80042a6:	5d73      	ldrb	r3, [r6, r5]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80042a8:	f10d 0107 	add.w	r1, sp, #7
 80042ac:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80042ae:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80042b2:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 80042b4:	f8d8 2000 	ldr.w	r2, [r8]
 80042b8:	b112      	cbz	r2, 80042c0 <USB_To_USART_Send_Data+0x94>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 80042ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80042be:	4790      	blx	r2
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80042c0:	1c6c      	adds	r4, r5, #1
 80042c2:	454c      	cmp	r4, r9
 80042c4:	d3e1      	bcc.n	800428a <USB_To_USART_Send_Data+0x5e>
    if( Hw_VCom_RxdFuncPtr != NULL )
    {
      Hw_VCom_RxdFuncPtr( UartData );      
    }
  }  
}
 80042c6:	b003      	add	sp, #12
 80042c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042cc:	08002f89 	.word	0x08002f89
 80042d0:	20001390 	.word	0x20001390

080042d4 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 80042d4:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80042d6:	4c20      	ldr	r4, [pc, #128]	; (8004358 <Handle_USBAsynchXfer+0x84>)
 80042d8:	7823      	ldrb	r3, [r4, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d023      	beq.n	8004326 <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 80042de:	4d1f      	ldr	r5, [pc, #124]	; (800435c <Handle_USBAsynchXfer+0x88>)
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e6:	d02c      	beq.n	8004342 <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <Handle_USBAsynchXfer+0x8c>)
 80042ea:	6811      	ldr	r1, [r2, #0]
 80042ec:	428b      	cmp	r3, r1
 80042ee:	d02f      	beq.n	8004350 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 80042f0:	d81a      	bhi.n	8004328 <Handle_USBAsynchXfer+0x54>
 80042f2:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80042f4:	1ace      	subs	r6, r1, r3
 80042f6:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80042f8:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80042fa:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80042fc:	d91b      	bls.n	8004336 <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80042fe:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8004300:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8004302:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8004304:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8004306:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800430a:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800430c:	1818      	adds	r0, r3, r0
 800430e:	4632      	mov	r2, r6
 8004310:	21c0      	movs	r1, #192	; 0xc0
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8004314:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8004316:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8004318:	4628      	mov	r0, r5
 800431a:	4631      	mov	r1, r6
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <Handle_USBAsynchXfer+0x9c>)
 800431e:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8004320:	4628      	mov	r0, r5
 8004322:	4914      	ldr	r1, [pc, #80]	; (8004374 <Handle_USBAsynchXfer+0xa0>)
 8004324:	4788      	blx	r1
 8004326:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8004328:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800432e:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8004330:	6016      	str	r6, [r2, #0]
 8004332:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8004334:	d8e3      	bhi.n	80042fe <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8004336:	18f1      	adds	r1, r6, r3
 8004338:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 800433a:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 800433c:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 800433e:	6015      	str	r5, [r2, #0]
 8004340:	e7e2      	b.n	8004308 <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004342:	4907      	ldr	r1, [pc, #28]	; (8004360 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8004344:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8004346:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8004348:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800434a:	b109      	cbz	r1, 8004350 <Handle_USBAsynchXfer+0x7c>
 800434c:	4603      	mov	r3, r0
 800434e:	e7d1      	b.n	80042f4 <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8004350:	2000      	movs	r0, #0
 8004352:	7020      	strb	r0, [r4, #0]
      return;
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	bf00      	nop
 8004358:	20000ad8 	.word	0x20000ad8
 800435c:	20000ae0 	.word	0x20000ae0
 8004360:	20000adc 	.word	0x20000adc
 8004364:	20000ae4 	.word	0x20000ae4
 8004368:	20001408 	.word	0x20001408
 800436c:	08004dfd 	.word	0x08004dfd
 8004370:	080050ad 	.word	0x080050ad
 8004374:	08004f71 	.word	0x08004f71

08004378 <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <USB_Send_Data+0x2c>)
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USB_Send_Data( u8 SendData )
{
 800437a:	b410      	push	{r4}
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	1c4a      	adds	r2, r1, #1
 8004380:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004384:	d20c      	bcs.n	80043a0 <USB_Send_Data+0x28>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <USB_Send_Data+0x30>)
 8004388:	4c08      	ldr	r4, [pc, #32]	; (80043ac <USB_Send_Data+0x34>)
 800438a:	6819      	ldr	r1, [r3, #0]
	USART_Rx_ptr_in++;
 800438c:	1c4a      	adds	r2, r1, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 800438e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 8004392:	5460      	strb	r0, [r4, r1]
	USART_Rx_ptr_in++;
 8004394:	601a      	str	r2, [r3, #0]
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 8004396:	d101      	bne.n	800439c <USB_Send_Data+0x24>
	{
		USART_Rx_ptr_in = 0;
 8004398:	2000      	movs	r0, #0
 800439a:	6018      	str	r0, [r3, #0]
	}
}
 800439c:	bc10      	pop	{r4}
 800439e:	4770      	bx	lr
 80043a0:	e7fe      	b.n	80043a0 <USB_Send_Data+0x28>
 80043a2:	bf00      	nop
 80043a4:	20000ae4 	.word	0x20000ae4
 80043a8:	20000adc 	.word	0x20000adc
 80043ac:	20001408 	.word	0x20001408

080043b0 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80043b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80043b2:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80043b6:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80043ba:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80043be:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80043c2:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80043c4:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80043c6:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80043ca:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80043ce:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80043d0:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80043d2:	d007      	beq.n	80043e4 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <Get_SerialNum+0x38>)
 80043d6:	2208      	movs	r2, #8
 80043d8:	4d04      	ldr	r5, [pc, #16]	; (80043ec <Get_SerialNum+0x3c>)
 80043da:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80043dc:	4620      	mov	r0, r4
 80043de:	4904      	ldr	r1, [pc, #16]	; (80043f0 <Get_SerialNum+0x40>)
 80043e0:	2204      	movs	r2, #4
 80043e2:	47a8      	blx	r5
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
 80043e6:	bf00      	nop
 80043e8:	20000002 	.word	0x20000002
 80043ec:	08004075 	.word	0x08004075
 80043f0:	20000012 	.word	0x20000012

080043f4 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 80043f4:	bf30      	wfi
 80043f6:	4770      	bx	lr

080043f8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80043f8:	b508      	push	{r3, lr}
  if (Length == 0)
 80043fa:	b138      	cbz	r0, 800440c <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <Standard_GetConfiguration+0x20>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	6801      	ldr	r1, [r0, #0]
 8004402:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8004404:	4a05      	ldr	r2, [pc, #20]	; (800441c <Standard_GetConfiguration+0x24>)
 8004406:	6810      	ldr	r0, [r2, #0]
 8004408:	300a      	adds	r0, #10
}
 800440a:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <Standard_GetConfiguration+0x24>)
 800440e:	2201      	movs	r2, #1
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8004414:	bd08      	pop	{r3, pc}
 8004416:	bf00      	nop
 8004418:	20001c34 	.word	0x20001c34
 800441c:	20001c38 	.word	0x20001c38

08004420 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8004420:	b508      	push	{r3, lr}
  if (Length == 0)
 8004422:	b138      	cbz	r0, 8004434 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <Standard_GetInterface+0x20>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	6881      	ldr	r1, [r0, #8]
 800442a:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <Standard_GetInterface+0x24>)
 800442e:	6810      	ldr	r0, [r2, #0]
 8004430:	300c      	adds	r0, #12
}
 8004432:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <Standard_GetInterface+0x24>)
 8004436:	2201      	movs	r2, #1
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800443c:	bd08      	pop	{r3, pc}
 800443e:	bf00      	nop
 8004440:	20001c34 	.word	0x20001c34
 8004444:	20001c38 	.word	0x20001c38

08004448 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8004448:	b508      	push	{r3, lr}
  if (Length == 0)
 800444a:	2800      	cmp	r0, #0
 800444c:	d03b      	beq.n	80044c6 <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8004450:	4823      	ldr	r0, [pc, #140]	; (80044e0 <Standard_GetStatus+0x98>)
 8004452:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004454:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8004456:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004458:	7813      	ldrb	r3, [r2, #0]
 800445a:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800445e:	d112      	bne.n	8004486 <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8004460:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8004462:	f003 0220 	and.w	r2, r3, #32
 8004466:	b2d1      	uxtb	r1, r2
 8004468:	bb59      	cbnz	r1, 80044c2 <Standard_GetStatus+0x7a>
 800446a:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	b2d9      	uxtb	r1, r3
 8004472:	b311      	cbz	r1, 80044ba <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8004474:	f042 0301 	orr.w	r3, r2, #1
 8004478:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800447a:	481a      	ldr	r0, [pc, #104]	; (80044e4 <Standard_GetStatus+0x9c>)
 800447c:	6801      	ldr	r1, [r0, #0]
 800447e:	690a      	ldr	r2, [r1, #16]
 8004480:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 8004482:	4817      	ldr	r0, [pc, #92]	; (80044e0 <Standard_GetStatus+0x98>)
 8004484:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004486:	2b01      	cmp	r3, #1
 8004488:	d016      	beq.n	80044b8 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800448a:	2b02      	cmp	r3, #2
 800448c:	d113      	bne.n	80044b6 <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800448e:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8004490:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8004494:	0093      	lsls	r3, r2, #2
 8004496:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800449a:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800449e:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80044a2:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80044a4:	d114      	bne.n	80044d0 <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80044a6:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 80044aa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80044ae:	d1e4      	bne.n	800447a <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80044b0:	2101      	movs	r1, #1
 80044b2:	7001      	strb	r1, [r0, #0]
 80044b4:	e7e1      	b.n	800447a <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 80044b6:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80044b8:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	7002      	strb	r2, [r0, #0]
 80044c0:	e7db      	b.n	800447a <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80044c2:	2202      	movs	r2, #2
 80044c4:	e7d2      	b.n	800446c <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <Standard_GetStatus+0x94>)
 80044c8:	2202      	movs	r2, #2
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	820a      	strh	r2, [r1, #16]
    return 0;
 80044ce:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80044d0:	f001 0330 	and.w	r3, r1, #48	; 0x30
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d1d0      	bne.n	800447a <Standard_GetStatus+0x32>
 80044d8:	e7ea      	b.n	80044b0 <Standard_GetStatus+0x68>
 80044da:	bf00      	nop
 80044dc:	20001c38 	.word	0x20001c38
 80044e0:	20001c08 	.word	0x20001c08
 80044e4:	20001c34 	.word	0x20001c34

080044e8 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80044e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80044ec:	4e27      	ldr	r6, [pc, #156]	; (800458c <DataStageIn+0xa4>)
 80044ee:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80044f0:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 80044f2:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80044f4:	b923      	cbnz	r3, 8004500 <DataStageIn+0x18>
 80044f6:	2f04      	cmp	r7, #4
 80044f8:	d02a      	beq.n	8004550 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80044fa:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80044fc:	2704      	movs	r7, #4
 80044fe:	e003      	b.n	8004508 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8004500:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8004502:	42ab      	cmp	r3, r5
 8004504:	d9fa      	bls.n	80044fc <DataStageIn+0x14>
 8004506:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8004508:	429d      	cmp	r5, r3
 800450a:	bf28      	it	cs
 800450c:	461d      	movcs	r5, r3
 800450e:	69a1      	ldr	r1, [r4, #24]
 8004510:	4628      	mov	r0, r5
 8004512:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8004514:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8004516:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8004518:	2000      	movs	r0, #0
 800451a:	4790      	blx	r2
 800451c:	462a      	mov	r2, r5
 800451e:	4601      	mov	r1, r0
 8004520:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <DataStageIn+0xac>)
 8004522:	4640      	mov	r0, r8
 8004524:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8004526:	4629      	mov	r1, r5
 8004528:	2000      	movs	r0, #0
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <DataStageIn+0xb0>)
 800452c:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 800452e:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8004530:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8004532:	1b43      	subs	r3, r0, r5
 8004534:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8004536:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8004538:	4818      	ldr	r0, [pc, #96]	; (800459c <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800453c:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800453e:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004540:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004544:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8004546:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8004548:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800454a:	7227      	strb	r7, [r4, #8]
 800454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8004550:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <DataStageIn+0xbc>)
 8004552:	7810      	ldrb	r0, [r2, #0]
 8004554:	2801      	cmp	r0, #1
 8004556:	d006      	beq.n	8004566 <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8004558:	4910      	ldr	r1, [pc, #64]	; (800459c <DataStageIn+0xb4>)
 800455a:	2710      	movs	r7, #16
 800455c:	800f      	strh	r7, [r1, #0]
 800455e:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8004560:	7227      	strb	r7, [r4, #8]
 8004562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8004566:	f645 4050 	movw	r0, #23632	; 0x5c50
 800456a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800456e:	6800      	ldr	r0, [r0, #0]
 8004570:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004574:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8004576:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800457a:	1841      	adds	r1, r0, r1
 800457c:	0048      	lsls	r0, r1, #1
 800457e:	4907      	ldr	r1, [pc, #28]	; (800459c <DataStageIn+0xb4>)
 8004580:	6003      	str	r3, [r0, #0]
 8004582:	2030      	movs	r0, #48	; 0x30
 8004584:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8004586:	7013      	strb	r3, [r2, #0]
 8004588:	e7df      	b.n	800454a <DataStageIn+0x62>
 800458a:	bf00      	nop
 800458c:	20001c38 	.word	0x20001c38
 8004590:	0800506d 	.word	0x0800506d
 8004594:	08004dfd 	.word	0x08004dfd
 8004598:	080050ad 	.word	0x080050ad
 800459c:	20001c40 	.word	0x20001c40
 80045a0:	20001c3e 	.word	0x20001c3e
 80045a4:	20000ae8 	.word	0x20000ae8

080045a8 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80045a8:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <Standard_SetConfiguration+0x30>)
 80045ac:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <Standard_SetConfiguration+0x34>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	7851      	ldrb	r1, [r2, #1]
 80045b2:	78c3      	ldrb	r3, [r0, #3]
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d201      	bcs.n	80045bc <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80045b8:	2002      	movs	r0, #2
  }
}
 80045ba:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80045bc:	7882      	ldrb	r2, [r0, #2]
 80045be:	2a00      	cmp	r2, #0
 80045c0:	d1fa      	bne.n	80045b8 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80045c2:	8884      	ldrh	r4, [r0, #4]
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	d1f7      	bne.n	80045b8 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80045c8:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80045ca:	4805      	ldr	r0, [pc, #20]	; (80045e0 <Standard_SetConfiguration+0x38>)
 80045cc:	6801      	ldr	r1, [r0, #0]
 80045ce:	684b      	ldr	r3, [r1, #4]
 80045d0:	4798      	blx	r3
    return USB_SUCCESS;
 80045d2:	4620      	mov	r0, r4
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	bf00      	nop
 80045d8:	20001c38 	.word	0x20001c38
 80045dc:	200000e0 	.word	0x200000e0
 80045e0:	20001c34 	.word	0x20001c34

080045e4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80045e4:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <Standard_SetInterface+0x44>)
 80045e8:	4c10      	ldr	r4, [pc, #64]	; (800462c <Standard_SetInterface+0x48>)
 80045ea:	6811      	ldr	r1, [r2, #0]
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	698a      	ldr	r2, [r1, #24]
 80045f0:	7958      	ldrb	r0, [r3, #5]
 80045f2:	78d9      	ldrb	r1, [r3, #3]
 80045f4:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	7a99      	ldrb	r1, [r3, #10]
 80045fa:	b909      	cbnz	r1, 8004600 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 80045fc:	2002      	movs	r0, #2
}
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8004600:	2800      	cmp	r0, #0
 8004602:	d1fb      	bne.n	80045fc <Standard_SetInterface+0x18>
 8004604:	7918      	ldrb	r0, [r3, #4]
 8004606:	2800      	cmp	r0, #0
 8004608:	d1f8      	bne.n	80045fc <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 800460a:	789d      	ldrb	r5, [r3, #2]
 800460c:	2d00      	cmp	r5, #0
 800460e:	d1f5      	bne.n	80045fc <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8004610:	4a07      	ldr	r2, [pc, #28]	; (8004630 <Standard_SetInterface+0x4c>)
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	68d9      	ldr	r1, [r3, #12]
 8004616:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8004618:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 800461a:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800461c:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800461e:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8004620:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8004622:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8004624:	bd38      	pop	{r3, r4, r5, pc}
 8004626:	bf00      	nop
 8004628:	20001c10 	.word	0x20001c10
 800462c:	20001c38 	.word	0x20001c38
 8004630:	20001c34 	.word	0x20001c34

08004634 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8004634:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8004636:	4b35      	ldr	r3, [pc, #212]	; (800470c <Standard_ClearFeature+0xd8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800463c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8004640:	d003      	beq.n	800464a <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004642:	2802      	cmp	r0, #2
 8004644:	d006      	beq.n	8004654 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8004646:	2002      	movs	r0, #2
}
 8004648:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800464a:	7a59      	ldrb	r1, [r3, #9]
 800464c:	f021 0220 	bic.w	r2, r1, #32
 8004650:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8004652:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8004654:	885a      	ldrh	r2, [r3, #2]
 8004656:	2a00      	cmp	r2, #0
 8004658:	d1f6      	bne.n	8004648 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 800465a:	7919      	ldrb	r1, [r3, #4]
 800465c:	2900      	cmp	r1, #0
 800465e:	d1f3      	bne.n	8004648 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8004660:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8004662:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8004666:	0081      	lsls	r1, r0, #2
 8004668:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800466c:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800466e:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8004672:	bf56      	itet	pl
 8004674:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8004676:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8004678:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800467c:	4c24      	ldr	r4, [pc, #144]	; (8004710 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800467e:	bf48      	it	mi
 8004680:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8004684:	7824      	ldrb	r4, [r4, #0]
 8004686:	42a0      	cmp	r0, r4
 8004688:	d2dd      	bcs.n	8004646 <Standard_ClearFeature+0x12>
 800468a:	2d00      	cmp	r5, #0
 800468c:	d0db      	beq.n	8004646 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 800468e:	7a9b      	ldrb	r3, [r3, #10]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0d8      	beq.n	8004646 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8004694:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004698:	b2d3      	uxtb	r3, r2
 800469a:	b173      	cbz	r3, 80046ba <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800469c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80046a0:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	f003 0130 	and.w	r1, r3, #48	; 0x30
 80046aa:	2910      	cmp	r1, #16
 80046ac:	d021      	beq.n	80046f2 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80046ae:	4819      	ldr	r0, [pc, #100]	; (8004714 <Standard_ClearFeature+0xe0>)
 80046b0:	6801      	ldr	r1, [r0, #0]
 80046b2:	694a      	ldr	r2, [r1, #20]
 80046b4:	4790      	blx	r2
    return USB_SUCCESS;
 80046b6:	2000      	movs	r0, #0
 80046b8:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80046ba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80046be:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046cc:	d1ef      	bne.n	80046ae <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 80046ce:	b9c8      	cbnz	r0, 8004704 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80046d0:	4a11      	ldr	r2, [pc, #68]	; (8004718 <Standard_ClearFeature+0xe4>)
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <Standard_ClearFeature+0xe8>)
 80046d4:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80046d8:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 80046e0:	4001      	ands	r1, r0
 80046e2:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 80046e6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80046ea:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 80046ee:	6020      	str	r0, [r4, #0]
 80046f0:	e7dd      	b.n	80046ae <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 80046f2:	b2c4      	uxtb	r4, r0
 80046f4:	4620      	mov	r0, r4
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <Standard_ClearFeature+0xec>)
 80046f8:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80046fa:	4620      	mov	r0, r4
 80046fc:	2130      	movs	r1, #48	; 0x30
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <Standard_ClearFeature+0xf0>)
 8004700:	4798      	blx	r3
 8004702:	e7d4      	b.n	80046ae <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8004704:	4908      	ldr	r1, [pc, #32]	; (8004728 <Standard_ClearFeature+0xf4>)
 8004706:	4788      	blx	r1
 8004708:	e7e7      	b.n	80046da <Standard_ClearFeature+0xa6>
 800470a:	bf00      	nop
 800470c:	20001c38 	.word	0x20001c38
 8004710:	200000e0 	.word	0x200000e0
 8004714:	20001c34 	.word	0x20001c34
 8004718:	2000005c 	.word	0x2000005c
 800471c:	080050cd 	.word	0x080050cd
 8004720:	08004ffd 	.word	0x08004ffd
 8004724:	08004ef1 	.word	0x08004ef1
 8004728:	08004fd9 	.word	0x08004fd9

0800472c <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800472c:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <Standard_SetEndPointFeature+0x8c>)
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8004734:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004738:	0090      	lsls	r0, r2, #2
 800473a:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800473e:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004740:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8004744:	bf56      	itet	pl
 8004746:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004748:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800474a:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800474e:	4c1b      	ldr	r4, [pc, #108]	; (80047bc <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8004750:	bf48      	it	mi
 8004752:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8004756:	7824      	ldrb	r4, [r4, #0]
 8004758:	42a2      	cmp	r2, r4
 800475a:	d301      	bcc.n	8004760 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800475c:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800475e:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8004760:	884a      	ldrh	r2, [r1, #2]
 8004762:	2a00      	cmp	r2, #0
 8004764:	d1fa      	bne.n	800475c <Standard_SetEndPointFeature+0x30>
 8004766:	2d00      	cmp	r5, #0
 8004768:	d0f8      	beq.n	800475c <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 800476a:	7a89      	ldrb	r1, [r1, #10]
 800476c:	2900      	cmp	r1, #0
 800476e:	d0f5      	beq.n	800475c <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8004774:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004778:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800477c:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800477e:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8004780:	b17b      	cbz	r3, 80047a2 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8004782:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 8004786:	4008      	ands	r0, r1
 8004788:	f080 0110 	eor.w	r1, r0, #16
 800478c:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8004790:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8004794:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <Standard_SetEndPointFeature+0x94>)
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	698b      	ldr	r3, [r1, #24]
 800479c:	4798      	blx	r3
  return USB_SUCCESS;
 800479e:	2000      	movs	r0, #0
 80047a0:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80047a2:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80047a6:	400b      	ands	r3, r1
 80047a8:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 80047ac:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 80047b0:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e7ee      	b.n	8004796 <Standard_SetEndPointFeature+0x6a>
 80047b8:	20001c38 	.word	0x20001c38
 80047bc:	200000e0 	.word	0x200000e0
 80047c0:	20001c34 	.word	0x20001c34

080047c4 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <Standard_GetDescriptorData+0x18>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 80047ca:	b110      	cbz	r0, 80047d2 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 80047cc:	6808      	ldr	r0, [r1, #0]
 80047ce:	1880      	adds	r0, r0, r2
}
 80047d0:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80047d2:	8889      	ldrh	r1, [r1, #4]
 80047d4:	1a8a      	subs	r2, r1, r2
 80047d6:	821a      	strh	r2, [r3, #16]
    return 0;
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20001c38 	.word	0x20001c38

080047e0 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80047e0:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <Post0_Process+0x34>)
 80047e4:	2000      	movs	r0, #0
 80047e6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80047ea:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <Post0_Process+0x38>)
 80047ec:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 80047ee:	480b      	ldr	r0, [pc, #44]	; (800481c <Post0_Process+0x3c>)
 80047f0:	6801      	ldr	r1, [r0, #0]
 80047f2:	7a08      	ldrb	r0, [r1, #8]
 80047f4:	2808      	cmp	r0, #8
 80047f6:	d106      	bne.n	8004806 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <Post0_Process+0x40>)
 80047fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047fe:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <Post0_Process+0x44>)
 8004802:	2110      	movs	r1, #16
 8004804:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8004806:	f1b0 0c09 	subs.w	ip, r0, #9
 800480a:	f1dc 0000 	rsbs	r0, ip, #0
 800480e:	eb50 000c 	adcs.w	r0, r0, ip
 8004812:	bd08      	pop	{r3, pc}
 8004814:	2000005c 	.word	0x2000005c
 8004818:	080050cd 	.word	0x080050cd
 800481c:	20001c38 	.word	0x20001c38
 8004820:	20001c3e 	.word	0x20001c3e
 8004824:	20001c40 	.word	0x20001c40

08004828 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800482a:	4d33      	ldr	r5, [pc, #204]	; (80048f8 <Out0_Process+0xd0>)
 800482c:	682c      	ldr	r4, [r5, #0]
 800482e:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004830:	2b02      	cmp	r3, #2
 8004832:	d007      	beq.n	8004844 <Out0_Process+0x1c>
 8004834:	2b04      	cmp	r3, #4
 8004836:	d005      	beq.n	8004844 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8004838:	2b03      	cmp	r3, #3
 800483a:	d008      	beq.n	800484e <Out0_Process+0x26>
 800483c:	2b05      	cmp	r3, #5
 800483e:	d006      	beq.n	800484e <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8004840:	2b07      	cmp	r3, #7
 8004842:	d00d      	beq.n	8004860 <Out0_Process+0x38>
 8004844:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004846:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 8004848:	4b2c      	ldr	r3, [pc, #176]	; (80048fc <Out0_Process+0xd4>)
 800484a:	4798      	blx	r3
 800484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800484e:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8004850:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8004852:	b311      	cbz	r1, 800489a <Out0_Process+0x72>
 8004854:	b958      	cbnz	r0, 800486e <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8004856:	8aa4      	ldrh	r4, [r4, #20]
 8004858:	2c00      	cmp	r4, #0
 800485a:	d045      	beq.n	80048e8 <Out0_Process+0xc0>
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <Out0_Process+0xd8>)
 800485e:	e02e      	b.n	80048be <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8004860:	4828      	ldr	r0, [pc, #160]	; (8004904 <Out0_Process+0xdc>)
 8004862:	6801      	ldr	r1, [r0, #0]
 8004864:	68ca      	ldr	r2, [r1, #12]
 8004866:	4790      	blx	r2
 8004868:	682c      	ldr	r4, [r5, #0]
 800486a:	2208      	movs	r2, #8
 800486c:	e7eb      	b.n	8004846 <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800486e:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8004870:	4286      	cmp	r6, r0
 8004872:	bf28      	it	cs
 8004874:	4606      	movcs	r6, r0
 8004876:	4630      	mov	r0, r6
 8004878:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 800487a:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800487c:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800487e:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8004880:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8004882:	1b82      	subs	r2, r0, r6
 8004884:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8004886:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8004888:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <Out0_Process+0xe0>)
 800488a:	2000      	movs	r0, #0
 800488c:	4798      	blx	r3
 800488e:	4632      	mov	r2, r6
 8004890:	4601      	mov	r1, r0
 8004892:	4b1e      	ldr	r3, [pc, #120]	; (800490c <Out0_Process+0xe4>)
 8004894:	4638      	mov	r0, r7
 8004896:	4798      	blx	r3
 8004898:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 800489a:	2800      	cmp	r0, #0
 800489c:	d0db      	beq.n	8004856 <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 80048a0:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80048a2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80048a6:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80048a8:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <Out0_Process+0xec>)
 80048ac:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80048ae:	8a23      	ldrh	r3, [r4, #16]
 80048b0:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <Out0_Process+0xd8>)
 80048b4:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80048b6:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80048b8:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80048ba:	d915      	bls.n	80048e8 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80048bc:	b9c3      	cbnz	r3, 80048f0 <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80048be:	682c      	ldr	r4, [r5, #0]
 80048c0:	2106      	movs	r1, #6
      USB_StatusIn();
 80048c2:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80048c6:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 80048c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80048d2:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 80048d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048d8:	18c8      	adds	r0, r1, r3
 80048da:	0043      	lsls	r3, r0, #1
 80048dc:	2100      	movs	r1, #0
 80048de:	6019      	str	r1, [r3, #0]
 80048e0:	2030      	movs	r0, #48	; 0x30
 80048e2:	8010      	strh	r0, [r2, #0]
 80048e4:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80048e6:	e7ae      	b.n	8004846 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 80048e8:	682c      	ldr	r4, [r5, #0]
 80048ea:	2203      	movs	r2, #3
 80048ec:	7222      	strb	r2, [r4, #8]
 80048ee:	e7aa      	b.n	8004846 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80048f0:	682c      	ldr	r4, [r5, #0]
 80048f2:	2205      	movs	r2, #5
 80048f4:	7222      	strb	r2, [r4, #8]
 80048f6:	e7a6      	b.n	8004846 <Out0_Process+0x1e>
 80048f8:	20001c38 	.word	0x20001c38
 80048fc:	080047e1 	.word	0x080047e1
 8004900:	20001c40 	.word	0x20001c40
 8004904:	20001c10 	.word	0x20001c10
 8004908:	0800508d 	.word	0x0800508d
 800490c:	08004e75 	.word	0x08004e75
 8004910:	20001c3e 	.word	0x20001c3e
 8004914:	080050ad 	.word	0x080050ad

08004918 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8004918:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800491a:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 800491e:	4d9e      	ldr	r5, [pc, #632]	; (8004b98 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004920:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004924:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8004926:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004928:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800492c:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800492e:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 8004932:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004934:	180e      	adds	r6, r1, r0
 8004936:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 8004938:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800493a:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800493c:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800493e:	d044      	beq.n	80049ca <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004940:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8004942:	0078      	lsls	r0, r7, #1
 8004944:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8004948:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800494c:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800494e:	4f93      	ldr	r7, [pc, #588]	; (8004b9c <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8004950:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8004952:	7873      	ldrb	r3, [r6, #1]
 8004954:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8004956:	88b0      	ldrh	r0, [r6, #4]
 8004958:	47b8      	blx	r7
 800495a:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800495c:	8930      	ldrh	r0, [r6, #8]
 800495e:	682c      	ldr	r4, [r5, #0]
 8004960:	47b8      	blx	r7
 8004962:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8004964:	89b0      	ldrh	r0, [r6, #12]
 8004966:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8004968:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800496a:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800496c:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 800496e:	2800      	cmp	r0, #0
 8004970:	d030      	beq.n	80049d4 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8004972:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8004974:	2906      	cmp	r1, #6
 8004976:	f000 8087 	beq.w	8004a88 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800497a:	2900      	cmp	r1, #0
 800497c:	d15e      	bne.n	8004a3c <Setup0_Process+0x124>
 800497e:	8863      	ldrh	r3, [r4, #2]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8094 	beq.w	8004aae <Setup0_Process+0x196>
 8004986:	4e86      	ldr	r6, [pc, #536]	; (8004ba0 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8004988:	6833      	ldr	r3, [r6, #0]
 800498a:	4608      	mov	r0, r1
 800498c:	6919      	ldr	r1, [r3, #16]
 800498e:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 8004990:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8004992:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8004994:	d062      	beq.n	8004a5c <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8004996:	8a1a      	ldrh	r2, [r3, #16]
 8004998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800499c:	428a      	cmp	r2, r1
 800499e:	d05d      	beq.n	8004a5c <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80049a0:	2802      	cmp	r0, #2
 80049a2:	d00c      	beq.n	80049be <Setup0_Process+0xa6>
 80049a4:	b15a      	cbz	r2, 80049be <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80049a6:	f993 1000 	ldrsb.w	r1, [r3]
 80049aa:	2900      	cmp	r1, #0
 80049ac:	f2c0 80b5 	blt.w	8004b1a <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80049b0:	2203      	movs	r2, #3
 80049b2:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80049b4:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <Setup0_Process+0x28c>)
 80049b6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80049ba:	8018      	strh	r0, [r3, #0]
 80049bc:	e001      	b.n	80049c2 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80049be:	2008      	movs	r0, #8
 80049c0:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80049c2:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <Setup0_Process+0x290>)
 80049c4:	4798      	blx	r3
}
 80049c6:	b003      	add	sp, #12
 80049c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ca:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 80049cc:	2101      	movs	r1, #1
 80049ce:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d1ce      	bne.n	8004972 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80049d4:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 80049d6:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80049d8:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 80049dc:	d141      	bne.n	8004a62 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80049de:	2e09      	cmp	r6, #9
 80049e0:	f000 8108 	beq.w	8004bf4 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80049e4:	2e05      	cmp	r6, #5
 80049e6:	f000 80bf 	beq.w	8004b68 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80049ea:	2e03      	cmp	r6, #3
 80049ec:	f000 80f0 	beq.w	8004bd0 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80049f0:	2e01      	cmp	r6, #1
 80049f2:	d13b      	bne.n	8004a6c <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80049f4:	78e1      	ldrb	r1, [r4, #3]
 80049f6:	2901      	cmp	r1, #1
 80049f8:	d138      	bne.n	8004a6c <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 80049fa:	88a2      	ldrh	r2, [r4, #4]
 80049fc:	2a00      	cmp	r2, #0
 80049fe:	d135      	bne.n	8004a6c <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8004a00:	7a63      	ldrb	r3, [r4, #9]
 8004a02:	f003 0420 	and.w	r4, r3, #32
 8004a06:	b2e0      	uxtb	r0, r4
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d02f      	beq.n	8004a6c <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8004a0c:	4967      	ldr	r1, [pc, #412]	; (8004bac <Setup0_Process+0x294>)
 8004a0e:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8004a10:	bb60      	cbnz	r0, 8004a6c <Setup0_Process+0x154>
 8004a12:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8004a14:	f645 4050 	movw	r0, #23632	; 0x5c50
 8004a18:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004a1c:	6801      	ldr	r1, [r0, #0]
 8004a1e:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8004a22:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8004a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a28:	18d0      	adds	r0, r2, r3
 8004a2a:	0041      	lsls	r1, r0, #1
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4a60      	ldr	r2, [pc, #384]	; (8004bb0 <Setup0_Process+0x298>)
 8004a30:	600b      	str	r3, [r1, #0]
 8004a32:	2030      	movs	r0, #48	; 0x30
 8004a34:	2106      	movs	r1, #6
 8004a36:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004a38:	7221      	strb	r1, [r4, #8]
 8004a3a:	e7c2      	b.n	80049c2 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8004a3c:	2908      	cmp	r1, #8
 8004a3e:	d148      	bne.n	8004ad2 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004a40:	7820      	ldrb	r0, [r4, #0]
 8004a42:	0643      	lsls	r3, r0, #25
 8004a44:	d19f      	bne.n	8004986 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8004a46:	4a5b      	ldr	r2, [pc, #364]	; (8004bb4 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004a48:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8004a4a:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8004a4c:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8004a4e:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a56:	8a1a      	ldrh	r2, [r3, #16]
 8004a58:	4282      	cmp	r2, r0
 8004a5a:	d1a3      	bne.n	80049a4 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8004a5c:	2109      	movs	r1, #9
 8004a5e:	7219      	strb	r1, [r3, #8]
 8004a60:	e7af      	b.n	80049c2 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d071      	beq.n	8004b4a <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	f000 808d 	beq.w	8004b86 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8004a6c:	494c      	ldr	r1, [pc, #304]	; (8004ba0 <Setup0_Process+0x288>)
 8004a6e:	4630      	mov	r0, r6
 8004a70:	680a      	ldr	r2, [r1, #0]
 8004a72:	6953      	ldr	r3, [r2, #20]
 8004a74:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8004a76:	2803      	cmp	r0, #3
 8004a78:	f000 80c5 	beq.w	8004c06 <Setup0_Process+0x2ee>
 8004a7c:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d0c8      	beq.n	8004a14 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8004a82:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004a84:	7221      	strb	r1, [r4, #8]
 8004a86:	e79c      	b.n	80049c2 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004a88:	7826      	ldrb	r6, [r4, #0]
 8004a8a:	0673      	lsls	r3, r6, #25
 8004a8c:	f47f af7b 	bne.w	8004986 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8004a90:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8004a92:	4e43      	ldr	r6, [pc, #268]	; (8004ba0 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	f000 80b0 	beq.w	8004bfa <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8004a9a:	2a02      	cmp	r2, #2
 8004a9c:	d05e      	beq.n	8004b5c <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8004a9e:	2a03      	cmp	r2, #3
 8004aa0:	f47f af72 	bne.w	8004988 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8004aa4:	6830      	ldr	r0, [r6, #0]
 8004aa6:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d1cd      	bne.n	8004a48 <Setup0_Process+0x130>
 8004aac:	e76c      	b.n	8004988 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8004aae:	6860      	ldr	r0, [r4, #4]
 8004ab0:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8004ab4:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004ab8:	f47f af65 	bne.w	8004986 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8004abc:	7823      	ldrb	r3, [r4, #0]
 8004abe:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 8004ac2:	f040 80a4 	bne.w	8004c0e <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8004ac6:	88a3      	ldrh	r3, [r4, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f47f af5c 	bne.w	8004986 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8004ace:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <Setup0_Process+0x2a0>)
 8004ad0:	e7ba      	b.n	8004a48 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8004ad2:	290a      	cmp	r1, #10
 8004ad4:	f47f af57 	bne.w	8004986 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004ad8:	7826      	ldrb	r6, [r4, #0]
 8004ada:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	f47f af51 	bne.w	8004986 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8004ae4:	7aa3      	ldrb	r3, [r4, #10]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f43f af4d 	beq.w	8004986 <Setup0_Process+0x6e>
 8004aec:	8863      	ldrh	r3, [r4, #2]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f47f af49 	bne.w	8004986 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8004af4:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8004af6:	4e2a      	ldr	r6, [pc, #168]	; (8004ba0 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8004af8:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 8004afc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004b00:	f47f af42 	bne.w	8004988 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8004b04:	6832      	ldr	r2, [r6, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	7960      	ldrb	r0, [r4, #5]
 8004b0a:	6993      	ldr	r3, [r2, #24]
 8004b0c:	4798      	blx	r3
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f040 80b8 	bne.w	8004c84 <Setup0_Process+0x36c>
 8004b14:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <Setup0_Process+0x2a4>)
 8004b18:	e796      	b.n	8004a48 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8004b1a:	88d9      	ldrh	r1, [r3, #6]
 8004b1c:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8004b1e:	9801      	ldr	r0, [sp, #4]
 8004b20:	4282      	cmp	r2, r0
 8004b22:	d817      	bhi.n	8004b54 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8004b24:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8004b26:	491e      	ldr	r1, [pc, #120]	; (8004ba0 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8004b28:	d208      	bcs.n	8004b3c <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8004b2a:	6808      	ldr	r0, [r1, #0]
 8004b2c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004b30:	4282      	cmp	r2, r0
 8004b32:	f080 808f 	bcs.w	8004c54 <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8004b36:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <Setup0_Process+0x2a8>)
 8004b38:	2000      	movs	r0, #0
 8004b3a:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8004b3c:	6809      	ldr	r1, [r1, #0]
 8004b3e:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8004b42:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8004b44:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <Setup0_Process+0x2ac>)
 8004b46:	4798      	blx	r3
 8004b48:	e73b      	b.n	80049c2 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8004b4a:	2e0b      	cmp	r6, #11
 8004b4c:	d18e      	bne.n	8004a6c <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8004b4e:	481e      	ldr	r0, [pc, #120]	; (8004bc8 <Setup0_Process+0x2b0>)
 8004b50:	4780      	blx	r0
 8004b52:	e75d      	b.n	8004a10 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8004b54:	9801      	ldr	r0, [sp, #4]
 8004b56:	4912      	ldr	r1, [pc, #72]	; (8004ba0 <Setup0_Process+0x288>)
 8004b58:	8218      	strh	r0, [r3, #16]
 8004b5a:	e7ef      	b.n	8004b3c <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004b60:	2a00      	cmp	r2, #0
 8004b62:	f47f af71 	bne.w	8004a48 <Setup0_Process+0x130>
 8004b66:	e70f      	b.n	8004988 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8004b68:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	db88      	blt.n	8004a82 <Setup0_Process+0x16a>
 8004b70:	78a1      	ldrb	r1, [r4, #2]
 8004b72:	2900      	cmp	r1, #0
 8004b74:	d185      	bne.n	8004a82 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8004b76:	88a2      	ldrh	r2, [r4, #4]
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	d182      	bne.n	8004a82 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8004b7c:	7aa3      	ldrb	r3, [r4, #10]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f43f af48 	beq.w	8004a14 <Setup0_Process+0xfc>
 8004b84:	e77d      	b.n	8004a82 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8004b86:	2e01      	cmp	r6, #1
 8004b88:	f43f af40 	beq.w	8004a0c <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8004b8c:	2e03      	cmp	r6, #3
 8004b8e:	f47f af6d 	bne.w	8004a6c <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8004b92:	4c0e      	ldr	r4, [pc, #56]	; (8004bcc <Setup0_Process+0x2b4>)
 8004b94:	47a0      	blx	r4
 8004b96:	e73b      	b.n	8004a10 <Setup0_Process+0xf8>
 8004b98:	20001c38 	.word	0x20001c38
 8004b9c:	08005135 	.word	0x08005135
 8004ba0:	20001c10 	.word	0x20001c10
 8004ba4:	20001c3e 	.word	0x20001c3e
 8004ba8:	080047e1 	.word	0x080047e1
 8004bac:	08004635 	.word	0x08004635
 8004bb0:	20001c40 	.word	0x20001c40
 8004bb4:	080043f9 	.word	0x080043f9
 8004bb8:	08004449 	.word	0x08004449
 8004bbc:	08004421 	.word	0x08004421
 8004bc0:	20000ae8 	.word	0x20000ae8
 8004bc4:	080044e9 	.word	0x080044e9
 8004bc8:	080045e5 	.word	0x080045e5
 8004bcc:	0800472d 	.word	0x0800472d
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8004bd0:	78e2      	ldrb	r2, [r4, #3]
 8004bd2:	2a01      	cmp	r2, #1
 8004bd4:	f47f af4a 	bne.w	8004a6c <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8004bd8:	88a3      	ldrh	r3, [r4, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f47f af46 	bne.w	8004a6c <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004be0:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004be2:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004be4:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004be8:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8004bea:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8004bec:	69dc      	ldr	r4, [r3, #28]
 8004bee:	47a0      	blx	r4
 8004bf0:	682c      	ldr	r4, [r5, #0]
 8004bf2:	e70f      	b.n	8004a14 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8004bf4:	4c26      	ldr	r4, [pc, #152]	; (8004c90 <Setup0_Process+0x378>)
 8004bf6:	47a0      	blx	r4
 8004bf8:	e70a      	b.n	8004a10 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8004bfa:	6832      	ldr	r2, [r6, #0]
 8004bfc:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	f47f af22 	bne.w	8004a48 <Setup0_Process+0x130>
 8004c04:	e6c0      	b.n	8004988 <Setup0_Process+0x70>
 8004c06:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8004c08:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8004c0a:	7221      	strb	r1, [r4, #8]
 8004c0c:	e6d9      	b.n	80049c2 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8004c0e:	2801      	cmp	r0, #1
 8004c10:	d02b      	beq.n	8004c6a <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8004c12:	2802      	cmp	r0, #2
 8004c14:	f47f aeb7 	bne.w	8004986 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8004c18:	7963      	ldrb	r3, [r4, #5]
 8004c1a:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8004c1e:	0096      	lsls	r6, r2, #2
 8004c20:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8004c24:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8004c28:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8004c2a:	bf56      	itet	pl
 8004c2c:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8004c2e:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8004c30:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8004c34:	4817      	ldr	r0, [pc, #92]	; (8004c94 <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8004c36:	bf48      	it	mi
 8004c38:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8004c3c:	7800      	ldrb	r0, [r0, #0]
 8004c3e:	4282      	cmp	r2, r0
 8004c40:	f4bf aea1 	bcs.w	8004986 <Setup0_Process+0x6e>
 8004c44:	f013 0f70 	tst.w	r3, #112	; 0x70
 8004c48:	f47f ae9d 	bne.w	8004986 <Setup0_Process+0x6e>
          && (Status != 0))
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	f47f af3e 	bne.w	8004ace <Setup0_Process+0x1b6>
 8004c52:	e698      	b.n	8004986 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8004c54:	fb92 f4f0 	sdiv	r4, r2, r0
 8004c58:	fb00 2214 	mls	r2, r0, r4, r2
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	f47f af6d 	bne.w	8004b3c <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8004c62:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <Setup0_Process+0x380>)
 8004c64:	2001      	movs	r0, #1
 8004c66:	7010      	strb	r0, [r2, #0]
 8004c68:	e768      	b.n	8004b3c <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8004c6a:	4e0c      	ldr	r6, [pc, #48]	; (8004c9c <Setup0_Process+0x384>)
 8004c6c:	7960      	ldrb	r0, [r4, #5]
 8004c6e:	6833      	ldr	r3, [r6, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	4790      	blx	r2
 8004c74:	b930      	cbnz	r0, 8004c84 <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 8004c76:	682c      	ldr	r4, [r5, #0]
 8004c78:	7aa0      	ldrb	r0, [r4, #10]
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	f47f af27 	bne.w	8004ace <Setup0_Process+0x1b6>
 8004c80:	7861      	ldrb	r1, [r4, #1]
 8004c82:	e681      	b.n	8004988 <Setup0_Process+0x70>
 8004c84:	6829      	ldr	r1, [r5, #0]
 8004c86:	7849      	ldrb	r1, [r1, #1]
 8004c88:	e67e      	b.n	8004988 <Setup0_Process+0x70>
 8004c8a:	bf00      	nop
 8004c8c:	20001c34 	.word	0x20001c34
 8004c90:	080045a9 	.word	0x080045a9
 8004c94:	200000e0 	.word	0x200000e0
 8004c98:	20000ae8 	.word	0x20000ae8
 8004c9c:	20001c10 	.word	0x20001c10

08004ca0 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8004ca0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8004ca2:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <SetDeviceAddress+0xa4>)
 8004ca4:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004ca6:	2e00      	cmp	r6, #0
 8004ca8:	d043      	beq.n	8004d32 <SetDeviceAddress+0x92>
 8004caa:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8004cae:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004cb2:	6814      	ldr	r4, [r2, #0]
 8004cb4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004cb8:	4021      	ands	r1, r4
 8004cba:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8004cbe:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8004cc2:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	1e74      	subs	r4, r6, #1
 8004cc8:	f645 4304 	movw	r3, #23556	; 0x5c04
 8004ccc:	4296      	cmp	r6, r2
 8004cce:	f004 0401 	and.w	r4, r4, #1
 8004cd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004cd6:	d92c      	bls.n	8004d32 <SetDeviceAddress+0x92>
 8004cd8:	b17c      	cbz	r4, 8004cfa <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8004ce6:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8004cea:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004cec:	2202      	movs	r2, #2
 8004cee:	f645 4308 	movw	r3, #23560	; 0x5c08
 8004cf2:	4296      	cmp	r6, r2
 8004cf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004cf8:	d91b      	bls.n	8004d32 <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004cfa:	681f      	ldr	r7, [r3, #0]
 8004cfc:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8004d00:	f640 740f 	movw	r4, #3855	; 0xf0f
 8004d04:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004d08:	403c      	ands	r4, r7
 8004d0a:	ea45 0704 	orr.w	r7, r5, r4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f841 7b04 	str.w	r7, [r1], #4
 8004d14:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004d16:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004d18:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8004d1c:	f640 740f 	movw	r4, #3855	; 0xf0f
 8004d20:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004d24:	403c      	ands	r4, r7
 8004d26:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004d28:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004d2a:	605c      	str	r4, [r3, #4]
 8004d2c:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004d2e:	4296      	cmp	r6, r2
 8004d30:	d8e3      	bhi.n	8004cfa <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8004d32:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8004d36:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004d3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d3e:	6018      	str	r0, [r3, #0]
}
 8004d40:	bcf0      	pop	{r4, r5, r6, r7}
 8004d42:	4770      	bx	lr
 8004d44:	200000e0 	.word	0x200000e0

08004d48 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8004d48:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8004d4a:	4c14      	ldr	r4, [pc, #80]	; (8004d9c <In0_Process+0x54>)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004d50:	2a02      	cmp	r2, #2
 8004d52:	d012      	beq.n	8004d7a <In0_Process+0x32>
 8004d54:	2a04      	cmp	r2, #4
 8004d56:	d010      	beq.n	8004d7a <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8004d58:	2a06      	cmp	r2, #6
 8004d5a:	d004      	beq.n	8004d66 <In0_Process+0x1e>
 8004d5c:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004d5e:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8004d60:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <In0_Process+0x58>)
 8004d62:	4798      	blx	r3
}
 8004d64:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8004d66:	7859      	ldrb	r1, [r3, #1]
 8004d68:	2905      	cmp	r1, #5
 8004d6a:	d00b      	beq.n	8004d84 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <In0_Process+0x5c>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	6881      	ldr	r1, [r0, #8]
 8004d72:	4788      	blx	r1
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	2008      	movs	r0, #8
 8004d78:	e7f1      	b.n	8004d5e <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8004d7a:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <In0_Process+0x60>)
 8004d7c:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	7a18      	ldrb	r0, [r3, #8]
 8004d82:	e7ec      	b.n	8004d5e <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8004d84:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8004d86:	0652      	lsls	r2, r2, #25
 8004d88:	d1f0      	bne.n	8004d6c <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8004d8a:	78d8      	ldrb	r0, [r3, #3]
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <In0_Process+0x64>)
 8004d8e:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8004d90:	4807      	ldr	r0, [pc, #28]	; (8004db0 <In0_Process+0x68>)
 8004d92:	6801      	ldr	r1, [r0, #0]
 8004d94:	6a0a      	ldr	r2, [r1, #32]
 8004d96:	4790      	blx	r2
 8004d98:	e7e8      	b.n	8004d6c <In0_Process+0x24>
 8004d9a:	bf00      	nop
 8004d9c:	20001c38 	.word	0x20001c38
 8004da0:	080047e1 	.word	0x080047e1
 8004da4:	20001c10 	.word	0x20001c10
 8004da8:	080044e9 	.word	0x080044e9
 8004dac:	08004ca1 	.word	0x08004ca1
 8004db0:	20001c34 	.word	0x20001c34

08004db4 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop

08004db8 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8004db8:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8004dba:	f641 4218 	movw	r2, #7192	; 0x1c18
 8004dbe:	f641 4438 	movw	r4, #7224	; 0x1c38
 8004dc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004dc6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004dca:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8004dcc:	2402      	movs	r4, #2
 8004dce:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8004dd0:	f641 4010 	movw	r0, #7184	; 0x1c10
 8004dd4:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 8004dd8:	f641 4134 	movw	r1, #7220	; 0x1c34
 8004ddc:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8004de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8004de8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004dec:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8004df0:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8004df2:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	4780      	blx	r0
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop

08004dfc <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8004dfc:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004e00:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8004e04:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8004e06:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 8004e08:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e0a:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004e0c:	d02f      	beq.n	8004e6e <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e0e:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8004e10:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004e12:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8004e16:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e18:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8004e1c:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004e20:	460b      	mov	r3, r1
 8004e22:	3204      	adds	r2, #4
 8004e24:	f001 0101 	and.w	r1, r1, #1
 8004e28:	3002      	adds	r0, #2
 8004e2a:	b303      	cbz	r3, 8004e6e <UserToPMABufferCopy+0x72>
 8004e2c:	b159      	cbz	r1, 8004e46 <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e2e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004e32:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8004e36:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e38:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004e3c:	f822 1c04 	strh.w	r1, [r2, #-4]
 8004e40:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004e42:	3b01      	subs	r3, #1
 8004e44:	d013      	beq.n	8004e6e <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004e46:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e4a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8004e4e:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004e52:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e56:	7844      	ldrb	r4, [r0, #1]
 8004e58:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004e5a:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8004e5e:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004e60:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8004e64:	f822 1b04 	strh.w	r1, [r2], #4
 8004e68:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004e6a:	3b02      	subs	r3, #2
 8004e6c:	d1eb      	bne.n	8004e46 <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8004e6e:	bc30      	pop	{r4, r5}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop

08004e74 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8004e74:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004e78:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004e7c:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8004e7e:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 8004e80:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e82:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004e84:	d01c      	beq.n	8004ec0 <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004e86:	680b      	ldr	r3, [r1, #0]
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004e8e:	4613      	mov	r3, r2
 8004e90:	3002      	adds	r0, #2
 8004e92:	f002 0201 	and.w	r2, r2, #1
 8004e96:	b19b      	cbz	r3, 8004ec0 <PMAToUserBufferCopy+0x4c>
 8004e98:	b132      	cbz	r2, 8004ea8 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004e9a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004e9e:	f820 2c02 	strh.w	r2, [r0, #-2]
 8004ea2:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	d00b      	beq.n	8004ec0 <PMAToUserBufferCopy+0x4c>
 8004ea8:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004eaa:	684d      	ldr	r5, [r1, #4]
 8004eac:	6889      	ldr	r1, [r1, #8]
 8004eae:	4602      	mov	r2, r0
 8004eb0:	f820 5c02 	strh.w	r5, [r0, #-2]
 8004eb4:	f822 1b02 	strh.w	r1, [r2], #2
 8004eb8:	1c90      	adds	r0, r2, #2
 8004eba:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004ebc:	3b02      	subs	r3, #2
 8004ebe:	d1f3      	bne.n	8004ea8 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8004ec0:	bc30      	pop	{r4, r5}
 8004ec2:	4770      	bx	lr

08004ec4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8004ec4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004ec8:	f645 4250 	movw	r2, #23632	; 0x5c50
 8004ecc:	4003      	ands	r3, r0
 8004ece:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8004ed8:	0080      	lsls	r0, r0, #2
 8004eda:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004ede:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004ee2:	6810      	ldr	r0, [r2, #0]
 8004ee4:	f648 138f 	movw	r3, #35215	; 0x898f
 8004ee8:	4003      	ands	r3, r0
 8004eea:	4319      	orrs	r1, r3
 8004eec:	6011      	str	r1, [r2, #0]
 8004eee:	4770      	bx	lr

08004ef0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8004ef0:	0080      	lsls	r0, r0, #2
 8004ef2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004ef6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8004efa:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8004efc:	f001 0010 	and.w	r0, r1, #16
 8004f00:	6814      	ldr	r4, [r2, #0]
 8004f02:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004f06:	b280      	uxth	r0, r0
 8004f08:	4023      	ands	r3, r4
 8004f0a:	b968      	cbnz	r0, 8004f28 <SetEPTxStatus+0x38>
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f001 0120 	and.w	r1, r1, #32
 8004f12:	b288      	uxth	r0, r1
 8004f14:	b108      	cbz	r0, 8004f1a <SetEPTxStatus+0x2a>
 8004f16:	f083 0320 	eor.w	r3, r3, #32
 8004f1a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004f1e:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004f22:	6010      	str	r0, [r2, #0]
}
 8004f24:	bc10      	pop	{r4}
 8004f26:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8004f28:	f083 0310 	eor.w	r3, r3, #16
 8004f2c:	e7ef      	b.n	8004f0e <SetEPTxStatus+0x1e>
 8004f2e:	bf00      	nop

08004f30 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8004f30:	0080      	lsls	r0, r0, #2
 8004f32:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004f36:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8004f3a:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8004f3c:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8004f40:	6814      	ldr	r4, [r2, #0]
 8004f42:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004f46:	b280      	uxth	r0, r0
 8004f48:	4023      	ands	r3, r4
 8004f4a:	b968      	cbnz	r0, 8004f68 <SetEPRxStatus+0x38>
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004f52:	b288      	uxth	r0, r1
 8004f54:	b108      	cbz	r0, 8004f5a <SetEPRxStatus+0x2a>
 8004f56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f5a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004f5e:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004f62:	6010      	str	r0, [r2, #0]
}
 8004f64:	bc10      	pop	{r4}
 8004f66:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8004f68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f6c:	e7ef      	b.n	8004f4e <SetEPRxStatus+0x1e>
 8004f6e:	bf00      	nop

08004f70 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8004f70:	0080      	lsls	r0, r0, #2
 8004f72:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004f76:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8004f7a:	6801      	ldr	r1, [r0, #0]
 8004f7c:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004f80:	400b      	ands	r3, r1
 8004f82:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 8004f86:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8004f8a:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8004f8e:	6003      	str	r3, [r0, #0]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop

08004f94 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8004f94:	0080      	lsls	r0, r0, #2
 8004f96:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004f9a:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8004f9e:	6801      	ldr	r1, [r0, #0]
 8004fa0:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004fa4:	400b      	ands	r3, r1
 8004fa6:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8004faa:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8004fae:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8004fb2:	6003      	str	r3, [r0, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8004fb8:	0080      	lsls	r0, r0, #2
 8004fba:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8004fbe:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8004fc2:	6801      	ldr	r1, [r0, #0]
 8004fc4:	f640 630f 	movw	r3, #3599	; 0xe0f
 8004fc8:	400b      	ands	r3, r1
 8004fca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004fce:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8004fd2:	6001      	str	r1, [r0, #0]
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8004fd8:	0080      	lsls	r0, r0, #2
 8004fda:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8004fde:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 8004fe2:	6802      	ldr	r2, [r0, #0]
 8004fe4:	0451      	lsls	r1, r2, #17
 8004fe6:	d508      	bpl.n	8004ffa <ClearDTOG_RX+0x22>
 8004fe8:	6801      	ldr	r1, [r0, #0]
 8004fea:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004fee:	400b      	ands	r3, r1
 8004ff0:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8004ff4:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8004ff8:	6001      	str	r1, [r0, #0]
 8004ffa:	4770      	bx	lr

08004ffc <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8004ffc:	0080      	lsls	r0, r0, #2
 8004ffe:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005002:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	0650      	lsls	r0, r2, #25
 800500a:	d508      	bpl.n	800501e <ClearDTOG_TX+0x22>
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	f640 700f 	movw	r0, #3855	; 0xf0f
 8005012:	4008      	ands	r0, r1
 8005014:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 8005018:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 800501c:	6019      	str	r1, [r3, #0]
 800501e:	4770      	bx	lr

08005020 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8005020:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005024:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800502e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8005030:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005034:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8005038:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 800503c:	0042      	lsls	r2, r0, #1
 800503e:	400b      	ands	r3, r1
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4770      	bx	lr

08005044 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005044:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005048:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005052:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8005054:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800505c:	18c3      	adds	r3, r0, r3
 800505e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005062:	0058      	lsls	r0, r3, #1
 8005064:	400a      	ands	r2, r1
 8005066:	6002      	str	r2, [r0, #0]
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop

0800506c <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800506c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005070:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005074:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8005076:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005078:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800507c:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8005080:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8005084:	004a      	lsls	r2, r1, #1
}
 8005086:	8810      	ldrh	r0, [r2, #0]
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800508c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005090:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800509a:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800509c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80050a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80050a4:	1842      	adds	r2, r0, r1
 80050a6:	0051      	lsls	r1, r2, #1
}
 80050a8:	8808      	ldrh	r0, [r1, #0]
 80050aa:	4770      	bx	lr

080050ac <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80050ac:	f645 4350 	movw	r3, #23632	; 0x5c50
 80050b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80050ba:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80050bc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80050c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050c4:	18c3      	adds	r3, r0, r3
 80050c6:	005a      	lsls	r2, r3, #1
 80050c8:	6011      	str	r1, [r2, #0]
 80050ca:	4770      	bx	lr

080050cc <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80050cc:	f645 4350 	movw	r3, #23632	; 0x5c50
 80050d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80050da:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80050dc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80050e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050e4:	18c3      	adds	r3, r0, r3
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	293e      	cmp	r1, #62	; 0x3e
 80050ea:	d909      	bls.n	8005100 <SetEPRxCount+0x34>
 80050ec:	094a      	lsrs	r2, r1, #5
 80050ee:	06c9      	lsls	r1, r1, #27
 80050f0:	d101      	bne.n	80050f6 <SetEPRxCount+0x2a>
 80050f2:	1e50      	subs	r0, r2, #1
 80050f4:	b282      	uxth	r2, r0
 80050f6:	0291      	lsls	r1, r2, #10
 80050f8:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80050fc:	6018      	str	r0, [r3, #0]
 80050fe:	4770      	bx	lr
 8005100:	084a      	lsrs	r2, r1, #1
 8005102:	07c8      	lsls	r0, r1, #31
 8005104:	bf48      	it	mi
 8005106:	3201      	addmi	r2, #1
 8005108:	0291      	lsls	r1, r2, #10
 800510a:	6019      	str	r1, [r3, #0]
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8005110:	f645 4350 	movw	r3, #23632	; 0x5c50
 8005114:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800511e:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8005120:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005124:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005128:	1842      	adds	r2, r0, r1
 800512a:	0051      	lsls	r1, r2, #1
 800512c:	680b      	ldr	r3, [r1, #0]
}
 800512e:	0598      	lsls	r0, r3, #22
 8005130:	0d80      	lsrs	r0, r0, #22
 8005132:	4770      	bx	lr

08005134 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8005134:	b2c3      	uxtb	r3, r0
 8005136:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8005138:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop

08005140 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8005140:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8005142:	f641 433c 	movw	r3, #7228	; 0x1c3c
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005146:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800514a:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800514e:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005152:	2000      	movs	r0, #0
 8005154:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8005158:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800515c:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8005160:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8005162:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8005164:	6011      	str	r1, [r2, #0]
  return 0;
}
 8005166:	bc10      	pop	{r4}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800516c:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800516e:	f245 1311 	movw	r3, #20753	; 0x5111
 8005172:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8005176:	f6c0 0300 	movt	r3, #2048	; 0x800
 800517a:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800517c:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800517e:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005180:	f245 018d 	movw	r1, #20621	; 0x508d
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8005184:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8005186:	f6c0 0100 	movt	r1, #2048	; 0x800
 800518a:	4628      	mov	r0, r5
 800518c:	4788      	blx	r1
 800518e:	f644 6375 	movw	r3, #20085	; 0x4e75
 8005192:	4601      	mov	r1, r0
 8005194:	4622      	mov	r2, r4
 8005196:	4630      	mov	r0, r6
 8005198:	f6c0 0300 	movt	r3, #2048	; 0x800
 800519c:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 800519e:	4620      	mov	r0, r4
 80051a0:	bd70      	pop	{r4, r5, r6, pc}
 80051a2:	bf00      	nop

080051a4 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8005358 <CTR_LP+0x1b4>
 80051ac:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80051ae:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80051b2:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80051b4:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800535c <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80051b8:	4d62      	ldr	r5, [pc, #392]	; (8005344 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80051ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80051be:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80051c2:	46d0      	mov	r8, sl
 80051c4:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80051c8:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80051cc:	b282      	uxth	r2, r0
 80051ce:	0403      	lsls	r3, r0, #16
 80051d0:	f8aa 2000 	strh.w	r2, [sl]
 80051d4:	f140 80ab 	bpl.w	800532e <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80051d8:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80051dc:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80051e0:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80051e4:	0090      	lsls	r0, r2, #2
 80051e6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80051ea:	4e57      	ldr	r6, [pc, #348]	; (8005348 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80051ec:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80051f0:	4f54      	ldr	r7, [pc, #336]	; (8005344 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 80051f2:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80051f4:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80051f8:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	d133      	bne.n	8005268 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	b290      	uxth	r0, r2
 8005204:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8005206:	882b      	ldrh	r3, [r5, #0]
 8005208:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800520c:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800520e:	8828      	ldrh	r0, [r5, #0]
 8005210:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8005214:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	4011      	ands	r1, r2
 800521a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800521e:	f081 0020 	eor.w	r0, r1, #32
 8005222:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8005226:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800522a:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800522c:	f8b8 1000 	ldrh.w	r1, [r8]
 8005230:	f001 0010 	and.w	r0, r1, #16
 8005234:	b283      	uxth	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d049      	beq.n	80052ce <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	b291      	uxth	r1, r2
 800523e:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8005242:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005246:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 800524a:	b29a      	uxth	r2, r3
 800524c:	2a00      	cmp	r2, #0
 800524e:	d171      	bne.n	8005334 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8005250:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005254:	b208      	sxth	r0, r1
 8005256:	2800      	cmp	r0, #0
 8005258:	dab4      	bge.n	80051c4 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005260:	4013      	ands	r3, r2
 8005262:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8005264:	4939      	ldr	r1, [pc, #228]	; (800534c <CTR_LP+0x1a8>)
 8005266:	e038      	b.n	80052da <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005268:	6804      	ldr	r4, [r0, #0]
 800526a:	b2a1      	uxth	r1, r4
 800526c:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8005270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005274:	b214      	sxth	r4, r2
 8005276:	2c00      	cmp	r4, #0
 8005278:	db1b      	blt.n	80052b2 <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800527a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800527e:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8005282:	b293      	uxth	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d09d      	beq.n	80051c4 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005288:	f899 4000 	ldrb.w	r4, [r9]
 800528c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8005290:	00a0      	lsls	r0, r4, #2
 8005292:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8005296:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 800529a:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800529c:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800529e:	4003      	ands	r3, r0
 80052a0:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80052a2:	f240 031c 	movw	r3, #28
 80052a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052aa:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80052ae:	4788      	blx	r1
 80052b0:	e788      	b.n	80051c4 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80052b2:	6801      	ldr	r1, [r0, #0]
 80052b4:	f640 728f 	movw	r2, #3983	; 0xf8f
 80052b8:	400a      	ands	r2, r1
 80052ba:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80052bc:	f240 0038 	movw	r0, #56	; 0x38
 80052c0:	3b01      	subs	r3, #1
 80052c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80052c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80052ca:	47a0      	blx	r4
 80052cc:	e7d5      	b.n	800527a <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80052ce:	6821      	ldr	r1, [r4, #0]
 80052d0:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80052d4:	400b      	ands	r3, r1
        In0_Process();
 80052d6:	491e      	ldr	r1, [pc, #120]	; (8005350 <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80052d8:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80052da:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	883a      	ldrh	r2, [r7, #0]
 80052e0:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80052e4:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 80052e8:	b28a      	uxth	r2, r1
 80052ea:	4003      	ands	r3, r0
 80052ec:	b10a      	cbz	r2, 80052f2 <CTR_LP+0x14e>
 80052ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052f2:	8838      	ldrh	r0, [r7, #0]
 80052f4:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 80052f8:	b28a      	uxth	r2, r1
 80052fa:	b10a      	cbz	r2, 8005300 <CTR_LP+0x15c>
 80052fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005300:	8830      	ldrh	r0, [r6, #0]
 8005302:	f000 0110 	and.w	r1, r0, #16
 8005306:	b28a      	uxth	r2, r1
 8005308:	b10a      	cbz	r2, 800530e <CTR_LP+0x16a>
 800530a:	f083 0310 	eor.w	r3, r3, #16
 800530e:	8830      	ldrh	r0, [r6, #0]
 8005310:	f000 0120 	and.w	r1, r0, #32
 8005314:	b28a      	uxth	r2, r1
 8005316:	b10a      	cbz	r2, 800531c <CTR_LP+0x178>
 8005318:	f083 0320 	eor.w	r3, r3, #32
 800531c:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8005320:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8005324:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8005328:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800532c:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800532e:	b003      	add	sp, #12
 8005330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	f640 728f 	movw	r2, #3983	; 0xf8f
 800533a:	4002      	ands	r2, r0
 800533c:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 800533e:	4905      	ldr	r1, [pc, #20]	; (8005354 <CTR_LP+0x1b0>)
 8005340:	e7cb      	b.n	80052da <CTR_LP+0x136>
 8005342:	bf00      	nop
 8005344:	20001c3e 	.word	0x20001c3e
 8005348:	20001c40 	.word	0x20001c40
 800534c:	08004829 	.word	0x08004829
 8005350:	08004d49 	.word	0x08004d49
 8005354:	08004919 	.word	0x08004919
 8005358:	200013e0 	.word	0x200013e0
 800535c:	20001c14 	.word	0x20001c14

08005360 <__errno>:
 8005360:	f240 5310 	movw	r3, #1296	; 0x510
 8005364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	4770      	bx	lr

0800536c <sscanf>:
 800536c:	b40e      	push	{r1, r2, r3}
 800536e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005370:	b09c      	sub	sp, #112	; 0x70
 8005372:	ac21      	add	r4, sp, #132	; 0x84
 8005374:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005378:	f854 6b04 	ldr.w	r6, [r4], #4
 800537c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	f000 f910 	bl	80055a8 <strlen>
 8005388:	4607      	mov	r7, r0
 800538a:	f240 5010 	movw	r0, #1296	; 0x510
 800538e:	2500      	movs	r5, #0
 8005390:	4632      	mov	r2, r6
 8005392:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005396:	f245 36c9 	movw	r6, #21449	; 0x53c9
 800539a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800539e:	950e      	str	r5, [sp, #56]	; 0x38
 80053a0:	9513      	str	r5, [sp, #76]	; 0x4c
 80053a2:	a902      	add	r1, sp, #8
 80053a4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80053a8:	4623      	mov	r3, r4
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	9703      	str	r7, [sp, #12]
 80053ae:	9707      	str	r7, [sp, #28]
 80053b0:	960a      	str	r6, [sp, #40]	; 0x28
 80053b2:	f8ad 5016 	strh.w	r5, [sp, #22]
 80053b6:	9401      	str	r4, [sp, #4]
 80053b8:	f000 f9f0 	bl	800579c <__ssvfscanf_r>
 80053bc:	b01c      	add	sp, #112	; 0x70
 80053be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80053c2:	b003      	add	sp, #12
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop

080053c8 <__seofread>:
 80053c8:	2000      	movs	r0, #0
 80053ca:	4770      	bx	lr

080053cc <strcmp>:
 80053cc:	ea80 0201 	eor.w	r2, r0, r1
 80053d0:	f012 0f03 	tst.w	r2, #3
 80053d4:	f040 803a 	bne.w	800544c <strcmp_unaligned>
 80053d8:	f010 0203 	ands.w	r2, r0, #3
 80053dc:	f020 0003 	bic.w	r0, r0, #3
 80053e0:	f021 0103 	bic.w	r1, r1, #3
 80053e4:	f850 cb04 	ldr.w	ip, [r0], #4
 80053e8:	bf08      	it	eq
 80053ea:	f851 3b04 	ldreq.w	r3, [r1], #4
 80053ee:	d00d      	beq.n	800540c <strcmp+0x40>
 80053f0:	f082 0203 	eor.w	r2, r2, #3
 80053f4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80053f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80053fc:	fa23 f202 	lsr.w	r2, r3, r2
 8005400:	f851 3b04 	ldr.w	r3, [r1], #4
 8005404:	ea4c 0c02 	orr.w	ip, ip, r2
 8005408:	ea43 0302 	orr.w	r3, r3, r2
 800540c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8005410:	459c      	cmp	ip, r3
 8005412:	bf01      	itttt	eq
 8005414:	ea22 020c 	biceq.w	r2, r2, ip
 8005418:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 800541c:	f850 cb04 	ldreq.w	ip, [r0], #4
 8005420:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005424:	d0f2      	beq.n	800540c <strcmp+0x40>
 8005426:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800542a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800542e:	2801      	cmp	r0, #1
 8005430:	bf28      	it	cs
 8005432:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8005436:	bf08      	it	eq
 8005438:	0a1b      	lsreq	r3, r3, #8
 800543a:	d0f4      	beq.n	8005426 <strcmp+0x5a>
 800543c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005440:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8005444:	eba0 0003 	sub.w	r0, r0, r3
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop

0800544c <strcmp_unaligned>:
 800544c:	f010 0f03 	tst.w	r0, #3
 8005450:	d00a      	beq.n	8005468 <strcmp_unaligned+0x1c>
 8005452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545a:	2a01      	cmp	r2, #1
 800545c:	bf28      	it	cs
 800545e:	429a      	cmpcs	r2, r3
 8005460:	d0f4      	beq.n	800544c <strcmp_unaligned>
 8005462:	eba2 0003 	sub.w	r0, r2, r3
 8005466:	4770      	bx	lr
 8005468:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800546c:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8005470:	f04f 0201 	mov.w	r2, #1
 8005474:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8005478:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800547c:	f001 0c03 	and.w	ip, r1, #3
 8005480:	f021 0103 	bic.w	r1, r1, #3
 8005484:	f850 4b04 	ldr.w	r4, [r0], #4
 8005488:	f851 5b04 	ldr.w	r5, [r1], #4
 800548c:	f1bc 0f02 	cmp.w	ip, #2
 8005490:	d026      	beq.n	80054e0 <strcmp_unaligned+0x94>
 8005492:	d84b      	bhi.n	800552c <strcmp_unaligned+0xe0>
 8005494:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8005498:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 800549c:	eba4 0302 	sub.w	r3, r4, r2
 80054a0:	ea23 0304 	bic.w	r3, r3, r4
 80054a4:	d10d      	bne.n	80054c2 <strcmp_unaligned+0x76>
 80054a6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80054aa:	bf08      	it	eq
 80054ac:	f851 5b04 	ldreq.w	r5, [r1], #4
 80054b0:	d10a      	bne.n	80054c8 <strcmp_unaligned+0x7c>
 80054b2:	ea8c 0c04 	eor.w	ip, ip, r4
 80054b6:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 80054ba:	d10c      	bne.n	80054d6 <strcmp_unaligned+0x8a>
 80054bc:	f850 4b04 	ldr.w	r4, [r0], #4
 80054c0:	e7e8      	b.n	8005494 <strcmp_unaligned+0x48>
 80054c2:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80054c6:	e05c      	b.n	8005582 <strcmp_unaligned+0x136>
 80054c8:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 80054cc:	d152      	bne.n	8005574 <strcmp_unaligned+0x128>
 80054ce:	780d      	ldrb	r5, [r1, #0]
 80054d0:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80054d4:	e055      	b.n	8005582 <strcmp_unaligned+0x136>
 80054d6:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80054da:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80054de:	e050      	b.n	8005582 <strcmp_unaligned+0x136>
 80054e0:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 80054e4:	eba4 0302 	sub.w	r3, r4, r2
 80054e8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80054ec:	ea23 0304 	bic.w	r3, r3, r4
 80054f0:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 80054f4:	d117      	bne.n	8005526 <strcmp_unaligned+0xda>
 80054f6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80054fa:	bf08      	it	eq
 80054fc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8005500:	d107      	bne.n	8005512 <strcmp_unaligned+0xc6>
 8005502:	ea8c 0c04 	eor.w	ip, ip, r4
 8005506:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800550a:	d108      	bne.n	800551e <strcmp_unaligned+0xd2>
 800550c:	f850 4b04 	ldr.w	r4, [r0], #4
 8005510:	e7e6      	b.n	80054e0 <strcmp_unaligned+0x94>
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	d12e      	bne.n	8005574 <strcmp_unaligned+0x128>
 8005516:	880d      	ldrh	r5, [r1, #0]
 8005518:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800551c:	e031      	b.n	8005582 <strcmp_unaligned+0x136>
 800551e:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8005522:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005526:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800552a:	e02a      	b.n	8005582 <strcmp_unaligned+0x136>
 800552c:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8005530:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8005534:	eba4 0302 	sub.w	r3, r4, r2
 8005538:	ea23 0304 	bic.w	r3, r3, r4
 800553c:	d10d      	bne.n	800555a <strcmp_unaligned+0x10e>
 800553e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8005542:	bf08      	it	eq
 8005544:	f851 5b04 	ldreq.w	r5, [r1], #4
 8005548:	d10a      	bne.n	8005560 <strcmp_unaligned+0x114>
 800554a:	ea8c 0c04 	eor.w	ip, ip, r4
 800554e:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8005552:	d10a      	bne.n	800556a <strcmp_unaligned+0x11e>
 8005554:	f850 4b04 	ldr.w	r4, [r0], #4
 8005558:	e7e8      	b.n	800552c <strcmp_unaligned+0xe0>
 800555a:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800555e:	e010      	b.n	8005582 <strcmp_unaligned+0x136>
 8005560:	f014 0fff 	tst.w	r4, #255	; 0xff
 8005564:	d006      	beq.n	8005574 <strcmp_unaligned+0x128>
 8005566:	f851 5b04 	ldr.w	r5, [r1], #4
 800556a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800556e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8005572:	e006      	b.n	8005582 <strcmp_unaligned+0x136>
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800557c:	f85d 5b04 	ldr.w	r5, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8005586:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800558a:	2801      	cmp	r0, #1
 800558c:	bf28      	it	cs
 800558e:	4290      	cmpcs	r0, r2
 8005590:	bf04      	itt	eq
 8005592:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8005596:	0a2d      	lsreq	r5, r5, #8
 8005598:	d0f3      	beq.n	8005582 <strcmp_unaligned+0x136>
 800559a:	eba2 0000 	sub.w	r0, r2, r0
 800559e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a2:	f85d 5b04 	ldr.w	r5, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <strlen>:
 80055a8:	f020 0103 	bic.w	r1, r0, #3
 80055ac:	f010 0003 	ands.w	r0, r0, #3
 80055b0:	f1c0 0000 	rsb	r0, r0, #0
 80055b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80055b8:	f100 0c04 	add.w	ip, r0, #4
 80055bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80055c0:	f06f 0200 	mvn.w	r2, #0
 80055c4:	bf1c      	itt	ne
 80055c6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80055ca:	4313      	orrne	r3, r2
 80055cc:	f04f 0c01 	mov.w	ip, #1
 80055d0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80055d4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80055d8:	eba3 020c 	sub.w	r2, r3, ip
 80055dc:	ea22 0203 	bic.w	r2, r2, r3
 80055e0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80055e4:	bf04      	itt	eq
 80055e6:	f851 3b04 	ldreq.w	r3, [r1], #4
 80055ea:	3004      	addeq	r0, #4
 80055ec:	d0f4      	beq.n	80055d8 <strlen+0x30>
 80055ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055f2:	bf1f      	itttt	ne
 80055f4:	3001      	addne	r0, #1
 80055f6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80055fa:	3001      	addne	r0, #1
 80055fc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8005600:	bf18      	it	ne
 8005602:	3001      	addne	r0, #1
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop

08005608 <strncmp>:
 8005608:	b4f0      	push	{r4, r5, r6, r7}
 800560a:	2a00      	cmp	r2, #0
 800560c:	f000 8083 	beq.w	8005716 <strncmp+0x10e>
 8005610:	ea41 0300 	orr.w	r3, r1, r0
 8005614:	f013 0503 	ands.w	r5, r3, #3
 8005618:	d02e      	beq.n	8005678 <strncmp+0x70>
 800561a:	1e55      	subs	r5, r2, #1
 800561c:	7803      	ldrb	r3, [r0, #0]
 800561e:	780a      	ldrb	r2, [r1, #0]
 8005620:	4293      	cmp	r3, r2
 8005622:	d126      	bne.n	8005672 <strncmp+0x6a>
 8005624:	2d00      	cmp	r5, #0
 8005626:	d07a      	beq.n	800571e <strncmp+0x116>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d07a      	beq.n	8005722 <strncmp+0x11a>
 800562c:	3501      	adds	r5, #1
 800562e:	1c8c      	adds	r4, r1, #2
 8005630:	194d      	adds	r5, r1, r5
 8005632:	1b2b      	subs	r3, r5, r4
 8005634:	07db      	lsls	r3, r3, #31
 8005636:	d516      	bpl.n	8005666 <strncmp+0x5e>
 8005638:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800563c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005640:	4293      	cmp	r3, r2
 8005642:	d116      	bne.n	8005672 <strncmp+0x6a>
 8005644:	1ccc      	adds	r4, r1, #3
 8005646:	b973      	cbnz	r3, 8005666 <strncmp+0x5e>
 8005648:	e036      	b.n	80056b8 <strncmp+0xb0>
 800564a:	42ac      	cmp	r4, r5
 800564c:	d034      	beq.n	80056b8 <strncmp+0xb0>
 800564e:	3401      	adds	r4, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d031      	beq.n	80056b8 <strncmp+0xb0>
 8005654:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005658:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800565c:	3401      	adds	r4, #1
 800565e:	4293      	cmp	r3, r2
 8005660:	d107      	bne.n	8005672 <strncmp+0x6a>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d028      	beq.n	80056b8 <strncmp+0xb0>
 8005666:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800566a:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800566e:	4293      	cmp	r3, r2
 8005670:	d0eb      	beq.n	800564a <strncmp+0x42>
 8005672:	1a98      	subs	r0, r3, r2
 8005674:	bcf0      	pop	{r4, r5, r6, r7}
 8005676:	4770      	bx	lr
 8005678:	2a03      	cmp	r2, #3
 800567a:	d9ce      	bls.n	800561a <strncmp+0x12>
 800567c:	6804      	ldr	r4, [r0, #0]
 800567e:	680b      	ldr	r3, [r1, #0]
 8005680:	429c      	cmp	r4, r3
 8005682:	d1ca      	bne.n	800561a <strncmp+0x12>
 8005684:	1f13      	subs	r3, r2, #4
 8005686:	d04c      	beq.n	8005722 <strncmp+0x11a>
 8005688:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800568c:	ea22 0404 	bic.w	r4, r2, r4
 8005690:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8005694:	d143      	bne.n	800571e <strncmp+0x116>
 8005696:	075a      	lsls	r2, r3, #29
 8005698:	d52f      	bpl.n	80056fa <strncmp+0xf2>
 800569a:	6842      	ldr	r2, [r0, #4]
 800569c:	684c      	ldr	r4, [r1, #4]
 800569e:	3004      	adds	r0, #4
 80056a0:	3104      	adds	r1, #4
 80056a2:	42a2      	cmp	r2, r4
 80056a4:	d139      	bne.n	800571a <strncmp+0x112>
 80056a6:	3b04      	subs	r3, #4
 80056a8:	d006      	beq.n	80056b8 <strncmp+0xb0>
 80056aa:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 80056ae:	ea24 0202 	bic.w	r2, r4, r2
 80056b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80056b6:	d020      	beq.n	80056fa <strncmp+0xf2>
 80056b8:	2000      	movs	r0, #0
 80056ba:	e7db      	b.n	8005674 <strncmp+0x6c>
 80056bc:	6872      	ldr	r2, [r6, #4]
 80056be:	6864      	ldr	r4, [r4, #4]
 80056c0:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 80056c4:	42a2      	cmp	r2, r4
 80056c6:	ea25 0502 	bic.w	r5, r5, r2
 80056ca:	d126      	bne.n	800571a <strncmp+0x112>
 80056cc:	3b04      	subs	r3, #4
 80056ce:	f100 0004 	add.w	r0, r0, #4
 80056d2:	f101 0104 	add.w	r1, r1, #4
 80056d6:	d0ef      	beq.n	80056b8 <strncmp+0xb0>
 80056d8:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80056dc:	d1ec      	bne.n	80056b8 <strncmp+0xb0>
 80056de:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80056e2:	687c      	ldr	r4, [r7, #4]
 80056e4:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 80056e8:	42a2      	cmp	r2, r4
 80056ea:	ea25 0502 	bic.w	r5, r5, r2
 80056ee:	d114      	bne.n	800571a <strncmp+0x112>
 80056f0:	3b04      	subs	r3, #4
 80056f2:	d0e1      	beq.n	80056b8 <strncmp+0xb0>
 80056f4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80056f8:	d1de      	bne.n	80056b8 <strncmp+0xb0>
 80056fa:	460c      	mov	r4, r1
 80056fc:	4606      	mov	r6, r0
 80056fe:	3104      	adds	r1, #4
 8005700:	3004      	adds	r0, #4
 8005702:	2b03      	cmp	r3, #3
 8005704:	4684      	mov	ip, r0
 8005706:	460f      	mov	r7, r1
 8005708:	d8d8      	bhi.n	80056bc <strncmp+0xb4>
 800570a:	1e5d      	subs	r5, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d185      	bne.n	800561c <strncmp+0x14>
 8005710:	7933      	ldrb	r3, [r6, #4]
 8005712:	7922      	ldrb	r2, [r4, #4]
 8005714:	e7ad      	b.n	8005672 <strncmp+0x6a>
 8005716:	4610      	mov	r0, r2
 8005718:	e7ac      	b.n	8005674 <strncmp+0x6c>
 800571a:	1e5d      	subs	r5, r3, #1
 800571c:	e77e      	b.n	800561c <strncmp+0x14>
 800571e:	4628      	mov	r0, r5
 8005720:	e7a8      	b.n	8005674 <strncmp+0x6c>
 8005722:	4618      	mov	r0, r3
 8005724:	e7a6      	b.n	8005674 <strncmp+0x6c>
 8005726:	bf00      	nop

08005728 <strtok>:
 8005728:	f240 5310 	movw	r3, #1296	; 0x510
 800572c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2301      	movs	r3, #1
 8005734:	325c      	adds	r2, #92	; 0x5c
 8005736:	f000 b801 	b.w	800573c <__strtok_r>
 800573a:	bf00      	nop

0800573c <__strtok_r>:
 800573c:	b4f0      	push	{r4, r5, r6, r7}
 800573e:	2800      	cmp	r0, #0
 8005740:	d025      	beq.n	800578e <__strtok_r+0x52>
 8005742:	4607      	mov	r7, r0
 8005744:	4638      	mov	r0, r7
 8005746:	783e      	ldrb	r6, [r7, #0]
 8005748:	460d      	mov	r5, r1
 800574a:	3701      	adds	r7, #1
 800574c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005750:	b13c      	cbz	r4, 8005762 <__strtok_r+0x26>
 8005752:	42a6      	cmp	r6, r4
 8005754:	d1fa      	bne.n	800574c <__strtok_r+0x10>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f4      	bne.n	8005744 <__strtok_r+0x8>
 800575a:	6017      	str	r7, [r2, #0]
 800575c:	f807 3c01 	strb.w	r3, [r7, #-1]
 8005760:	e011      	b.n	8005786 <__strtok_r+0x4a>
 8005762:	b1c6      	cbz	r6, 8005796 <__strtok_r+0x5a>
 8005764:	463d      	mov	r5, r7
 8005766:	e000      	b.n	800576a <__strtok_r+0x2e>
 8005768:	b91b      	cbnz	r3, 8005772 <__strtok_r+0x36>
 800576a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800576e:	460c      	mov	r4, r1
 8005770:	4628      	mov	r0, r5
 8005772:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005776:	429e      	cmp	r6, r3
 8005778:	d1f6      	bne.n	8005768 <__strtok_r+0x2c>
 800577a:	b136      	cbz	r6, 800578a <__strtok_r+0x4e>
 800577c:	2100      	movs	r1, #0
 800577e:	f805 1c01 	strb.w	r1, [r5, #-1]
 8005782:	6010      	str	r0, [r2, #0]
 8005784:	1e78      	subs	r0, r7, #1
 8005786:	bcf0      	pop	{r4, r5, r6, r7}
 8005788:	4770      	bx	lr
 800578a:	4630      	mov	r0, r6
 800578c:	e7f9      	b.n	8005782 <__strtok_r+0x46>
 800578e:	6810      	ldr	r0, [r2, #0]
 8005790:	2800      	cmp	r0, #0
 8005792:	d1d6      	bne.n	8005742 <__strtok_r+0x6>
 8005794:	e7f7      	b.n	8005786 <__strtok_r+0x4a>
 8005796:	6016      	str	r6, [r2, #0]
 8005798:	4630      	mov	r0, r6
 800579a:	e7f4      	b.n	8005786 <__strtok_r+0x4a>

0800579c <__ssvfscanf_r>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	468b      	mov	fp, r1
 80057a2:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80057a6:	4604      	mov	r4, r0
 80057a8:	4615      	mov	r5, r2
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	f001 f8d2 	bl	8006954 <__sfp_lock_acquire>
 80057b0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80057b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057b8:	b210      	sxth	r0, r2
 80057ba:	b948      	cbnz	r0, 80057d0 <__ssvfscanf_r+0x34>
 80057bc:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
 80057c0:	f443 5600 	orr.w	r6, r3, #8192	; 0x2000
 80057c4:	f421 5700 	bic.w	r7, r1, #8192	; 0x2000
 80057c8:	f8ab 600c 	strh.w	r6, [fp, #12]
 80057cc:	f8cb 7064 	str.w	r7, [fp, #100]	; 0x64
 80057d0:	462a      	mov	r2, r5
 80057d2:	4616      	mov	r6, r2
 80057d4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80057d8:	2700      	movs	r7, #0
 80057da:	9707      	str	r7, [sp, #28]
 80057dc:	970b      	str	r7, [sp, #44]	; 0x2c
 80057de:	46b9      	mov	r9, r7
 80057e0:	9709      	str	r7, [sp, #36]	; 0x24
 80057e2:	f8df a47c 	ldr.w	sl, [pc, #1148]	; 8005c60 <__ssvfscanf_r+0x4c4>
 80057e6:	9311      	str	r3, [sp, #68]	; 0x44
 80057e8:	b37b      	cbz	r3, 800584a <__ssvfscanf_r+0xae>
 80057ea:	f8da 0000 	ldr.w	r0, [sl]
 80057ee:	18c1      	adds	r1, r0, r3
 80057f0:	7849      	ldrb	r1, [r1, #1]
 80057f2:	f001 0108 	and.w	r1, r1, #8
 80057f6:	b2c9      	uxtb	r1, r1
 80057f8:	2900      	cmp	r1, #0
 80057fa:	d02d      	beq.n	8005858 <__ssvfscanf_r+0xbc>
 80057fc:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005800:	e014      	b.n	800582c <__ssvfscanf_r+0x90>
 8005802:	f8db 0000 	ldr.w	r0, [fp]
 8005806:	f8da 2000 	ldr.w	r2, [sl]
 800580a:	7801      	ldrb	r1, [r0, #0]
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	1850      	adds	r0, r2, r1
 8005810:	7842      	ldrb	r2, [r0, #1]
 8005812:	f002 0108 	and.w	r1, r2, #8
 8005816:	b2c8      	uxtb	r0, r1
 8005818:	b180      	cbz	r0, 800583c <__ssvfscanf_r+0xa0>
 800581a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800581e:	f109 0901 	add.w	r9, r9, #1
 8005822:	1e51      	subs	r1, r2, #1
 8005824:	f8cb 1004 	str.w	r1, [fp, #4]
 8005828:	f8cb 3000 	str.w	r3, [fp]
 800582c:	2900      	cmp	r1, #0
 800582e:	dce8      	bgt.n	8005802 <__ssvfscanf_r+0x66>
 8005830:	4620      	mov	r0, r4
 8005832:	4659      	mov	r1, fp
 8005834:	f002 ff8c 	bl	8008750 <__ssrefill_r>
 8005838:	2800      	cmp	r0, #0
 800583a:	d0e2      	beq.n	8005802 <__ssvfscanf_r+0x66>
 800583c:	4632      	mov	r2, r6
 800583e:	4616      	mov	r6, r2
 8005840:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005844:	9311      	str	r3, [sp, #68]	; 0x44
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1cf      	bne.n	80057ea <__ssvfscanf_r+0x4e>
 800584a:	f001 f885 	bl	8006958 <__sfp_lock_release>
 800584e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005850:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005858:	2b25      	cmp	r3, #37	; 0x25
 800585a:	d017      	beq.n	800588c <__ssvfscanf_r+0xf0>
 800585c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005860:	2900      	cmp	r1, #0
 8005862:	f340 8095 	ble.w	8005990 <__ssvfscanf_r+0x1f4>
 8005866:	f8db 3000 	ldr.w	r3, [fp]
 800586a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	4282      	cmp	r2, r0
 8005872:	d1ea      	bne.n	800584a <__ssvfscanf_r+0xae>
 8005874:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005878:	3301      	adds	r3, #1
 800587a:	1e48      	subs	r0, r1, #1
 800587c:	f8cb 0004 	str.w	r0, [fp, #4]
 8005880:	f8cb 3000 	str.w	r3, [fp]
 8005884:	f109 0901 	add.w	r9, r9, #1
 8005888:	4632      	mov	r2, r6
 800588a:	e7d8      	b.n	800583e <__ssvfscanf_r+0xa2>
 800588c:	7853      	ldrb	r3, [r2, #1]
 800588e:	4688      	mov	r8, r1
 8005890:	460d      	mov	r5, r1
 8005892:	1c72      	adds	r2, r6, #1
 8005894:	2b78      	cmp	r3, #120	; 0x78
 8005896:	f200 8416 	bhi.w	80060c6 <__ssvfscanf_r+0x92a>
 800589a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800589e:	042e      	.short	0x042e
 80058a0:	04140414 	.word	0x04140414
 80058a4:	04140414 	.word	0x04140414
 80058a8:	04140414 	.word	0x04140414
 80058ac:	04140414 	.word	0x04140414
 80058b0:	04140414 	.word	0x04140414
 80058b4:	04140414 	.word	0x04140414
 80058b8:	04140414 	.word	0x04140414
 80058bc:	04140414 	.word	0x04140414
 80058c0:	04140414 	.word	0x04140414
 80058c4:	04140414 	.word	0x04140414
 80058c8:	04140414 	.word	0x04140414
 80058cc:	04140414 	.word	0x04140414
 80058d0:	04140414 	.word	0x04140414
 80058d4:	04140414 	.word	0x04140414
 80058d8:	04140414 	.word	0x04140414
 80058dc:	04140414 	.word	0x04140414
 80058e0:	04140414 	.word	0x04140414
 80058e4:	04140414 	.word	0x04140414
 80058e8:	04140496 	.word	0x04140496
 80058ec:	04140414 	.word	0x04140414
 80058f0:	049a0414 	.word	0x049a0414
 80058f4:	04140414 	.word	0x04140414
 80058f8:	04140414 	.word	0x04140414
 80058fc:	04350414 	.word	0x04350414
 8005900:	04350435 	.word	0x04350435
 8005904:	04350435 	.word	0x04350435
 8005908:	04350435 	.word	0x04350435
 800590c:	04350435 	.word	0x04350435
 8005910:	04140435 	.word	0x04140435
 8005914:	04140414 	.word	0x04140414
 8005918:	04140414 	.word	0x04140414
 800591c:	04140414 	.word	0x04140414
 8005920:	04140414 	.word	0x04140414
 8005924:	043f0414 	.word	0x043f0414
 8005928:	04140443 	.word	0x04140443
 800592c:	04140443 	.word	0x04140443
 8005930:	04140414 	.word	0x04140414
 8005934:	04460414 	.word	0x04460414
 8005938:	04140414 	.word	0x04140414
 800593c:	0414044c 	.word	0x0414044c
 8005940:	04140414 	.word	0x04140414
 8005944:	04140414 	.word	0x04140414
 8005948:	04140414 	.word	0x04140414
 800594c:	04550414 	.word	0x04550414
 8005950:	04140414 	.word	0x04140414
 8005954:	0414045e 	.word	0x0414045e
 8005958:	04140414 	.word	0x04140414
 800595c:	04140414 	.word	0x04140414
 8005960:	04140414 	.word	0x04140414
 8005964:	046d0468 	.word	0x046d0468
 8005968:	04430443 	.word	0x04430443
 800596c:	046f0443 	.word	0x046f0443
 8005970:	04140475 	.word	0x04140475
 8005974:	047c0414 	.word	0x047c0414
 8005978:	04850414 	.word	0x04850414
 800597c:	04a004a8 	.word	0x04a004a8
 8005980:	04140414 	.word	0x04140414
 8005984:	041404a4 	.word	0x041404a4
 8005988:	04140090 	.word	0x04140090
 800598c:	04550414 	.word	0x04550414
 8005990:	4620      	mov	r0, r4
 8005992:	4659      	mov	r1, fp
 8005994:	f002 fedc 	bl	8008750 <__ssrefill_r>
 8005998:	2800      	cmp	r0, #0
 800599a:	f43f af64 	beq.w	8005866 <__ssvfscanf_r+0xca>
 800599e:	f000 ffdb 	bl	8006958 <__sfp_lock_release>
 80059a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059a4:	b13f      	cbz	r7, 80059b6 <__ssvfscanf_r+0x21a>
 80059a6:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 80059aa:	f002 0140 	and.w	r1, r2, #64	; 0x40
 80059ae:	b20b      	sxth	r3, r1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f43f af4c 	beq.w	800584e <__ssvfscanf_r+0xb2>
 80059b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80059ba:	9509      	str	r5, [sp, #36]	; 0x24
 80059bc:	e747      	b.n	800584e <__ssvfscanf_r+0xb2>
 80059be:	4fa7      	ldr	r7, [pc, #668]	; (8005c5c <__ssvfscanf_r+0x4c0>)
 80059c0:	200a      	movs	r0, #10
 80059c2:	9208      	str	r2, [sp, #32]
 80059c4:	9707      	str	r7, [sp, #28]
 80059c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80059c8:	2603      	movs	r6, #3
 80059ca:	f8db 1004 	ldr.w	r1, [fp, #4]
 80059ce:	2900      	cmp	r1, #0
 80059d0:	f340 838b 	ble.w	80060ea <__ssvfscanf_r+0x94e>
 80059d4:	f018 0f40 	tst.w	r8, #64	; 0x40
 80059d8:	d00f      	beq.n	80059fa <__ssvfscanf_r+0x25e>
 80059da:	3e01      	subs	r6, #1
 80059dc:	2e03      	cmp	r6, #3
 80059de:	f200 8119 	bhi.w	8005c14 <__ssvfscanf_r+0x478>
 80059e2:	e8df f016 	tbh	[pc, r6, lsl #1]
 80059e6:	01b1      	.short	0x01b1
 80059e8:	00240094 	.word	0x00240094
 80059ec:	013f      	.short	0x013f
 80059ee:	4620      	mov	r0, r4
 80059f0:	4659      	mov	r1, fp
 80059f2:	f002 fead 	bl	8008750 <__ssrefill_r>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1d1      	bne.n	800599e <__ssvfscanf_r+0x202>
 80059fa:	f8da 1000 	ldr.w	r1, [sl]
 80059fe:	f8db 3000 	ldr.w	r3, [fp]
 8005a02:	e001      	b.n	8005a08 <__ssvfscanf_r+0x26c>
 8005a04:	f8cb 3000 	str.w	r3, [fp]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	188a      	adds	r2, r1, r2
 8005a0e:	7852      	ldrb	r2, [r2, #1]
 8005a10:	f002 0208 	and.w	r2, r2, #8
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	2a00      	cmp	r2, #0
 8005a18:	d0df      	beq.n	80059da <__ssvfscanf_r+0x23e>
 8005a1a:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005a1e:	f109 0901 	add.w	r9, r9, #1
 8005a22:	3a01      	subs	r2, #1
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	f8cb 2004 	str.w	r2, [fp, #4]
 8005a2a:	dceb      	bgt.n	8005a04 <__ssvfscanf_r+0x268>
 8005a2c:	e7df      	b.n	80059ee <__ssvfscanf_r+0x252>
 8005a2e:	1e68      	subs	r0, r5, #1
 8005a30:	f5b0 7fae 	cmp.w	r0, #348	; 0x15c
 8005a34:	bf84      	itt	hi
 8005a36:	f46f 76ae 	mvnhi.w	r6, #348	; 0x15c
 8005a3a:	19a8      	addhi	r0, r5, r6
 8005a3c:	af56      	add	r7, sp, #344	; 0x158
 8005a3e:	bf88      	it	hi
 8005a40:	f240 155d 	movwhi	r5, #349	; 0x15d
 8005a44:	f04f 0e00 	mov.w	lr, #0
 8005a48:	bf98      	it	ls
 8005a4a:	2000      	movls	r0, #0
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005a50:	46cc      	mov	ip, r9
 8005a52:	f448 6858 	orr.w	r8, r8, #3456	; 0xd80
 8005a56:	f8cd e018 	str.w	lr, [sp, #24]
 8005a5a:	463e      	mov	r6, r7
 8005a5c:	4681      	mov	r9, r0
 8005a5e:	f8db 2000 	ldr.w	r2, [fp]
 8005a62:	7810      	ldrb	r0, [r2, #0]
 8005a64:	f1a0 012b 	sub.w	r1, r0, #43	; 0x2b
 8005a68:	294d      	cmp	r1, #77	; 0x4d
 8005a6a:	f200 81d3 	bhi.w	8005e14 <__ssvfscanf_r+0x678>
 8005a6e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005a72:	0213      	.short	0x0213
 8005a74:	021301d1 	.word	0x021301d1
 8005a78:	01d101d1 	.word	0x01d101d1
 8005a7c:	01ee0205 	.word	0x01ee0205
 8005a80:	01ee01ee 	.word	0x01ee01ee
 8005a84:	01ee01ee 	.word	0x01ee01ee
 8005a88:	01ee01ee 	.word	0x01ee01ee
 8005a8c:	01fc01fc 	.word	0x01fc01fc
 8005a90:	01d101d1 	.word	0x01d101d1
 8005a94:	01d101d1 	.word	0x01d101d1
 8005a98:	01d101d1 	.word	0x01d101d1
 8005a9c:	01f701d1 	.word	0x01f701d1
 8005aa0:	01f701f7 	.word	0x01f701f7
 8005aa4:	01f701f7 	.word	0x01f701f7
 8005aa8:	01d101f7 	.word	0x01d101f7
 8005aac:	01d101d1 	.word	0x01d101d1
 8005ab0:	01d101d1 	.word	0x01d101d1
 8005ab4:	01d101d1 	.word	0x01d101d1
 8005ab8:	01d101d1 	.word	0x01d101d1
 8005abc:	01d101d1 	.word	0x01d101d1
 8005ac0:	01d101d1 	.word	0x01d101d1
 8005ac4:	01d101d1 	.word	0x01d101d1
 8005ac8:	01d101d1 	.word	0x01d101d1
 8005acc:	01d101b7 	.word	0x01d101b7
 8005ad0:	01d101d1 	.word	0x01d101d1
 8005ad4:	01d101d1 	.word	0x01d101d1
 8005ad8:	01d101d1 	.word	0x01d101d1
 8005adc:	01f701d1 	.word	0x01f701d1
 8005ae0:	01f701f7 	.word	0x01f701f7
 8005ae4:	01f701f7 	.word	0x01f701f7
 8005ae8:	01d101f7 	.word	0x01d101f7
 8005aec:	01d101d1 	.word	0x01d101d1
 8005af0:	01d101d1 	.word	0x01d101d1
 8005af4:	01d101d1 	.word	0x01d101d1
 8005af8:	01d101d1 	.word	0x01d101d1
 8005afc:	01d101d1 	.word	0x01d101d1
 8005b00:	01d101d1 	.word	0x01d101d1
 8005b04:	01d101d1 	.word	0x01d101d1
 8005b08:	01d101d1 	.word	0x01d101d1
 8005b0c:	01b7      	.short	0x01b7
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	bf08      	it	eq
 8005b12:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
 8005b16:	f018 0601 	ands.w	r6, r8, #1
 8005b1a:	f040 836a 	bne.w	80061f2 <__ssvfscanf_r+0xa56>
 8005b1e:	f018 0f10 	tst.w	r8, #16
 8005b22:	f040 8448 	bne.w	80063b6 <__ssvfscanf_r+0xc1a>
 8005b26:	9f05      	ldr	r7, [sp, #20]
 8005b28:	9a05      	ldr	r2, [sp, #20]
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	1d10      	adds	r0, r2, #4
 8005b2e:	1c4f      	adds	r7, r1, #1
 8005b30:	194e      	adds	r6, r1, r5
 8005b32:	1bf5      	subs	r5, r6, r7
 8005b34:	07eb      	lsls	r3, r5, #31
 8005b36:	9106      	str	r1, [sp, #24]
 8005b38:	9005      	str	r0, [sp, #20]
 8005b3a:	f8db 2000 	ldr.w	r2, [fp]
 8005b3e:	d51e      	bpl.n	8005b7e <__ssvfscanf_r+0x3e2>
 8005b40:	7813      	ldrb	r3, [r2, #0]
 8005b42:	f8da 1000 	ldr.w	r1, [sl]
 8005b46:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005b4a:	18c8      	adds	r0, r1, r3
 8005b4c:	7845      	ldrb	r5, [r0, #1]
 8005b4e:	f005 0308 	and.w	r3, r5, #8
 8005b52:	b2d9      	uxtb	r1, r3
 8005b54:	2900      	cmp	r1, #0
 8005b56:	f040 848a 	bne.w	800646e <__ssvfscanf_r+0xcd2>
 8005b5a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005b5e:	46b8      	mov	r8, r7
 8005b60:	1e45      	subs	r5, r0, #1
 8005b62:	f8cb 5004 	str.w	r5, [fp, #4]
 8005b66:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005b6a:	f807 3c01 	strb.w	r3, [r7, #-1]
 8005b6e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005b72:	f8cb 2000 	str.w	r2, [fp]
 8005b76:	2900      	cmp	r1, #0
 8005b78:	f340 8599 	ble.w	80066ae <__ssvfscanf_r+0xf12>
 8005b7c:	3701      	adds	r7, #1
 8005b7e:	7815      	ldrb	r5, [r2, #0]
 8005b80:	4610      	mov	r0, r2
 8005b82:	f8da 2000 	ldr.w	r2, [sl]
 8005b86:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8005b8a:	1953      	adds	r3, r2, r5
 8005b8c:	7859      	ldrb	r1, [r3, #1]
 8005b8e:	1c7d      	adds	r5, r7, #1
 8005b90:	f001 0208 	and.w	r2, r1, #8
 8005b94:	b2d3      	uxtb	r3, r2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8469 	bne.w	800646e <__ssvfscanf_r+0xcd2>
 8005b9c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005ba0:	46b8      	mov	r8, r7
 8005ba2:	1e4a      	subs	r2, r1, #1
 8005ba4:	f8cb 2004 	str.w	r2, [fp, #4]
 8005ba8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005bac:	42b7      	cmp	r7, r6
 8005bae:	f807 3c01 	strb.w	r3, [r7, #-1]
 8005bb2:	f8cb 0000 	str.w	r0, [fp]
 8005bb6:	f000 845a 	beq.w	800646e <__ssvfscanf_r+0xcd2>
 8005bba:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005bbe:	2900      	cmp	r1, #0
 8005bc0:	f340 83f0 	ble.w	80063a4 <__ssvfscanf_r+0xc08>
 8005bc4:	f8da 1000 	ldr.w	r1, [sl]
 8005bc8:	4602      	mov	r2, r0
 8005bca:	7800      	ldrb	r0, [r0, #0]
 8005bcc:	46b8      	mov	r8, r7
 8005bce:	180f      	adds	r7, r1, r0
 8005bd0:	787b      	ldrb	r3, [r7, #1]
 8005bd2:	1c6f      	adds	r7, r5, #1
 8005bd4:	f003 0108 	and.w	r1, r3, #8
 8005bd8:	b2c8      	uxtb	r0, r1
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f040 8447 	bne.w	800646e <__ssvfscanf_r+0xcd2>
 8005be0:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005be4:	46a8      	mov	r8, r5
 8005be6:	1e59      	subs	r1, r3, #1
 8005be8:	f8cb 1004 	str.w	r1, [fp, #4]
 8005bec:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005bf0:	f805 0c01 	strb.w	r0, [r5, #-1]
 8005bf4:	f8db 5004 	ldr.w	r5, [fp, #4]
 8005bf8:	f8cb 2000 	str.w	r2, [fp]
 8005bfc:	2d00      	cmp	r5, #0
 8005bfe:	dcbe      	bgt.n	8005b7e <__ssvfscanf_r+0x3e2>
 8005c00:	4620      	mov	r0, r4
 8005c02:	4659      	mov	r1, fp
 8005c04:	f002 fda4 	bl	8008750 <__ssrefill_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	f040 8430 	bne.w	800646e <__ssvfscanf_r+0xcd2>
 8005c0e:	f8db 2000 	ldr.w	r2, [fp]
 8005c12:	e7b4      	b.n	8005b7e <__ssvfscanf_r+0x3e2>
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	bf08      	it	eq
 8005c18:	2501      	moveq	r5, #1
 8005c1a:	f018 0601 	ands.w	r6, r8, #1
 8005c1e:	f040 8459 	bne.w	80064d4 <__ssvfscanf_r+0xd38>
 8005c22:	f018 0f10 	tst.w	r8, #16
 8005c26:	f000 84ce 	beq.w	80065c6 <__ssvfscanf_r+0xe2a>
 8005c2a:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	42aa      	cmp	r2, r5
 8005c32:	4659      	mov	r1, fp
 8005c34:	f8db 3000 	ldr.w	r3, [fp]
 8005c38:	f280 84f5 	bge.w	8006626 <__ssvfscanf_r+0xe8a>
 8005c3c:	189b      	adds	r3, r3, r2
 8005c3e:	f8cb 3000 	str.w	r3, [fp]
 8005c42:	18b6      	adds	r6, r6, r2
 8005c44:	1aad      	subs	r5, r5, r2
 8005c46:	f002 fd83 	bl	8008750 <__ssrefill_r>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d0ed      	beq.n	8005c2a <__ssvfscanf_r+0x48e>
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	f43f aea5 	beq.w	800599e <__ssvfscanf_r+0x202>
 8005c54:	44b1      	add	r9, r6
 8005c56:	9e08      	ldr	r6, [sp, #32]
 8005c58:	4632      	mov	r2, r6
 8005c5a:	e5f0      	b.n	800583e <__ssvfscanf_r+0xa2>
 8005c5c:	08008391 	.word	0x08008391
 8005c60:	200000e4 	.word	0x200000e4
 8005c64:	1e6b      	subs	r3, r5, #1
 8005c66:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005c6a:	bf84      	itt	hi
 8005c6c:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8005c70:	182b      	addhi	r3, r5, r0
 8005c72:	a956      	add	r1, sp, #344	; 0x158
 8005c74:	bf8c      	ite	hi
 8005c76:	f240 155d 	movwhi	r5, #349	; 0x15d
 8005c7a:	2300      	movls	r3, #0
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	f448 67f0 	orr.w	r7, r8, #1920	; 0x780
 8005c82:	940a      	str	r4, [sp, #40]	; 0x28
 8005c84:	9104      	str	r1, [sp, #16]
 8005c86:	46b4      	mov	ip, r6
 8005c88:	960c      	str	r6, [sp, #48]	; 0x30
 8005c8a:	960e      	str	r6, [sp, #56]	; 0x38
 8005c8c:	9606      	str	r6, [sp, #24]
 8005c8e:	960d      	str	r6, [sp, #52]	; 0x34
 8005c90:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 8005c94:	4634      	mov	r4, r6
 8005c96:	f8db 2000 	ldr.w	r2, [fp]
 8005c9a:	7810      	ldrb	r0, [r2, #0]
 8005c9c:	f1a0 012b 	sub.w	r1, r0, #43	; 0x2b
 8005ca0:	294e      	cmp	r1, #78	; 0x4e
 8005ca2:	f200 8117 	bhi.w	8005ed4 <__ssvfscanf_r+0x738>
 8005ca6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005caa:	01a7      	.short	0x01a7
 8005cac:	01a70115 	.word	0x01a70115
 8005cb0:	011501b9 	.word	0x011501b9
 8005cb4:	00fd01ad 	.word	0x00fd01ad
 8005cb8:	00fd00fd 	.word	0x00fd00fd
 8005cbc:	00fd00fd 	.word	0x00fd00fd
 8005cc0:	00fd00fd 	.word	0x00fd00fd
 8005cc4:	00fd00fd 	.word	0x00fd00fd
 8005cc8:	01150115 	.word	0x01150115
 8005ccc:	01150115 	.word	0x01150115
 8005cd0:	01150115 	.word	0x01150115
 8005cd4:	01c00115 	.word	0x01c00115
 8005cd8:	01150115 	.word	0x01150115
 8005cdc:	01cc0115 	.word	0x01cc0115
 8005ce0:	011501c7 	.word	0x011501c7
 8005ce4:	01ff0115 	.word	0x01ff0115
 8005ce8:	01150115 	.word	0x01150115
 8005cec:	01150115 	.word	0x01150115
 8005cf0:	011501ec 	.word	0x011501ec
 8005cf4:	01150115 	.word	0x01150115
 8005cf8:	01150115 	.word	0x01150115
 8005cfc:	011501e7 	.word	0x011501e7
 8005d00:	01150115 	.word	0x01150115
 8005d04:	01e20115 	.word	0x01e20115
 8005d08:	01150115 	.word	0x01150115
 8005d0c:	01150115 	.word	0x01150115
 8005d10:	01150115 	.word	0x01150115
 8005d14:	01c00115 	.word	0x01c00115
 8005d18:	01150115 	.word	0x01150115
 8005d1c:	01cc0115 	.word	0x01cc0115
 8005d20:	011501c7 	.word	0x011501c7
 8005d24:	01ff0115 	.word	0x01ff0115
 8005d28:	01150115 	.word	0x01150115
 8005d2c:	01150115 	.word	0x01150115
 8005d30:	011501ec 	.word	0x011501ec
 8005d34:	01150115 	.word	0x01150115
 8005d38:	01150115 	.word	0x01150115
 8005d3c:	011501e7 	.word	0x011501e7
 8005d40:	01150115 	.word	0x01150115
 8005d44:	01e20115 	.word	0x01e20115
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	bf08      	it	eq
 8005d4c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
 8005d50:	f018 0f10 	tst.w	r8, #16
 8005d54:	f000 82a3 	beq.w	800629e <__ssvfscanf_r+0xb02>
 8005d58:	2600      	movs	r6, #0
 8005d5a:	07ea      	lsls	r2, r5, #31
 8005d5c:	f8db 3000 	ldr.w	r3, [fp]
 8005d60:	af16      	add	r7, sp, #88	; 0x58
 8005d62:	d40f      	bmi.n	8005d84 <__ssvfscanf_r+0x5e8>
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	5cb9      	ldrb	r1, [r7, r2]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	f43f ad6e 	beq.w	800584a <__ssvfscanf_r+0xae>
 8005d6e:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005d72:	3301      	adds	r3, #1
 8005d74:	1e70      	subs	r0, r6, #1
 8005d76:	2601      	movs	r6, #1
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f8cb 0004 	str.w	r0, [fp, #4]
 8005d7e:	f8cb 3000 	str.w	r3, [fp]
 8005d82:	dd23      	ble.n	8005dcc <__ssvfscanf_r+0x630>
 8005d84:	7819      	ldrb	r1, [r3, #0]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	5c78      	ldrb	r0, [r7, r1]
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f000 840a 	beq.w	80065a4 <__ssvfscanf_r+0xe08>
 8005d90:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005d94:	3601      	adds	r6, #1
 8005d96:	3b01      	subs	r3, #1
 8005d98:	42b5      	cmp	r5, r6
 8005d9a:	e88b 000c 	stmia.w	fp, {r2, r3}
 8005d9e:	46b0      	mov	r8, r6
 8005da0:	f43f af58 	beq.w	8005c54 <__ssvfscanf_r+0x4b8>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f340 8270 	ble.w	800628a <__ssvfscanf_r+0xaee>
 8005daa:	1c53      	adds	r3, r2, #1
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	5cb9      	ldrb	r1, [r7, r2]
 8005db0:	2900      	cmp	r1, #0
 8005db2:	f000 83f7 	beq.w	80065a4 <__ssvfscanf_r+0xe08>
 8005db6:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005dba:	f8cb 3000 	str.w	r3, [fp]
 8005dbe:	1e70      	subs	r0, r6, #1
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	f8cb 0004 	str.w	r0, [fp, #4]
 8005dc6:	f108 0601 	add.w	r6, r8, #1
 8005dca:	dcdb      	bgt.n	8005d84 <__ssvfscanf_r+0x5e8>
 8005dcc:	4620      	mov	r0, r4
 8005dce:	4659      	mov	r1, fp
 8005dd0:	f002 fcbe 	bl	8008750 <__ssrefill_r>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	f47f af3d 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 8005dda:	f8db 3000 	ldr.w	r3, [fp]
 8005dde:	e7d1      	b.n	8005d84 <__ssvfscanf_r+0x5e8>
 8005de0:	f408 61c0 	and.w	r1, r8, #1536	; 0x600
 8005de4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005de8:	d114      	bne.n	8005e14 <__ssvfscanf_r+0x678>
 8005dea:	f428 7800 	bic.w	r8, r8, #512	; 0x200
 8005dee:	f448 68a0 	orr.w	r8, r8, #1280	; 0x500
 8005df2:	2410      	movs	r4, #16
 8005df4:	f806 0b01 	strb.w	r0, [r6], #1
 8005df8:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005dfc:	1e41      	subs	r1, r0, #1
 8005dfe:	2900      	cmp	r1, #0
 8005e00:	f8cb 1004 	str.w	r1, [fp, #4]
 8005e04:	f340 8233 	ble.w	800626e <__ssvfscanf_r+0xad2>
 8005e08:	3201      	adds	r2, #1
 8005e0a:	f8cb 2000 	str.w	r2, [fp]
 8005e0e:	3d01      	subs	r5, #1
 8005e10:	f47f ae25 	bne.w	8005a5e <__ssvfscanf_r+0x2c2>
 8005e14:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005e18:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e1a:	46e1      	mov	r9, ip
 8005e1c:	461c      	mov	r4, r3
 8005e1e:	d00b      	beq.n	8005e38 <__ssvfscanf_r+0x69c>
 8005e20:	42be      	cmp	r6, r7
 8005e22:	d906      	bls.n	8005e32 <__ssvfscanf_r+0x696>
 8005e24:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	465a      	mov	r2, fp
 8005e2c:	f002 fc50 	bl	80086d0 <_sungetc_r>
 8005e30:	3e01      	subs	r6, #1
 8005e32:	42be      	cmp	r6, r7
 8005e34:	f43f ad09 	beq.w	800584a <__ssvfscanf_r+0xae>
 8005e38:	f018 0510 	ands.w	r5, r8, #16
 8005e3c:	f000 8333 	beq.w	80064a6 <__ssvfscanf_r+0xd0a>
 8005e40:	1bf6      	subs	r6, r6, r7
 8005e42:	9f06      	ldr	r7, [sp, #24]
 8005e44:	19f3      	adds	r3, r6, r7
 8005e46:	9e08      	ldr	r6, [sp, #32]
 8005e48:	4499      	add	r9, r3
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	e4f7      	b.n	800583e <__ssvfscanf_r+0xa2>
 8005e4e:	f64d 7120 	movw	r1, #57120	; 0xdf20
 8005e52:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005e56:	f931 4014 	ldrsh.w	r4, [r1, r4, lsl #1]
 8005e5a:	f428 6838 	bic.w	r8, r8, #2944	; 0xb80
 8005e5e:	e7c9      	b.n	8005df4 <__ssvfscanf_r+0x658>
 8005e60:	2c0a      	cmp	r4, #10
 8005e62:	ddd7      	ble.n	8005e14 <__ssvfscanf_r+0x678>
 8005e64:	f428 6838 	bic.w	r8, r8, #2944	; 0xb80
 8005e68:	e7c4      	b.n	8005df4 <__ssvfscanf_r+0x658>
 8005e6a:	f64d 7e20 	movw	lr, #57120	; 0xdf20
 8005e6e:	f6c0 0e00 	movt	lr, #2048	; 0x800
 8005e72:	f93e 4014 	ldrsh.w	r4, [lr, r4, lsl #1]
 8005e76:	2c08      	cmp	r4, #8
 8005e78:	dcf4      	bgt.n	8005e64 <__ssvfscanf_r+0x6c8>
 8005e7a:	e7cb      	b.n	8005e14 <__ssvfscanf_r+0x678>
 8005e7c:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8005e80:	d0b8      	beq.n	8005df4 <__ssvfscanf_r+0x658>
 8005e82:	b914      	cbnz	r4, 8005e8a <__ssvfscanf_r+0x6ee>
 8005e84:	f448 7800 	orr.w	r8, r8, #512	; 0x200
 8005e88:	2408      	movs	r4, #8
 8005e8a:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8005e8e:	f000 838e 	beq.w	80065ae <__ssvfscanf_r+0xe12>
 8005e92:	f428 68b0 	bic.w	r8, r8, #1408	; 0x580
 8005e96:	e7ad      	b.n	8005df4 <__ssvfscanf_r+0x658>
 8005e98:	f018 0f80 	tst.w	r8, #128	; 0x80
 8005e9c:	d0ba      	beq.n	8005e14 <__ssvfscanf_r+0x678>
 8005e9e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8005ea2:	e7a7      	b.n	8005df4 <__ssvfscanf_r+0x658>
 8005ea4:	eb0c 0106 	add.w	r1, ip, r6
 8005ea8:	b9a1      	cbnz	r1, 8005ed4 <__ssvfscanf_r+0x738>
 8005eaa:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
 8005eae:	f808 0b01 	strb.w	r0, [r8], #1
 8005eb2:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005eb6:	3d01      	subs	r5, #1
 8005eb8:	1e41      	subs	r1, r0, #1
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	f8cb 1004 	str.w	r1, [fp, #4]
 8005ec0:	f109 0901 	add.w	r9, r9, #1
 8005ec4:	f340 81bf 	ble.w	8006246 <__ssvfscanf_r+0xaaa>
 8005ec8:	3201      	adds	r2, #1
 8005eca:	f8cb 2000 	str.w	r2, [fp]
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	f47f aee1 	bne.w	8005c96 <__ssvfscanf_r+0x4fa>
 8005ed4:	9406      	str	r4, [sp, #24]
 8005ed6:	9806      	ldr	r0, [sp, #24]
 8005ed8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005eda:	2800      	cmp	r0, #0
 8005edc:	f040 81c4 	bne.w	8006268 <__ssvfscanf_r+0xacc>
 8005ee0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8005ee4:	2901      	cmp	r1, #1
 8005ee6:	f240 84ff 	bls.w	80068e8 <__ssvfscanf_r+0x114c>
 8005eea:	1e73      	subs	r3, r6, #1
 8005eec:	2b06      	cmp	r3, #6
 8005eee:	d83f      	bhi.n	8005f70 <__ssvfscanf_r+0x7d4>
 8005ef0:	2e02      	cmp	r6, #2
 8005ef2:	f240 84c9 	bls.w	8006888 <__ssvfscanf_r+0x10ec>
 8005ef6:	2e03      	cmp	r6, #3
 8005ef8:	d03a      	beq.n	8005f70 <__ssvfscanf_r+0x7d4>
 8005efa:	3e04      	subs	r6, #4
 8005efc:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8005f00:	b2f2      	uxtb	r2, r6
 8005f02:	ebc2 060c 	rsb	r6, r2, ip
 8005f06:	ebc8 0006 	rsb	r0, r8, r6
 8005f0a:	ea6f 0e00 	mvn.w	lr, r0
 8005f0e:	4665      	mov	r5, ip
 8005f10:	920a      	str	r2, [sp, #40]	; 0x28
 8005f12:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8005f16:	f00e 0301 	and.w	r3, lr, #1
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	465a      	mov	r2, fp
 8005f1e:	f8cd c00c 	str.w	ip, [sp, #12]
 8005f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f24:	f002 fbd4 	bl	80086d0 <_sungetc_r>
 8005f28:	42b5      	cmp	r5, r6
 8005f2a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005f2e:	d018      	beq.n	8005f62 <__ssvfscanf_r+0x7c6>
 8005f30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f32:	b141      	cbz	r1, 8005f46 <__ssvfscanf_r+0x7aa>
 8005f34:	3d01      	subs	r5, #1
 8005f36:	4620      	mov	r0, r4
 8005f38:	f81c 1c01 	ldrb.w	r1, [ip, #-1]
 8005f3c:	465a      	mov	r2, fp
 8005f3e:	f002 fbc7 	bl	80086d0 <_sungetc_r>
 8005f42:	42b5      	cmp	r5, r6
 8005f44:	d00d      	beq.n	8005f62 <__ssvfscanf_r+0x7c6>
 8005f46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005f4a:	465a      	mov	r2, fp
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f002 fbbf 	bl	80086d0 <_sungetc_r>
 8005f52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005f56:	4620      	mov	r0, r4
 8005f58:	465a      	mov	r2, fp
 8005f5a:	f002 fbb9 	bl	80086d0 <_sungetc_r>
 8005f5e:	42b5      	cmp	r5, r6
 8005f60:	d1f1      	bne.n	8005f46 <__ssvfscanf_r+0x7aa>
 8005f62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f64:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005f68:	43ea      	mvns	r2, r5
 8005f6a:	4490      	add	r8, r2
 8005f6c:	ebc5 0909 	rsb	r9, r5, r9
 8005f70:	05fa      	lsls	r2, r7, #23
 8005f72:	d51b      	bpl.n	8005fac <__ssvfscanf_r+0x810>
 8005f74:	057b      	lsls	r3, r7, #21
 8005f76:	f100 845e 	bmi.w	8006836 <__ssvfscanf_r+0x109a>
 8005f7a:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8005f7e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8005f82:	2965      	cmp	r1, #101	; 0x65
 8005f84:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005f88:	d00b      	beq.n	8005fa2 <__ssvfscanf_r+0x806>
 8005f8a:	2945      	cmp	r1, #69	; 0x45
 8005f8c:	d009      	beq.n	8005fa2 <__ssvfscanf_r+0x806>
 8005f8e:	4620      	mov	r0, r4
 8005f90:	465a      	mov	r2, fp
 8005f92:	f002 fb9d 	bl	80086d0 <_sungetc_r>
 8005f96:	f818 1c02 	ldrb.w	r1, [r8, #-2]
 8005f9a:	f1a8 0502 	sub.w	r5, r8, #2
 8005f9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	465a      	mov	r2, fp
 8005fa6:	f002 fb93 	bl	80086d0 <_sungetc_r>
 8005faa:	46a8      	mov	r8, r5
 8005fac:	f017 0210 	ands.w	r2, r7, #16
 8005fb0:	f040 8145 	bne.w	800623e <__ssvfscanf_r+0xaa2>
 8005fb4:	f407 66c0 	and.w	r6, r7, #1536	; 0x600
 8005fb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005fbc:	f888 2000 	strb.w	r2, [r8]
 8005fc0:	f000 8369 	beq.w	8006696 <__ssvfscanf_r+0xefa>
 8005fc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	f040 8351 	bne.w	800666e <__ssvfscanf_r+0xed2>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4620      	mov	r0, r4
 8005fd0:	a956      	add	r1, sp, #344	; 0x158
 8005fd2:	f001 f915 	bl	8007200 <_strtod_r>
 8005fd6:	07fe      	lsls	r6, r7, #31
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	f140 8308 	bpl.w	80065f0 <__ssvfscanf_r+0xe54>
 8005fe0:	9f05      	ldr	r7, [sp, #20]
 8005fe2:	683d      	ldr	r5, [r7, #0]
 8005fe4:	3704      	adds	r7, #4
 8005fe6:	9705      	str	r7, [sp, #20]
 8005fe8:	e9c5 2300 	strd	r2, r3, [r5]
 8005fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fee:	9e08      	ldr	r6, [sp, #32]
 8005ff0:	1c55      	adds	r5, r2, #1
 8005ff2:	9509      	str	r5, [sp, #36]	; 0x24
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	e422      	b.n	800583e <__ssvfscanf_r+0xa2>
 8005ff8:	0639      	lsls	r1, r7, #24
 8005ffa:	f57f af6b 	bpl.w	8005ed4 <__ssvfscanf_r+0x738>
 8005ffe:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8006002:	e754      	b.n	8005eae <__ssvfscanf_r+0x712>
 8006004:	05f9      	lsls	r1, r7, #23
 8006006:	f57f af4d 	bpl.w	8005ea4 <__ssvfscanf_r+0x708>
 800600a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800600e:	3401      	adds	r4, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	f43f af4e 	beq.w	8005eb2 <__ssvfscanf_r+0x716>
 8006016:	3b01      	subs	r3, #1
 8006018:	3501      	adds	r5, #1
 800601a:	e74a      	b.n	8005eb2 <__ssvfscanf_r+0x716>
 800601c:	05b9      	lsls	r1, r7, #22
 800601e:	f57f af59 	bpl.w	8005ed4 <__ssvfscanf_r+0x738>
 8006022:	f427 7720 	bic.w	r7, r7, #640	; 0x280
 8006026:	940d      	str	r4, [sp, #52]	; 0x34
 8006028:	e741      	b.n	8005eae <__ssvfscanf_r+0x712>
 800602a:	f1bc 0f01 	cmp.w	ip, #1
 800602e:	f47f af51 	bne.w	8005ed4 <__ssvfscanf_r+0x738>
 8006032:	f04f 0c02 	mov.w	ip, #2
 8006036:	e73a      	b.n	8005eae <__ssvfscanf_r+0x712>
 8006038:	2e02      	cmp	r6, #2
 800603a:	f47f af4b 	bne.w	8005ed4 <__ssvfscanf_r+0x738>
 800603e:	2603      	movs	r6, #3
 8006040:	e735      	b.n	8005eae <__ssvfscanf_r+0x712>
 8006042:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
 8006046:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800604a:	d003      	beq.n	8006054 <__ssvfscanf_r+0x8b8>
 800604c:	0579      	lsls	r1, r7, #21
 800604e:	f57f af41 	bpl.w	8005ed4 <__ssvfscanf_r+0x738>
 8006052:	b3ac      	cbz	r4, 80060c0 <__ssvfscanf_r+0x924>
 8006054:	05b9      	lsls	r1, r7, #22
 8006056:	d404      	bmi.n	8006062 <__ssvfscanf_r+0x8c6>
 8006058:	990d      	ldr	r1, [sp, #52]	; 0x34
 800605a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800605e:	1a64      	subs	r4, r4, r1
 8006060:	940e      	str	r4, [sp, #56]	; 0x38
 8006062:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
 8006066:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 800606a:	2400      	movs	r4, #0
 800606c:	e71f      	b.n	8005eae <__ssvfscanf_r+0x712>
 800606e:	2e07      	cmp	r6, #7
 8006070:	f47f af30 	bne.w	8005ed4 <__ssvfscanf_r+0x738>
 8006074:	2608      	movs	r6, #8
 8006076:	e71a      	b.n	8005eae <__ssvfscanf_r+0x712>
 8006078:	2e06      	cmp	r6, #6
 800607a:	f47f af2b 	bne.w	8005ed4 <__ssvfscanf_r+0x738>
 800607e:	2607      	movs	r6, #7
 8006080:	e715      	b.n	8005eae <__ssvfscanf_r+0x712>
 8006082:	f1bc 0f00 	cmp.w	ip, #0
 8006086:	f040 8200 	bne.w	800648a <__ssvfscanf_r+0xcee>
 800608a:	b92c      	cbnz	r4, 8006098 <__ssvfscanf_r+0x8fc>
 800608c:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
 8006090:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006094:	f000 83c1 	beq.w	800681a <__ssvfscanf_r+0x107e>
 8006098:	2e01      	cmp	r6, #1
 800609a:	d002      	beq.n	80060a2 <__ssvfscanf_r+0x906>
 800609c:	2e04      	cmp	r6, #4
 800609e:	f47f af19 	bne.w	8005ed4 <__ssvfscanf_r+0x738>
 80060a2:	3601      	adds	r6, #1
 80060a4:	b2f6      	uxtb	r6, r6
 80060a6:	e702      	b.n	8005eae <__ssvfscanf_r+0x712>
 80060a8:	2e00      	cmp	r6, #0
 80060aa:	f040 81f5 	bne.w	8006498 <__ssvfscanf_r+0xcfc>
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	f040 82ad 	bne.w	800660e <__ssvfscanf_r+0xe72>
 80060b4:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
 80060b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060bc:	f000 8333 	beq.w	8006726 <__ssvfscanf_r+0xf8a>
 80060c0:	9406      	str	r4, [sp, #24]
 80060c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060c4:	e70c      	b.n	8005ee0 <__ssvfscanf_r+0x744>
 80060c6:	9208      	str	r2, [sp, #32]
 80060c8:	18c2      	adds	r2, r0, r3
 80060ca:	7856      	ldrb	r6, [r2, #1]
 80060cc:	f006 0703 	and.w	r7, r6, #3
 80060d0:	2f01      	cmp	r7, #1
 80060d2:	f000 829f 	beq.w	8006614 <__ssvfscanf_r+0xe78>
 80060d6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80060da:	4fb0      	ldr	r7, [pc, #704]	; (800639c <__ssvfscanf_r+0xc00>)
 80060dc:	200a      	movs	r0, #10
 80060de:	2603      	movs	r6, #3
 80060e0:	2900      	cmp	r1, #0
 80060e2:	9707      	str	r7, [sp, #28]
 80060e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80060e6:	f73f ac75 	bgt.w	80059d4 <__ssvfscanf_r+0x238>
 80060ea:	4620      	mov	r0, r4
 80060ec:	4659      	mov	r1, fp
 80060ee:	f002 fb2f 	bl	8008750 <__ssrefill_r>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f43f ac6e 	beq.w	80059d4 <__ssvfscanf_r+0x238>
 80060f8:	e451      	b.n	800599e <__ssvfscanf_r+0x202>
 80060fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80060fe:	f000 fc2b 	bl	8006958 <__sfp_lock_release>
 8006102:	9509      	str	r5, [sp, #36]	; 0x24
 8006104:	f7ff bba3 	b.w	800584e <__ssvfscanf_r+0xb2>
 8006108:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800610c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006110:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006114:	7873      	ldrb	r3, [r6, #1]
 8006116:	4616      	mov	r6, r2
 8006118:	f7ff bbbb 	b.w	8005892 <__ssvfscanf_r+0xf6>
 800611c:	9208      	str	r2, [sp, #32]
 800611e:	f048 0801 	orr.w	r8, r8, #1
 8006122:	e7d8      	b.n	80060d6 <__ssvfscanf_r+0x93a>
 8006124:	9208      	str	r2, [sp, #32]
 8006126:	2604      	movs	r6, #4
 8006128:	e44f      	b.n	80059ca <__ssvfscanf_r+0x22e>
 800612a:	7873      	ldrb	r3, [r6, #1]
 800612c:	f048 0802 	orr.w	r8, r8, #2
 8006130:	4616      	mov	r6, r2
 8006132:	f7ff bbae 	b.w	8005892 <__ssvfscanf_r+0xf6>
 8006136:	9208      	str	r2, [sp, #32]
 8006138:	f048 0801 	orr.w	r8, r8, #1
 800613c:	4f98      	ldr	r7, [pc, #608]	; (80063a0 <__ssvfscanf_r+0xc04>)
 800613e:	2008      	movs	r0, #8
 8006140:	9707      	str	r7, [sp, #28]
 8006142:	900b      	str	r0, [sp, #44]	; 0x2c
 8006144:	2603      	movs	r6, #3
 8006146:	e440      	b.n	80059ca <__ssvfscanf_r+0x22e>
 8006148:	9208      	str	r2, [sp, #32]
 800614a:	f448 7800 	orr.w	r8, r8, #512	; 0x200
 800614e:	4f94      	ldr	r7, [pc, #592]	; (80063a0 <__ssvfscanf_r+0xc04>)
 8006150:	2010      	movs	r0, #16
 8006152:	9707      	str	r7, [sp, #28]
 8006154:	900b      	str	r0, [sp, #44]	; 0x2c
 8006156:	2603      	movs	r6, #3
 8006158:	e437      	b.n	80059ca <__ssvfscanf_r+0x22e>
 800615a:	a816      	add	r0, sp, #88	; 0x58
 800615c:	4611      	mov	r1, r2
 800615e:	9208      	str	r2, [sp, #32]
 8006160:	f000 ffd6 	bl	8007110 <__sccl>
 8006164:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8006168:	9008      	str	r0, [sp, #32]
 800616a:	2601      	movs	r6, #1
 800616c:	e42d      	b.n	80059ca <__ssvfscanf_r+0x22e>
 800616e:	9208      	str	r2, [sp, #32]
 8006170:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8006174:	2600      	movs	r6, #0
 8006176:	e428      	b.n	80059ca <__ssvfscanf_r+0x22e>
 8006178:	9208      	str	r2, [sp, #32]
 800617a:	e7ac      	b.n	80060d6 <__ssvfscanf_r+0x93a>
 800617c:	7873      	ldrb	r3, [r6, #1]
 800617e:	f048 0804 	orr.w	r8, r8, #4
 8006182:	4616      	mov	r6, r2
 8006184:	f7ff bb85 	b.w	8005892 <__ssvfscanf_r+0xf6>
 8006188:	4f84      	ldr	r7, [pc, #528]	; (800639c <__ssvfscanf_r+0xc00>)
 800618a:	2000      	movs	r0, #0
 800618c:	9208      	str	r2, [sp, #32]
 800618e:	9707      	str	r7, [sp, #28]
 8006190:	900b      	str	r0, [sp, #44]	; 0x2c
 8006192:	2603      	movs	r6, #3
 8006194:	e419      	b.n	80059ca <__ssvfscanf_r+0x22e>
 8006196:	7873      	ldrb	r3, [r6, #1]
 8006198:	2b6c      	cmp	r3, #108	; 0x6c
 800619a:	f000 823e 	beq.w	800661a <__ssvfscanf_r+0xe7e>
 800619e:	f048 0801 	orr.w	r8, r8, #1
 80061a2:	4616      	mov	r6, r2
 80061a4:	f7ff bb75 	b.w	8005892 <__ssvfscanf_r+0xf6>
 80061a8:	f018 0f10 	tst.w	r8, #16
 80061ac:	9208      	str	r2, [sp, #32]
 80061ae:	d146      	bne.n	800623e <__ssvfscanf_r+0xaa2>
 80061b0:	f018 0f04 	tst.w	r8, #4
 80061b4:	f000 8240 	beq.w	8006638 <__ssvfscanf_r+0xe9c>
 80061b8:	9d05      	ldr	r5, [sp, #20]
 80061ba:	4616      	mov	r6, r2
 80061bc:	6828      	ldr	r0, [r5, #0]
 80061be:	3504      	adds	r5, #4
 80061c0:	f8a0 9000 	strh.w	r9, [r0]
 80061c4:	9505      	str	r5, [sp, #20]
 80061c6:	f7ff bb39 	b.w	800583c <__ssvfscanf_r+0xa0>
 80061ca:	9208      	str	r2, [sp, #32]
 80061cc:	4616      	mov	r6, r2
 80061ce:	f7ff bb45 	b.w	800585c <__ssvfscanf_r+0xc0>
 80061d2:	7873      	ldrb	r3, [r6, #1]
 80061d4:	f048 0810 	orr.w	r8, r8, #16
 80061d8:	4616      	mov	r6, r2
 80061da:	f7ff bb5a 	b.w	8005892 <__ssvfscanf_r+0xf6>
 80061de:	9208      	str	r2, [sp, #32]
 80061e0:	f448 7808 	orr.w	r8, r8, #544	; 0x220
 80061e4:	e7b3      	b.n	800614e <__ssvfscanf_r+0x9b2>
 80061e6:	9208      	str	r2, [sp, #32]
 80061e8:	2602      	movs	r6, #2
 80061ea:	f7ff bbee 	b.w	80059ca <__ssvfscanf_r+0x22e>
 80061ee:	9208      	str	r2, [sp, #32]
 80061f0:	e7a4      	b.n	800613c <__ssvfscanf_r+0x9a0>
 80061f2:	2100      	movs	r1, #0
 80061f4:	2208      	movs	r2, #8
 80061f6:	a814      	add	r0, sp, #80	; 0x50
 80061f8:	f000 feaa 	bl	8006f50 <memset>
 80061fc:	f018 0110 	ands.w	r1, r8, #16
 8006200:	9106      	str	r1, [sp, #24]
 8006202:	f040 8201 	bne.w	8006608 <__ssvfscanf_r+0xe6c>
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	1d1f      	adds	r7, r3, #4
 800620a:	f8d3 8000 	ldr.w	r8, [r3]
 800620e:	9705      	str	r7, [sp, #20]
 8006210:	2600      	movs	r6, #0
 8006212:	af56      	add	r7, sp, #344	; 0x158
 8006214:	f8db 2000 	ldr.w	r2, [fp]
 8006218:	f8da 0000 	ldr.w	r0, [sl]
 800621c:	7811      	ldrb	r1, [r2, #0]
 800621e:	1843      	adds	r3, r0, r1
 8006220:	785a      	ldrb	r2, [r3, #1]
 8006222:	f002 0008 	and.w	r0, r2, #8
 8006226:	b2c1      	uxtb	r1, r0
 8006228:	b911      	cbnz	r1, 8006230 <__ssvfscanf_r+0xa94>
 800622a:	2d00      	cmp	r5, #0
 800622c:	f040 8280 	bne.w	8006730 <__ssvfscanf_r+0xf94>
 8006230:	9d06      	ldr	r5, [sp, #24]
 8006232:	b925      	cbnz	r5, 800623e <__ssvfscanf_r+0xaa2>
 8006234:	f8c8 5000 	str.w	r5, [r8]
 8006238:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800623a:	3701      	adds	r7, #1
 800623c:	9709      	str	r7, [sp, #36]	; 0x24
 800623e:	9e08      	ldr	r6, [sp, #32]
 8006240:	4632      	mov	r2, r6
 8006242:	f7ff bafc 	b.w	800583e <__ssvfscanf_r+0xa2>
 8006246:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006248:	4659      	mov	r1, fp
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	f8cd c00c 	str.w	ip, [sp, #12]
 8006250:	f002 fa7e 	bl	8008750 <__ssrefill_r>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800625a:	2800      	cmp	r0, #0
 800625c:	f47f ae3a 	bne.w	8005ed4 <__ssvfscanf_r+0x738>
 8006260:	2d00      	cmp	r5, #0
 8006262:	f47f ad18 	bne.w	8005c96 <__ssvfscanf_r+0x4fa>
 8006266:	e635      	b.n	8005ed4 <__ssvfscanf_r+0x738>
 8006268:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 800626c:	e638      	b.n	8005ee0 <__ssvfscanf_r+0x744>
 800626e:	4618      	mov	r0, r3
 8006270:	4659      	mov	r1, fp
 8006272:	9302      	str	r3, [sp, #8]
 8006274:	f8cd c00c 	str.w	ip, [sp, #12]
 8006278:	f002 fa6a 	bl	8008750 <__ssrefill_r>
 800627c:	9b02      	ldr	r3, [sp, #8]
 800627e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006282:	2800      	cmp	r0, #0
 8006284:	f43f adc3 	beq.w	8005e0e <__ssvfscanf_r+0x672>
 8006288:	e5c4      	b.n	8005e14 <__ssvfscanf_r+0x678>
 800628a:	4620      	mov	r0, r4
 800628c:	4659      	mov	r1, fp
 800628e:	f002 fa5f 	bl	8008750 <__ssrefill_r>
 8006292:	2800      	cmp	r0, #0
 8006294:	f47f acde 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 8006298:	f8db 2000 	ldr.w	r2, [fp]
 800629c:	e585      	b.n	8005daa <__ssvfscanf_r+0x60e>
 800629e:	9f05      	ldr	r7, [sp, #20]
 80062a0:	f8db 1000 	ldr.w	r1, [fp]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	1d38      	adds	r0, r7, #4
 80062a8:	1c56      	adds	r6, r2, #1
 80062aa:	1953      	adds	r3, r2, r5
 80062ac:	1b9d      	subs	r5, r3, r6
 80062ae:	9005      	str	r0, [sp, #20]
 80062b0:	07e8      	lsls	r0, r5, #31
 80062b2:	af16      	add	r7, sp, #88	; 0x58
 80062b4:	d44e      	bmi.n	8006354 <__ssvfscanf_r+0xbb8>
 80062b6:	46a0      	mov	r8, r4
 80062b8:	461c      	mov	r4, r3
 80062ba:	4608      	mov	r0, r1
 80062bc:	7809      	ldrb	r1, [r1, #0]
 80062be:	1e75      	subs	r5, r6, #1
 80062c0:	5c7b      	ldrb	r3, [r7, r1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05f      	beq.n	8006386 <__ssvfscanf_r+0xbea>
 80062c6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80062ca:	4635      	mov	r5, r6
 80062cc:	1e4b      	subs	r3, r1, #1
 80062ce:	f8cb 3004 	str.w	r3, [fp, #4]
 80062d2:	f810 1b01 	ldrb.w	r1, [r0], #1
 80062d6:	42a6      	cmp	r6, r4
 80062d8:	f806 1c01 	strb.w	r1, [r6, #-1]
 80062dc:	f8cb 0000 	str.w	r0, [fp]
 80062e0:	d051      	beq.n	8006386 <__ssvfscanf_r+0xbea>
 80062e2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	dd28      	ble.n	800633c <__ssvfscanf_r+0xba0>
 80062ea:	7805      	ldrb	r5, [r0, #0]
 80062ec:	4601      	mov	r1, r0
 80062ee:	5d78      	ldrb	r0, [r7, r5]
 80062f0:	3601      	adds	r6, #1
 80062f2:	4633      	mov	r3, r6
 80062f4:	1e75      	subs	r5, r6, #1
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d045      	beq.n	8006386 <__ssvfscanf_r+0xbea>
 80062fa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80062fe:	4635      	mov	r5, r6
 8006300:	3801      	subs	r0, #1
 8006302:	f8cb 0004 	str.w	r0, [fp, #4]
 8006306:	f811 0b01 	ldrb.w	r0, [r1], #1
 800630a:	f806 0c01 	strb.w	r0, [r6, #-1]
 800630e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006312:	f8cb 1000 	str.w	r1, [fp]
 8006316:	2800      	cmp	r0, #0
 8006318:	dd01      	ble.n	800631e <__ssvfscanf_r+0xb82>
 800631a:	1c5e      	adds	r6, r3, #1
 800631c:	e7cd      	b.n	80062ba <__ssvfscanf_r+0xb1e>
 800631e:	4640      	mov	r0, r8
 8006320:	4659      	mov	r1, fp
 8006322:	9203      	str	r2, [sp, #12]
 8006324:	9602      	str	r6, [sp, #8]
 8006326:	f002 fa13 	bl	8008750 <__ssrefill_r>
 800632a:	9a03      	ldr	r2, [sp, #12]
 800632c:	9b02      	ldr	r3, [sp, #8]
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 826d 	bne.w	800680e <__ssvfscanf_r+0x1072>
 8006334:	f8db 1000 	ldr.w	r1, [fp]
 8006338:	1c5e      	adds	r6, r3, #1
 800633a:	e7be      	b.n	80062ba <__ssvfscanf_r+0xb1e>
 800633c:	4640      	mov	r0, r8
 800633e:	4659      	mov	r1, fp
 8006340:	9203      	str	r2, [sp, #12]
 8006342:	f002 fa05 	bl	8008750 <__ssrefill_r>
 8006346:	9a03      	ldr	r2, [sp, #12]
 8006348:	2800      	cmp	r0, #0
 800634a:	f040 8260 	bne.w	800680e <__ssvfscanf_r+0x1072>
 800634e:	f8db 0000 	ldr.w	r0, [fp]
 8006352:	e7ca      	b.n	80062ea <__ssvfscanf_r+0xb4e>
 8006354:	7808      	ldrb	r0, [r1, #0]
 8006356:	4615      	mov	r5, r2
 8006358:	5c38      	ldrb	r0, [r7, r0]
 800635a:	b1a8      	cbz	r0, 8006388 <__ssvfscanf_r+0xbec>
 800635c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006360:	4635      	mov	r5, r6
 8006362:	3801      	subs	r0, #1
 8006364:	f8cb 0004 	str.w	r0, [fp, #4]
 8006368:	f811 0b01 	ldrb.w	r0, [r1], #1
 800636c:	f806 0c01 	strb.w	r0, [r6, #-1]
 8006370:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006374:	f8cb 1000 	str.w	r1, [fp]
 8006378:	2800      	cmp	r0, #0
 800637a:	f340 8226 	ble.w	80067ca <__ssvfscanf_r+0x102e>
 800637e:	46a0      	mov	r8, r4
 8006380:	3601      	adds	r6, #1
 8006382:	461c      	mov	r4, r3
 8006384:	e799      	b.n	80062ba <__ssvfscanf_r+0xb1e>
 8006386:	4644      	mov	r4, r8
 8006388:	1aae      	subs	r6, r5, r2
 800638a:	f43f aa5e 	beq.w	800584a <__ssvfscanf_r+0xae>
 800638e:	2000      	movs	r0, #0
 8006390:	7028      	strb	r0, [r5, #0]
 8006392:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006394:	3501      	adds	r5, #1
 8006396:	9509      	str	r5, [sp, #36]	; 0x24
 8006398:	e45c      	b.n	8005c54 <__ssvfscanf_r+0x4b8>
 800639a:	bf00      	nop
 800639c:	080080b1 	.word	0x080080b1
 80063a0:	08008391 	.word	0x08008391
 80063a4:	4659      	mov	r1, fp
 80063a6:	4620      	mov	r0, r4
 80063a8:	f002 f9d2 	bl	8008750 <__ssrefill_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d15e      	bne.n	800646e <__ssvfscanf_r+0xcd2>
 80063b0:	f8db 0000 	ldr.w	r0, [fp]
 80063b4:	e406      	b.n	8005bc4 <__ssvfscanf_r+0x428>
 80063b6:	07ea      	lsls	r2, r5, #31
 80063b8:	f8da 1000 	ldr.w	r1, [sl]
 80063bc:	f8db 3000 	ldr.w	r3, [fp]
 80063c0:	d413      	bmi.n	80063ea <__ssvfscanf_r+0xc4e>
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	1888      	adds	r0, r1, r2
 80063c6:	7842      	ldrb	r2, [r0, #1]
 80063c8:	f002 0008 	and.w	r0, r2, #8
 80063cc:	b2c2      	uxtb	r2, r0
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	f47f ac40 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 80063d4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80063d8:	3301      	adds	r3, #1
 80063da:	1e70      	subs	r0, r6, #1
 80063dc:	2601      	movs	r6, #1
 80063de:	2800      	cmp	r0, #0
 80063e0:	f8cb 0004 	str.w	r0, [fp, #4]
 80063e4:	f8cb 3000 	str.w	r3, [fp]
 80063e8:	dd29      	ble.n	800643e <__ssvfscanf_r+0xca2>
 80063ea:	7818      	ldrb	r0, [r3, #0]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	180b      	adds	r3, r1, r0
 80063f0:	7858      	ldrb	r0, [r3, #1]
 80063f2:	f000 0308 	and.w	r3, r0, #8
 80063f6:	b2d8      	uxtb	r0, r3
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f47f ac2b 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 80063fe:	f8db 7004 	ldr.w	r7, [fp, #4]
 8006402:	3601      	adds	r6, #1
 8006404:	1e7b      	subs	r3, r7, #1
 8006406:	42b5      	cmp	r5, r6
 8006408:	e88b 000c 	stmia.w	fp, {r2, r3}
 800640c:	4637      	mov	r7, r6
 800640e:	f43f ac21 	beq.w	8005c54 <__ssvfscanf_r+0x4b8>
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd1f      	ble.n	8006456 <__ssvfscanf_r+0xcba>
 8006416:	1c53      	adds	r3, r2, #1
 8006418:	7812      	ldrb	r2, [r2, #0]
 800641a:	1888      	adds	r0, r1, r2
 800641c:	7842      	ldrb	r2, [r0, #1]
 800641e:	f002 0008 	and.w	r0, r2, #8
 8006422:	b2c2      	uxtb	r2, r0
 8006424:	2a00      	cmp	r2, #0
 8006426:	f47f ac15 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 800642a:	f8db 6004 	ldr.w	r6, [fp, #4]
 800642e:	f8cb 3000 	str.w	r3, [fp]
 8006432:	1e70      	subs	r0, r6, #1
 8006434:	1c7e      	adds	r6, r7, #1
 8006436:	2800      	cmp	r0, #0
 8006438:	f8cb 0004 	str.w	r0, [fp, #4]
 800643c:	dcd5      	bgt.n	80063ea <__ssvfscanf_r+0xc4e>
 800643e:	4620      	mov	r0, r4
 8006440:	4659      	mov	r1, fp
 8006442:	f002 f985 	bl	8008750 <__ssrefill_r>
 8006446:	2800      	cmp	r0, #0
 8006448:	f47f ac04 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 800644c:	f8da 1000 	ldr.w	r1, [sl]
 8006450:	f8db 3000 	ldr.w	r3, [fp]
 8006454:	e7c9      	b.n	80063ea <__ssvfscanf_r+0xc4e>
 8006456:	4620      	mov	r0, r4
 8006458:	4659      	mov	r1, fp
 800645a:	f002 f979 	bl	8008750 <__ssrefill_r>
 800645e:	2800      	cmp	r0, #0
 8006460:	f47f abf8 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 8006464:	f8da 1000 	ldr.w	r1, [sl]
 8006468:	f8db 2000 	ldr.w	r2, [fp]
 800646c:	e7d3      	b.n	8006416 <__ssvfscanf_r+0xc7a>
 800646e:	9e06      	ldr	r6, [sp, #24]
 8006470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006472:	ebc6 0108 	rsb	r1, r6, r8
 8006476:	9e08      	ldr	r6, [sp, #32]
 8006478:	2300      	movs	r3, #0
 800647a:	1c45      	adds	r5, r0, #1
 800647c:	f888 3000 	strb.w	r3, [r8]
 8006480:	4489      	add	r9, r1
 8006482:	9509      	str	r5, [sp, #36]	; 0x24
 8006484:	4632      	mov	r2, r6
 8006486:	f7ff b9da 	b.w	800583e <__ssvfscanf_r+0xa2>
 800648a:	f1bc 0f02 	cmp.w	ip, #2
 800648e:	f47f ae03 	bne.w	8006098 <__ssvfscanf_r+0x8fc>
 8006492:	f04f 0c03 	mov.w	ip, #3
 8006496:	e50a      	b.n	8005eae <__ssvfscanf_r+0x712>
 8006498:	2e03      	cmp	r6, #3
 800649a:	f43f ae02 	beq.w	80060a2 <__ssvfscanf_r+0x906>
 800649e:	2e05      	cmp	r6, #5
 80064a0:	f43f adff 	beq.w	80060a2 <__ssvfscanf_r+0x906>
 80064a4:	e516      	b.n	8005ed4 <__ssvfscanf_r+0x738>
 80064a6:	462a      	mov	r2, r5
 80064a8:	7035      	strb	r5, [r6, #0]
 80064aa:	4620      	mov	r0, r4
 80064ac:	4639      	mov	r1, r7
 80064ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b0:	9d07      	ldr	r5, [sp, #28]
 80064b2:	47a8      	blx	r5
 80064b4:	f018 0f20 	tst.w	r8, #32
 80064b8:	d16e      	bne.n	8006598 <__ssvfscanf_r+0xdfc>
 80064ba:	f018 0f04 	tst.w	r8, #4
 80064be:	f000 8102 	beq.w	80066c6 <__ssvfscanf_r+0xf2a>
 80064c2:	9905      	ldr	r1, [sp, #20]
 80064c4:	680a      	ldr	r2, [r1, #0]
 80064c6:	1d0b      	adds	r3, r1, #4
 80064c8:	9305      	str	r3, [sp, #20]
 80064ca:	8010      	strh	r0, [r2, #0]
 80064cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ce:	1c45      	adds	r5, r0, #1
 80064d0:	9509      	str	r5, [sp, #36]	; 0x24
 80064d2:	e4b5      	b.n	8005e40 <__ssvfscanf_r+0x6a4>
 80064d4:	2100      	movs	r1, #0
 80064d6:	2208      	movs	r2, #8
 80064d8:	a812      	add	r0, sp, #72	; 0x48
 80064da:	f000 fd39 	bl	8006f50 <memset>
 80064de:	f018 0710 	ands.w	r7, r8, #16
 80064e2:	9706      	str	r7, [sp, #24]
 80064e4:	f040 808e 	bne.w	8006604 <__ssvfscanf_r+0xe68>
 80064e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80064ec:	4646      	mov	r6, r8
 80064ee:	1d32      	adds	r2, r6, #4
 80064f0:	f8d8 7000 	ldr.w	r7, [r8]
 80064f4:	9205      	str	r2, [sp, #20]
 80064f6:	4659      	mov	r1, fp
 80064f8:	f04f 0800 	mov.w	r8, #0
 80064fc:	46a3      	mov	fp, r4
 80064fe:	ae56      	add	r6, sp, #344	; 0x158
 8006500:	460c      	mov	r4, r1
 8006502:	f000 fa3f 	bl	8006984 <__locale_mb_cur_max>
 8006506:	4540      	cmp	r0, r8
 8006508:	d043      	beq.n	8006592 <__ssvfscanf_r+0xdf6>
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006512:	1e5a      	subs	r2, r3, #1
 8006514:	f806 1008 	strb.w	r1, [r6, r8]
 8006518:	6020      	str	r0, [r4, #0]
 800651a:	f108 0801 	add.w	r8, r8, #1
 800651e:	a812      	add	r0, sp, #72	; 0x48
 8006520:	6062      	str	r2, [r4, #4]
 8006522:	4639      	mov	r1, r7
 8006524:	9000      	str	r0, [sp, #0]
 8006526:	4632      	mov	r2, r6
 8006528:	4658      	mov	r0, fp
 800652a:	4643      	mov	r3, r8
 800652c:	f000 fcce 	bl	8006ecc <_mbrtowc_r>
 8006530:	1c41      	adds	r1, r0, #1
 8006532:	d02e      	beq.n	8006592 <__ssvfscanf_r+0xdf6>
 8006534:	bb18      	cbnz	r0, 800657e <__ssvfscanf_r+0xde2>
 8006536:	9b06      	ldr	r3, [sp, #24]
 8006538:	b903      	cbnz	r3, 800653c <__ssvfscanf_r+0xda0>
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	9906      	ldr	r1, [sp, #24]
 800653e:	44c1      	add	r9, r8
 8006540:	3d01      	subs	r5, #1
 8006542:	bb19      	cbnz	r1, 800658c <__ssvfscanf_r+0xdf0>
 8006544:	3704      	adds	r7, #4
 8006546:	4688      	mov	r8, r1
 8006548:	6862      	ldr	r2, [r4, #4]
 800654a:	2a00      	cmp	r2, #0
 800654c:	dd09      	ble.n	8006562 <__ssvfscanf_r+0xdc6>
 800654e:	2d00      	cmp	r5, #0
 8006550:	d1d7      	bne.n	8006502 <__ssvfscanf_r+0xd66>
 8006552:	4625      	mov	r5, r4
 8006554:	465c      	mov	r4, fp
 8006556:	46ab      	mov	fp, r5
 8006558:	9d06      	ldr	r5, [sp, #24]
 800655a:	2d00      	cmp	r5, #0
 800655c:	f43f ae6c 	beq.w	8006238 <__ssvfscanf_r+0xa9c>
 8006560:	e66d      	b.n	800623e <__ssvfscanf_r+0xaa2>
 8006562:	4658      	mov	r0, fp
 8006564:	4621      	mov	r1, r4
 8006566:	f002 f8f3 	bl	8008750 <__ssrefill_r>
 800656a:	2800      	cmp	r0, #0
 800656c:	d0ef      	beq.n	800654e <__ssvfscanf_r+0xdb2>
 800656e:	4620      	mov	r0, r4
 8006570:	465c      	mov	r4, fp
 8006572:	4683      	mov	fp, r0
 8006574:	f1b8 0f00 	cmp.w	r8, #0
 8006578:	d0ee      	beq.n	8006558 <__ssvfscanf_r+0xdbc>
 800657a:	f7ff ba10 	b.w	800599e <__ssvfscanf_r+0x202>
 800657e:	3002      	adds	r0, #2
 8006580:	d0e2      	beq.n	8006548 <__ssvfscanf_r+0xdac>
 8006582:	9906      	ldr	r1, [sp, #24]
 8006584:	44c1      	add	r9, r8
 8006586:	3d01      	subs	r5, #1
 8006588:	2900      	cmp	r1, #0
 800658a:	d0db      	beq.n	8006544 <__ssvfscanf_r+0xda8>
 800658c:	f04f 0800 	mov.w	r8, #0
 8006590:	e7da      	b.n	8006548 <__ssvfscanf_r+0xdac>
 8006592:	46a3      	mov	fp, r4
 8006594:	f7ff ba03 	b.w	800599e <__ssvfscanf_r+0x202>
 8006598:	9d05      	ldr	r5, [sp, #20]
 800659a:	6829      	ldr	r1, [r5, #0]
 800659c:	1d2a      	adds	r2, r5, #4
 800659e:	9205      	str	r2, [sp, #20]
 80065a0:	6008      	str	r0, [r1, #0]
 80065a2:	e793      	b.n	80064cc <__ssvfscanf_r+0xd30>
 80065a4:	2e00      	cmp	r6, #0
 80065a6:	f47f ab55 	bne.w	8005c54 <__ssvfscanf_r+0x4b8>
 80065aa:	f7ff b94e 	b.w	800584a <__ssvfscanf_r+0xae>
 80065ae:	f428 7860 	bic.w	r8, r8, #896	; 0x380
 80065b2:	f1b9 0f00 	cmp.w	r9, #0
 80065b6:	d002      	beq.n	80065be <__ssvfscanf_r+0xe22>
 80065b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80065bc:	3501      	adds	r5, #1
 80065be:	9806      	ldr	r0, [sp, #24]
 80065c0:	1c41      	adds	r1, r0, #1
 80065c2:	9106      	str	r1, [sp, #24]
 80065c4:	e418      	b.n	8005df8 <__ssvfscanf_r+0x65c>
 80065c6:	9f05      	ldr	r7, [sp, #20]
 80065c8:	2201      	movs	r2, #1
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	4620      	mov	r0, r4
 80065ce:	f8cd b000 	str.w	fp, [sp]
 80065d2:	462b      	mov	r3, r5
 80065d4:	f002 f8da 	bl	800878c <_sfread_r>
 80065d8:	1d3a      	adds	r2, r7, #4
 80065da:	2800      	cmp	r0, #0
 80065dc:	f43f a9df 	beq.w	800599e <__ssvfscanf_r+0x202>
 80065e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065e2:	4481      	add	r9, r0
 80065e4:	3501      	adds	r5, #1
 80065e6:	9509      	str	r5, [sp, #36]	; 0x24
 80065e8:	9205      	str	r2, [sp, #20]
 80065ea:	9e08      	ldr	r6, [sp, #32]
 80065ec:	f7ff b926 	b.w	800583c <__ssvfscanf_r+0xa0>
 80065f0:	07bd      	lsls	r5, r7, #30
 80065f2:	f140 8084 	bpl.w	80066fe <__ssvfscanf_r+0xf62>
 80065f6:	9805      	ldr	r0, [sp, #20]
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	1d06      	adds	r6, r0, #4
 80065fc:	9605      	str	r6, [sp, #20]
 80065fe:	e9c1 2300 	strd	r2, r3, [r1]
 8006602:	e4f3      	b.n	8005fec <__ssvfscanf_r+0x850>
 8006604:	2700      	movs	r7, #0
 8006606:	e776      	b.n	80064f6 <__ssvfscanf_r+0xd5a>
 8006608:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800660c:	e600      	b.n	8006210 <__ssvfscanf_r+0xa74>
 800660e:	9406      	str	r4, [sp, #24]
 8006610:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006612:	e629      	b.n	8006268 <__ssvfscanf_r+0xacc>
 8006614:	f048 0801 	orr.w	r8, r8, #1
 8006618:	e55d      	b.n	80060d6 <__ssvfscanf_r+0x93a>
 800661a:	78b3      	ldrb	r3, [r6, #2]
 800661c:	f048 0802 	orr.w	r8, r8, #2
 8006620:	3602      	adds	r6, #2
 8006622:	f7ff b936 	b.w	8005892 <__ssvfscanf_r+0xf6>
 8006626:	1b51      	subs	r1, r2, r5
 8006628:	1958      	adds	r0, r3, r5
 800662a:	1976      	adds	r6, r6, r5
 800662c:	f8cb 1004 	str.w	r1, [fp, #4]
 8006630:	f8cb 0000 	str.w	r0, [fp]
 8006634:	f7ff bb0e 	b.w	8005c54 <__ssvfscanf_r+0x4b8>
 8006638:	f018 0f01 	tst.w	r8, #1
 800663c:	d10e      	bne.n	800665c <__ssvfscanf_r+0xec0>
 800663e:	f018 0f02 	tst.w	r8, #2
 8006642:	d00b      	beq.n	800665c <__ssvfscanf_r+0xec0>
 8006644:	9d05      	ldr	r5, [sp, #20]
 8006646:	464e      	mov	r6, r9
 8006648:	6828      	ldr	r0, [r5, #0]
 800664a:	17f3      	asrs	r3, r6, #31
 800664c:	3504      	adds	r5, #4
 800664e:	f8c0 9000 	str.w	r9, [r0]
 8006652:	6043      	str	r3, [r0, #4]
 8006654:	9505      	str	r5, [sp, #20]
 8006656:	9e08      	ldr	r6, [sp, #32]
 8006658:	f7ff b8f0 	b.w	800583c <__ssvfscanf_r+0xa0>
 800665c:	9f05      	ldr	r7, [sp, #20]
 800665e:	9e08      	ldr	r6, [sp, #32]
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	3704      	adds	r7, #4
 8006664:	f8c1 9000 	str.w	r9, [r1]
 8006668:	9705      	str	r7, [sp, #20]
 800666a:	f7ff b8e7 	b.w	800583c <__ssvfscanf_r+0xa0>
 800666e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006670:	4620      	mov	r0, r4
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	230a      	movs	r3, #10
 8006676:	f001 fd1b 	bl	80080b0 <_strtol_r>
 800667a:	1b42      	subs	r2, r0, r5
 800667c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800667e:	f20d 26ab 	addw	r6, sp, #683	; 0x2ab
 8006682:	42b5      	cmp	r5, r6
 8006684:	bf24      	itt	cs
 8006686:	f20d 25aa 	addwcs	r5, sp, #682	; 0x2aa
 800668a:	950c      	strcs	r5, [sp, #48]	; 0x30
 800668c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800668e:	49b0      	ldr	r1, [pc, #704]	; (8006950 <__ssvfscanf_r+0x11b4>)
 8006690:	f000 fd8c 	bl	80071ac <sprintf>
 8006694:	e49a      	b.n	8005fcc <__ssvfscanf_r+0x830>
 8006696:	9806      	ldr	r0, [sp, #24]
 8006698:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800669c:	ebce 0100 	rsb	r1, lr, r0
 80066a0:	424a      	negs	r2, r1
 80066a2:	2900      	cmp	r1, #0
 80066a4:	f43f ac92 	beq.w	8005fcc <__ssvfscanf_r+0x830>
 80066a8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80066ac:	e7e6      	b.n	800667c <__ssvfscanf_r+0xee0>
 80066ae:	4620      	mov	r0, r4
 80066b0:	4659      	mov	r1, fp
 80066b2:	f002 f84d 	bl	8008750 <__ssrefill_r>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f47f aed9 	bne.w	800646e <__ssvfscanf_r+0xcd2>
 80066bc:	f8db 2000 	ldr.w	r2, [fp]
 80066c0:	3701      	adds	r7, #1
 80066c2:	f7ff ba5c 	b.w	8005b7e <__ssvfscanf_r+0x3e2>
 80066c6:	f018 0201 	ands.w	r2, r8, #1
 80066ca:	f47f af65 	bne.w	8006598 <__ssvfscanf_r+0xdfc>
 80066ce:	f018 0f02 	tst.w	r8, #2
 80066d2:	f43f af61 	beq.w	8006598 <__ssvfscanf_r+0xdfc>
 80066d6:	9d07      	ldr	r5, [sp, #28]
 80066d8:	f248 3e91 	movw	lr, #33681	; 0x8391
 80066dc:	f6c0 0e00 	movt	lr, #2048	; 0x800
 80066e0:	4575      	cmp	r5, lr
 80066e2:	4620      	mov	r0, r4
 80066e4:	4639      	mov	r1, r7
 80066e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e8:	f000 812e 	beq.w	8006948 <__ssvfscanf_r+0x11ac>
 80066ec:	f001 fd78 	bl	80081e0 <_strtoll_r>
 80066f0:	9a05      	ldr	r2, [sp, #20]
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	1d15      	adds	r5, r2, #4
 80066f6:	9505      	str	r5, [sp, #20]
 80066f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80066fc:	e6e6      	b.n	80064cc <__ssvfscanf_r+0xd30>
 80066fe:	9f05      	ldr	r7, [sp, #20]
 8006700:	1d3e      	adds	r6, r7, #4
 8006702:	9f05      	ldr	r7, [sp, #20]
 8006704:	683d      	ldr	r5, [r7, #0]
 8006706:	9003      	str	r0, [sp, #12]
 8006708:	9102      	str	r1, [sp, #8]
 800670a:	f000 fcbb 	bl	8007084 <__fpclassifyd>
 800670e:	9a03      	ldr	r2, [sp, #12]
 8006710:	9b02      	ldr	r3, [sp, #8]
 8006712:	2800      	cmp	r0, #0
 8006714:	f000 8087 	beq.w	8006826 <__ssvfscanf_r+0x108a>
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	f7fa f90e 	bl	800093c <__aeabi_d2f>
 8006720:	9605      	str	r6, [sp, #20]
 8006722:	6028      	str	r0, [r5, #0]
 8006724:	e462      	b.n	8005fec <__ssvfscanf_r+0x850>
 8006726:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
 800672a:	2601      	movs	r6, #1
 800672c:	f7ff bbbf 	b.w	8005eae <__ssvfscanf_r+0x712>
 8006730:	f000 f928 	bl	8006984 <__locale_mb_cur_max>
 8006734:	42b0      	cmp	r0, r6
 8006736:	f43f a932 	beq.w	800599e <__ssvfscanf_r+0x202>
 800673a:	f8db 3000 	ldr.w	r3, [fp]
 800673e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8006742:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006746:	1e51      	subs	r1, r2, #1
 8006748:	55b8      	strb	r0, [r7, r6]
 800674a:	f8cb 3000 	str.w	r3, [fp]
 800674e:	3601      	adds	r6, #1
 8006750:	ab14      	add	r3, sp, #80	; 0x50
 8006752:	f8cb 1004 	str.w	r1, [fp, #4]
 8006756:	4620      	mov	r0, r4
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4641      	mov	r1, r8
 800675c:	463a      	mov	r2, r7
 800675e:	4633      	mov	r3, r6
 8006760:	f000 fbb4 	bl	8006ecc <_mbrtowc_r>
 8006764:	1c41      	adds	r1, r0, #1
 8006766:	f43f a91a 	beq.w	800599e <__ssvfscanf_r+0x202>
 800676a:	bb48      	cbnz	r0, 80067c0 <__ssvfscanf_r+0x1024>
 800676c:	f8c8 0000 	str.w	r0, [r8]
 8006770:	f000 f8f4 	bl	800695c <iswspace>
 8006774:	2800      	cmp	r0, #0
 8006776:	d034      	beq.n	80067e2 <__ssvfscanf_r+0x1046>
 8006778:	2e00      	cmp	r6, #0
 800677a:	f43f ad59 	beq.w	8006230 <__ssvfscanf_r+0xa94>
 800677e:	1e75      	subs	r5, r6, #1
 8006780:	19be      	adds	r6, r7, r6
 8006782:	4620      	mov	r0, r4
 8006784:	462f      	mov	r7, r5
 8006786:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800678a:	465a      	mov	r2, fp
 800678c:	f005 0501 	and.w	r5, r5, #1
 8006790:	f001 ff9e 	bl	80086d0 <_sungetc_r>
 8006794:	2f00      	cmp	r7, #0
 8006796:	f43f ad4b 	beq.w	8006230 <__ssvfscanf_r+0xa94>
 800679a:	b10d      	cbz	r5, 80067a0 <__ssvfscanf_r+0x1004>
 800679c:	3f01      	subs	r7, #1
 800679e:	e006      	b.n	80067ae <__ssvfscanf_r+0x1012>
 80067a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067a4:	465a      	mov	r2, fp
 80067a6:	4620      	mov	r0, r4
 80067a8:	f001 ff92 	bl	80086d0 <_sungetc_r>
 80067ac:	3f02      	subs	r7, #2
 80067ae:	4620      	mov	r0, r4
 80067b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067b4:	465a      	mov	r2, fp
 80067b6:	f001 ff8b 	bl	80086d0 <_sungetc_r>
 80067ba:	2f00      	cmp	r7, #0
 80067bc:	d1f0      	bne.n	80067a0 <__ssvfscanf_r+0x1004>
 80067be:	e537      	b.n	8006230 <__ssvfscanf_r+0xa94>
 80067c0:	3002      	adds	r0, #2
 80067c2:	d014      	beq.n	80067ee <__ssvfscanf_r+0x1052>
 80067c4:	f8d8 0000 	ldr.w	r0, [r8]
 80067c8:	e7d2      	b.n	8006770 <__ssvfscanf_r+0xfd4>
 80067ca:	4620      	mov	r0, r4
 80067cc:	4659      	mov	r1, fp
 80067ce:	9203      	str	r2, [sp, #12]
 80067d0:	9302      	str	r3, [sp, #8]
 80067d2:	f001 ffbd 	bl	8008750 <__ssrefill_r>
 80067d6:	9a03      	ldr	r2, [sp, #12]
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	b9c8      	cbnz	r0, 8006810 <__ssvfscanf_r+0x1074>
 80067dc:	f8db 1000 	ldr.w	r1, [fp]
 80067e0:	e5cd      	b.n	800637e <__ssvfscanf_r+0xbe2>
 80067e2:	44b1      	add	r9, r6
 80067e4:	9e06      	ldr	r6, [sp, #24]
 80067e6:	3d01      	subs	r5, #1
 80067e8:	bb1e      	cbnz	r6, 8006832 <__ssvfscanf_r+0x1096>
 80067ea:	f108 0804 	add.w	r8, r8, #4
 80067ee:	f8db 2004 	ldr.w	r2, [fp, #4]
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	f73f ad0e 	bgt.w	8006214 <__ssvfscanf_r+0xa78>
 80067f8:	4620      	mov	r0, r4
 80067fa:	4659      	mov	r1, fp
 80067fc:	f001 ffa8 	bl	8008750 <__ssrefill_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	f43f ad07 	beq.w	8006214 <__ssvfscanf_r+0xa78>
 8006806:	2e00      	cmp	r6, #0
 8006808:	f47f a8c9 	bne.w	800599e <__ssvfscanf_r+0x202>
 800680c:	e510      	b.n	8006230 <__ssvfscanf_r+0xa94>
 800680e:	4644      	mov	r4, r8
 8006810:	42b2      	cmp	r2, r6
 8006812:	f47f adb9 	bne.w	8006388 <__ssvfscanf_r+0xbec>
 8006816:	f7ff b8c2 	b.w	800599e <__ssvfscanf_r+0x202>
 800681a:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
 800681e:	f04f 0c01 	mov.w	ip, #1
 8006822:	f7ff bb44 	b.w	8005eae <__ssvfscanf_r+0x712>
 8006826:	f000 fcbd 	bl	80071a4 <nanf>
 800682a:	9605      	str	r6, [sp, #20]
 800682c:	6028      	str	r0, [r5, #0]
 800682e:	f7ff bbdd 	b.w	8005fec <__ssvfscanf_r+0x850>
 8006832:	4606      	mov	r6, r0
 8006834:	e7db      	b.n	80067ee <__ssvfscanf_r+0x1052>
 8006836:	9f04      	ldr	r7, [sp, #16]
 8006838:	45b8      	cmp	r8, r7
 800683a:	f67f a806 	bls.w	800584a <__ssvfscanf_r+0xae>
 800683e:	4646      	mov	r6, r8
 8006840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006844:	ebc8 0307 	rsb	r3, r8, r7
 8006848:	4620      	mov	r0, r4
 800684a:	465a      	mov	r2, fp
 800684c:	43dd      	mvns	r5, r3
 800684e:	f001 ff3f 	bl	80086d0 <_sungetc_r>
 8006852:	42be      	cmp	r6, r7
 8006854:	f005 0501 	and.w	r5, r5, #1
 8006858:	f43e aff7 	beq.w	800584a <__ssvfscanf_r+0xae>
 800685c:	b11d      	cbz	r5, 8006866 <__ssvfscanf_r+0x10ca>
 800685e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006862:	4620      	mov	r0, r4
 8006864:	e008      	b.n	8006878 <__ssvfscanf_r+0x10dc>
 8006866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800686a:	465a      	mov	r2, fp
 800686c:	4620      	mov	r0, r4
 800686e:	f001 ff2f 	bl	80086d0 <_sungetc_r>
 8006872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006876:	4620      	mov	r0, r4
 8006878:	465a      	mov	r2, fp
 800687a:	f001 ff29 	bl	80086d0 <_sungetc_r>
 800687e:	9d04      	ldr	r5, [sp, #16]
 8006880:	42ae      	cmp	r6, r5
 8006882:	d1f0      	bne.n	8006866 <__ssvfscanf_r+0x10ca>
 8006884:	f7fe bfe1 	b.w	800584a <__ssvfscanf_r+0xae>
 8006888:	9f04      	ldr	r7, [sp, #16]
 800688a:	45b8      	cmp	r8, r7
 800688c:	f67e afdd 	bls.w	800584a <__ssvfscanf_r+0xae>
 8006890:	9f04      	ldr	r7, [sp, #16]
 8006892:	4646      	mov	r6, r8
 8006894:	ebc8 0507 	rsb	r5, r8, r7
 8006898:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800689c:	43eb      	mvns	r3, r5
 800689e:	4620      	mov	r0, r4
 80068a0:	465a      	mov	r2, fp
 80068a2:	f003 0501 	and.w	r5, r3, #1
 80068a6:	f001 ff13 	bl	80086d0 <_sungetc_r>
 80068aa:	42be      	cmp	r6, r7
 80068ac:	f43e afcd 	beq.w	800584a <__ssvfscanf_r+0xae>
 80068b0:	b14d      	cbz	r5, 80068c6 <__ssvfscanf_r+0x112a>
 80068b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068b6:	4620      	mov	r0, r4
 80068b8:	465a      	mov	r2, fp
 80068ba:	f001 ff09 	bl	80086d0 <_sungetc_r>
 80068be:	9f04      	ldr	r7, [sp, #16]
 80068c0:	42be      	cmp	r6, r7
 80068c2:	f43e afc2 	beq.w	800584a <__ssvfscanf_r+0xae>
 80068c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068ca:	465a      	mov	r2, fp
 80068cc:	4620      	mov	r0, r4
 80068ce:	f001 feff 	bl	80086d0 <_sungetc_r>
 80068d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068d6:	4620      	mov	r0, r4
 80068d8:	465a      	mov	r2, fp
 80068da:	f001 fef9 	bl	80086d0 <_sungetc_r>
 80068de:	9d04      	ldr	r5, [sp, #16]
 80068e0:	42ae      	cmp	r6, r5
 80068e2:	d1f0      	bne.n	80068c6 <__ssvfscanf_r+0x112a>
 80068e4:	f7fe bfb1 	b.w	800584a <__ssvfscanf_r+0xae>
 80068e8:	9d04      	ldr	r5, [sp, #16]
 80068ea:	45a8      	cmp	r8, r5
 80068ec:	f67e afad 	bls.w	800584a <__ssvfscanf_r+0xae>
 80068f0:	ebc8 0005 	rsb	r0, r8, r5
 80068f4:	4646      	mov	r6, r8
 80068f6:	43c7      	mvns	r7, r0
 80068f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068fc:	4620      	mov	r0, r4
 80068fe:	465a      	mov	r2, fp
 8006900:	f001 fee6 	bl	80086d0 <_sungetc_r>
 8006904:	f007 0501 	and.w	r5, r7, #1
 8006908:	9f04      	ldr	r7, [sp, #16]
 800690a:	42be      	cmp	r6, r7
 800690c:	f43e af9d 	beq.w	800584a <__ssvfscanf_r+0xae>
 8006910:	b14d      	cbz	r5, 8006926 <__ssvfscanf_r+0x118a>
 8006912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006916:	4620      	mov	r0, r4
 8006918:	465a      	mov	r2, fp
 800691a:	f001 fed9 	bl	80086d0 <_sungetc_r>
 800691e:	9f04      	ldr	r7, [sp, #16]
 8006920:	42be      	cmp	r6, r7
 8006922:	f43e af92 	beq.w	800584a <__ssvfscanf_r+0xae>
 8006926:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800692a:	465a      	mov	r2, fp
 800692c:	4620      	mov	r0, r4
 800692e:	f001 fecf 	bl	80086d0 <_sungetc_r>
 8006932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006936:	4620      	mov	r0, r4
 8006938:	465a      	mov	r2, fp
 800693a:	f001 fec9 	bl	80086d0 <_sungetc_r>
 800693e:	9d04      	ldr	r5, [sp, #16]
 8006940:	42ae      	cmp	r6, r5
 8006942:	d1f0      	bne.n	8006926 <__ssvfscanf_r+0x118a>
 8006944:	f7fe bf81 	b.w	800584a <__ssvfscanf_r+0xae>
 8006948:	f001 fdca 	bl	80084e0 <_strtoull_r>
 800694c:	e6d0      	b.n	80066f0 <__ssvfscanf_r+0xf54>
 800694e:	bf00      	nop
 8006950:	0800df44 	.word	0x0800df44

08006954 <__sfp_lock_acquire>:
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop

08006958 <__sfp_lock_release>:
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop

0800695c <iswspace>:
 800695c:	28ff      	cmp	r0, #255	; 0xff
 800695e:	d807      	bhi.n	8006970 <iswspace+0x14>
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <iswspace+0x18>)
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	1808      	adds	r0, r1, r0
 8006966:	7842      	ldrb	r2, [r0, #1]
 8006968:	f002 0308 	and.w	r3, r2, #8
 800696c:	b2d8      	uxtb	r0, r3
 800696e:	4770      	bx	lr
 8006970:	2000      	movs	r0, #0
 8006972:	4770      	bx	lr
 8006974:	200000e4 	.word	0x200000e4

08006978 <__locale_charset>:
 8006978:	f240 504c 	movw	r0, #1356	; 0x54c
 800697c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop

08006984 <__locale_mb_cur_max>:
 8006984:	f240 536c 	movw	r3, #1388	; 0x56c
 8006988:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	4770      	bx	lr

08006990 <_localeconv_r>:
 8006990:	f240 5014 	movw	r0, #1300	; 0x514
 8006994:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop

0800699c <_malloc_r>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	f101 050b 	add.w	r5, r1, #11
 80069a4:	2d16      	cmp	r5, #22
 80069a6:	b083      	sub	sp, #12
 80069a8:	4606      	mov	r6, r0
 80069aa:	d927      	bls.n	80069fc <_malloc_r+0x60>
 80069ac:	f035 0507 	bics.w	r5, r5, #7
 80069b0:	d427      	bmi.n	8006a02 <_malloc_r+0x66>
 80069b2:	42a9      	cmp	r1, r5
 80069b4:	d825      	bhi.n	8006a02 <_malloc_r+0x66>
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 fb60 	bl	800707c <__malloc_lock>
 80069bc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80069c0:	d223      	bcs.n	8006a0a <_malloc_r+0x6e>
 80069c2:	4fb9      	ldr	r7, [pc, #740]	; (8006ca8 <_malloc_r+0x30c>)
 80069c4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 80069c8:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80069cc:	68d4      	ldr	r4, [r2, #12]
 80069ce:	4294      	cmp	r4, r2
 80069d0:	f000 81d8 	beq.w	8006d84 <_malloc_r+0x3e8>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	68e2      	ldr	r2, [r4, #12]
 80069d8:	f023 0103 	bic.w	r1, r3, #3
 80069dc:	1863      	adds	r3, r4, r1
 80069de:	6858      	ldr	r0, [r3, #4]
 80069e0:	68a1      	ldr	r1, [r4, #8]
 80069e2:	f040 0001 	orr.w	r0, r0, #1
 80069e6:	6058      	str	r0, [r3, #4]
 80069e8:	60ca      	str	r2, [r1, #12]
 80069ea:	6091      	str	r1, [r2, #8]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 fb47 	bl	8007080 <__malloc_unlock>
 80069f2:	3408      	adds	r4, #8
 80069f4:	4620      	mov	r0, r4
 80069f6:	b003      	add	sp, #12
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	2510      	movs	r5, #16
 80069fe:	42a9      	cmp	r1, r5
 8006a00:	d9d9      	bls.n	80069b6 <_malloc_r+0x1a>
 8006a02:	240c      	movs	r4, #12
 8006a04:	6034      	str	r4, [r6, #0]
 8006a06:	2400      	movs	r4, #0
 8006a08:	e7f4      	b.n	80069f4 <_malloc_r+0x58>
 8006a0a:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8006a0e:	f000 8089 	beq.w	8006b24 <_malloc_r+0x188>
 8006a12:	f1bc 0f04 	cmp.w	ip, #4
 8006a16:	f200 8153 	bhi.w	8006cc0 <_malloc_r+0x324>
 8006a1a:	ea4f 1795 	mov.w	r7, r5, lsr #6
 8006a1e:	f107 0e38 	add.w	lr, r7, #56	; 0x38
 8006a22:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8006a26:	4fa0      	ldr	r7, [pc, #640]	; (8006ca8 <_malloc_r+0x30c>)
 8006a28:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006a2c:	68cc      	ldr	r4, [r1, #12]
 8006a2e:	42a1      	cmp	r1, r4
 8006a30:	d105      	bne.n	8006a3e <_malloc_r+0xa2>
 8006a32:	e00c      	b.n	8006a4e <_malloc_r+0xb2>
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	da7a      	bge.n	8006b2e <_malloc_r+0x192>
 8006a38:	68e4      	ldr	r4, [r4, #12]
 8006a3a:	42a1      	cmp	r1, r4
 8006a3c:	d007      	beq.n	8006a4e <_malloc_r+0xb2>
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	f023 0003 	bic.w	r0, r3, #3
 8006a44:	1b42      	subs	r2, r0, r5
 8006a46:	2a0f      	cmp	r2, #15
 8006a48:	ddf4      	ble.n	8006a34 <_malloc_r+0x98>
 8006a4a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006a4e:	f10e 0c01 	add.w	ip, lr, #1
 8006a52:	4b95      	ldr	r3, [pc, #596]	; (8006ca8 <_malloc_r+0x30c>)
 8006a54:	693c      	ldr	r4, [r7, #16]
 8006a56:	f103 0e08 	add.w	lr, r3, #8
 8006a5a:	4574      	cmp	r4, lr
 8006a5c:	f000 8170 	beq.w	8006d40 <_malloc_r+0x3a4>
 8006a60:	6861      	ldr	r1, [r4, #4]
 8006a62:	f021 0103 	bic.w	r1, r1, #3
 8006a66:	1b4a      	subs	r2, r1, r5
 8006a68:	2a0f      	cmp	r2, #15
 8006a6a:	f300 8156 	bgt.w	8006d1a <_malloc_r+0x37e>
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	f8c3 e014 	str.w	lr, [r3, #20]
 8006a74:	f8c3 e010 	str.w	lr, [r3, #16]
 8006a78:	da67      	bge.n	8006b4a <_malloc_r+0x1ae>
 8006a7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006a7e:	f080 812d 	bcs.w	8006cdc <_malloc_r+0x340>
 8006a82:	08c9      	lsrs	r1, r1, #3
 8006a84:	1088      	asrs	r0, r1, #2
 8006a86:	f04f 0801 	mov.w	r8, #1
 8006a8a:	fa08 f800 	lsl.w	r8, r8, r0
 8006a8e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	6888      	ldr	r0, [r1, #8]
 8006a96:	ea48 0202 	orr.w	r2, r8, r2
 8006a9a:	60e1      	str	r1, [r4, #12]
 8006a9c:	60a0      	str	r0, [r4, #8]
 8006a9e:	605a      	str	r2, [r3, #4]
 8006aa0:	608c      	str	r4, [r1, #8]
 8006aa2:	60c4      	str	r4, [r0, #12]
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	ea4f 04ac 	mov.w	r4, ip, asr #2
 8006aaa:	fa00 f004 	lsl.w	r0, r0, r4
 8006aae:	4290      	cmp	r0, r2
 8006ab0:	d855      	bhi.n	8006b5e <_malloc_r+0x1c2>
 8006ab2:	4202      	tst	r2, r0
 8006ab4:	d106      	bne.n	8006ac4 <_malloc_r+0x128>
 8006ab6:	f02c 0c03 	bic.w	ip, ip, #3
 8006aba:	0040      	lsls	r0, r0, #1
 8006abc:	4202      	tst	r2, r0
 8006abe:	f10c 0c04 	add.w	ip, ip, #4
 8006ac2:	d0fa      	beq.n	8006aba <_malloc_r+0x11e>
 8006ac4:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
 8006ac8:	464c      	mov	r4, r9
 8006aca:	46e0      	mov	r8, ip
 8006acc:	68e3      	ldr	r3, [r4, #12]
 8006ace:	429c      	cmp	r4, r3
 8006ad0:	d107      	bne.n	8006ae2 <_malloc_r+0x146>
 8006ad2:	e137      	b.n	8006d44 <_malloc_r+0x3a8>
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	f280 815f 	bge.w	8006d98 <_malloc_r+0x3fc>
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	429c      	cmp	r4, r3
 8006ade:	f000 8131 	beq.w	8006d44 <_malloc_r+0x3a8>
 8006ae2:	6859      	ldr	r1, [r3, #4]
 8006ae4:	f021 0103 	bic.w	r1, r1, #3
 8006ae8:	1b4a      	subs	r2, r1, r5
 8006aea:	2a0f      	cmp	r2, #15
 8006aec:	ddf2      	ble.n	8006ad4 <_malloc_r+0x138>
 8006aee:	461c      	mov	r4, r3
 8006af0:	68d8      	ldr	r0, [r3, #12]
 8006af2:	f854 cf08 	ldr.w	ip, [r4, #8]!
 8006af6:	1959      	adds	r1, r3, r5
 8006af8:	f045 0801 	orr.w	r8, r5, #1
 8006afc:	f042 0501 	orr.w	r5, r2, #1
 8006b00:	f8cc 000c 	str.w	r0, [ip, #12]
 8006b04:	f8c0 c008 	str.w	ip, [r0, #8]
 8006b08:	f8c3 8004 	str.w	r8, [r3, #4]
 8006b0c:	6179      	str	r1, [r7, #20]
 8006b0e:	6139      	str	r1, [r7, #16]
 8006b10:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006b14:	f8c1 e008 	str.w	lr, [r1, #8]
 8006b18:	604d      	str	r5, [r1, #4]
 8006b1a:	508a      	str	r2, [r1, r2]
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f000 faaf 	bl	8007080 <__malloc_unlock>
 8006b22:	e767      	b.n	80069f4 <_malloc_r+0x58>
 8006b24:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8006b28:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8006b2c:	e77b      	b.n	8006a26 <_malloc_r+0x8a>
 8006b2e:	1822      	adds	r2, r4, r0
 8006b30:	6850      	ldr	r0, [r2, #4]
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	68a1      	ldr	r1, [r4, #8]
 8006b36:	f040 0001 	orr.w	r0, r0, #1
 8006b3a:	6050      	str	r0, [r2, #4]
 8006b3c:	60cb      	str	r3, [r1, #12]
 8006b3e:	6099      	str	r1, [r3, #8]
 8006b40:	4630      	mov	r0, r6
 8006b42:	f000 fa9d 	bl	8007080 <__malloc_unlock>
 8006b46:	3408      	adds	r4, #8
 8006b48:	e754      	b.n	80069f4 <_malloc_r+0x58>
 8006b4a:	1862      	adds	r2, r4, r1
 8006b4c:	6853      	ldr	r3, [r2, #4]
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f043 0101 	orr.w	r1, r3, #1
 8006b54:	6051      	str	r1, [r2, #4]
 8006b56:	f000 fa93 	bl	8007080 <__malloc_unlock>
 8006b5a:	3408      	adds	r4, #8
 8006b5c:	e74a      	b.n	80069f4 <_malloc_r+0x58>
 8006b5e:	68bc      	ldr	r4, [r7, #8]
 8006b60:	6860      	ldr	r0, [r4, #4]
 8006b62:	f020 0903 	bic.w	r9, r0, #3
 8006b66:	45a9      	cmp	r9, r5
 8006b68:	d304      	bcc.n	8006b74 <_malloc_r+0x1d8>
 8006b6a:	ebc5 0309 	rsb	r3, r5, r9
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	f300 808d 	bgt.w	8006c8e <_malloc_r+0x2f2>
 8006b74:	4a4d      	ldr	r2, [pc, #308]	; (8006cac <_malloc_r+0x310>)
 8006b76:	4b4e      	ldr	r3, [pc, #312]	; (8006cb0 <_malloc_r+0x314>)
 8006b78:	6811      	ldr	r1, [r2, #0]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	3101      	adds	r1, #1
 8006b7e:	eb04 0b09 	add.w	fp, r4, r9
 8006b82:	eb05 0300 	add.w	r3, r5, r0
 8006b86:	f000 8151 	beq.w	8006e2c <_malloc_r+0x490>
 8006b8a:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8006b8e:	300f      	adds	r0, #15
 8006b90:	f420 617f 	bic.w	r1, r0, #4080	; 0xff0
 8006b94:	f021 0c0f 	bic.w	ip, r1, #15
 8006b98:	4661      	mov	r1, ip
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	e88d 1004 	stmia.w	sp, {r2, ip}
 8006ba0:	f000 faa4 	bl	80070ec <_sbrk_r>
 8006ba4:	e89d 1004 	ldmia.w	sp, {r2, ip}
 8006ba8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006bac:	4680      	mov	r8, r0
 8006bae:	f000 8146 	beq.w	8006e3e <_malloc_r+0x4a2>
 8006bb2:	4583      	cmp	fp, r0
 8006bb4:	f200 8108 	bhi.w	8006dc8 <_malloc_r+0x42c>
 8006bb8:	f8df a100 	ldr.w	sl, [pc, #256]	; 8006cbc <_malloc_r+0x320>
 8006bbc:	45c3      	cmp	fp, r8
 8006bbe:	f8da 3000 	ldr.w	r3, [sl]
 8006bc2:	4463      	add	r3, ip
 8006bc4:	f8ca 3000 	str.w	r3, [sl]
 8006bc8:	f000 813e 	beq.w	8006e48 <_malloc_r+0x4ac>
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	3201      	adds	r2, #1
 8006bd0:	f000 814b 	beq.w	8006e6a <_malloc_r+0x4ce>
 8006bd4:	ebcb 0b08 	rsb	fp, fp, r8
 8006bd8:	445b      	add	r3, fp
 8006bda:	f8ca 3000 	str.w	r3, [sl]
 8006bde:	f018 0107 	ands.w	r1, r8, #7
 8006be2:	f000 8104 	beq.w	8006dee <_malloc_r+0x452>
 8006be6:	f1c1 0008 	rsb	r0, r1, #8
 8006bea:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 8006bee:	4480      	add	r8, r0
 8006bf0:	f103 0208 	add.w	r2, r3, #8
 8006bf4:	eb08 010c 	add.w	r1, r8, ip
 8006bf8:	0508      	lsls	r0, r1, #20
 8006bfa:	0d03      	lsrs	r3, r0, #20
 8006bfc:	ebc3 0b02 	rsb	fp, r3, r2
 8006c00:	4630      	mov	r0, r6
 8006c02:	4659      	mov	r1, fp
 8006c04:	f000 fa72 	bl	80070ec <_sbrk_r>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	f000 813a 	beq.w	8006e82 <_malloc_r+0x4e6>
 8006c0e:	ebc8 0200 	rsb	r2, r8, r0
 8006c12:	eb0b 0102 	add.w	r1, fp, r2
 8006c16:	f041 0001 	orr.w	r0, r1, #1
 8006c1a:	f8da 3000 	ldr.w	r3, [sl]
 8006c1e:	42bc      	cmp	r4, r7
 8006c20:	445b      	add	r3, fp
 8006c22:	f8c7 8008 	str.w	r8, [r7, #8]
 8006c26:	f8ca 3000 	str.w	r3, [sl]
 8006c2a:	f8c8 0004 	str.w	r0, [r8, #4]
 8006c2e:	d015      	beq.n	8006c5c <_malloc_r+0x2c0>
 8006c30:	f1b9 0f0f 	cmp.w	r9, #15
 8006c34:	f240 80e9 	bls.w	8006e0a <_malloc_r+0x46e>
 8006c38:	6861      	ldr	r1, [r4, #4]
 8006c3a:	f1a9 020c 	sub.w	r2, r9, #12
 8006c3e:	f022 0207 	bic.w	r2, r2, #7
 8006c42:	f001 0c01 	and.w	ip, r1, #1
 8006c46:	2005      	movs	r0, #5
 8006c48:	18a1      	adds	r1, r4, r2
 8006c4a:	ea42 0e0c 	orr.w	lr, r2, ip
 8006c4e:	2a0f      	cmp	r2, #15
 8006c50:	f8c4 e004 	str.w	lr, [r4, #4]
 8006c54:	6048      	str	r0, [r1, #4]
 8006c56:	6088      	str	r0, [r1, #8]
 8006c58:	f200 810b 	bhi.w	8006e72 <_malloc_r+0x4d6>
 8006c5c:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <_malloc_r+0x318>)
 8006c5e:	68bc      	ldr	r4, [r7, #8]
 8006c60:	6810      	ldr	r0, [r2, #0]
 8006c62:	4283      	cmp	r3, r0
 8006c64:	bf88      	it	hi
 8006c66:	6013      	strhi	r3, [r2, #0]
 8006c68:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <_malloc_r+0x31c>)
 8006c6a:	6811      	ldr	r1, [r2, #0]
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	bf88      	it	hi
 8006c70:	6013      	strhi	r3, [r2, #0]
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	f023 0003 	bic.w	r0, r3, #3
 8006c78:	42a8      	cmp	r0, r5
 8006c7a:	ebc5 0300 	rsb	r3, r5, r0
 8006c7e:	d301      	bcc.n	8006c84 <_malloc_r+0x2e8>
 8006c80:	2b0f      	cmp	r3, #15
 8006c82:	dc04      	bgt.n	8006c8e <_malloc_r+0x2f2>
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 f9fb 	bl	8007080 <__malloc_unlock>
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	e6b2      	b.n	80069f4 <_malloc_r+0x58>
 8006c8e:	1962      	adds	r2, r4, r5
 8006c90:	f043 0101 	orr.w	r1, r3, #1
 8006c94:	f045 0501 	orr.w	r5, r5, #1
 8006c98:	6065      	str	r5, [r4, #4]
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	6051      	str	r1, [r2, #4]
 8006c9e:	60ba      	str	r2, [r7, #8]
 8006ca0:	f000 f9ee 	bl	8007080 <__malloc_unlock>
 8006ca4:	3408      	adds	r4, #8
 8006ca6:	e6a5      	b.n	80069f4 <_malloc_r+0x58>
 8006ca8:	20000570 	.word	0x20000570
 8006cac:	2000097c 	.word	0x2000097c
 8006cb0:	20000af4 	.word	0x20000af4
 8006cb4:	20000af0 	.word	0x20000af0
 8006cb8:	20000aec 	.word	0x20000aec
 8006cbc:	20000af8 	.word	0x20000af8
 8006cc0:	f1bc 0f14 	cmp.w	ip, #20
 8006cc4:	d977      	bls.n	8006db6 <_malloc_r+0x41a>
 8006cc6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8006cca:	f200 8086 	bhi.w	8006dda <_malloc_r+0x43e>
 8006cce:	ea4f 3415 	mov.w	r4, r5, lsr #12
 8006cd2:	f104 0e6e 	add.w	lr, r4, #110	; 0x6e
 8006cd6:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8006cda:	e6a4      	b.n	8006a26 <_malloc_r+0x8a>
 8006cdc:	0a48      	lsrs	r0, r1, #9
 8006cde:	2804      	cmp	r0, #4
 8006ce0:	d96e      	bls.n	8006dc0 <_malloc_r+0x424>
 8006ce2:	2814      	cmp	r0, #20
 8006ce4:	f200 80a5 	bhi.w	8006e32 <_malloc_r+0x496>
 8006ce8:	f100 025b 	add.w	r2, r0, #91	; 0x5b
 8006cec:	0050      	lsls	r0, r2, #1
 8006cee:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006cf2:	6883      	ldr	r3, [r0, #8]
 8006cf4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8006ec0 <_malloc_r+0x524>
 8006cf8:	4283      	cmp	r3, r0
 8006cfa:	d07b      	beq.n	8006df4 <_malloc_r+0x458>
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	f022 0203 	bic.w	r2, r2, #3
 8006d02:	4291      	cmp	r1, r2
 8006d04:	d202      	bcs.n	8006d0c <_malloc_r+0x370>
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4298      	cmp	r0, r3
 8006d0a:	d1f7      	bne.n	8006cfc <_malloc_r+0x360>
 8006d0c:	68d9      	ldr	r1, [r3, #12]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	60e1      	str	r1, [r4, #12]
 8006d12:	60a3      	str	r3, [r4, #8]
 8006d14:	60dc      	str	r4, [r3, #12]
 8006d16:	608c      	str	r4, [r1, #8]
 8006d18:	e6c4      	b.n	8006aa4 <_malloc_r+0x108>
 8006d1a:	1961      	adds	r1, r4, r5
 8006d1c:	f042 0001 	orr.w	r0, r2, #1
 8006d20:	f045 0501 	orr.w	r5, r5, #1
 8006d24:	6065      	str	r5, [r4, #4]
 8006d26:	6159      	str	r1, [r3, #20]
 8006d28:	6119      	str	r1, [r3, #16]
 8006d2a:	6048      	str	r0, [r1, #4]
 8006d2c:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006d30:	f8c1 e008 	str.w	lr, [r1, #8]
 8006d34:	508a      	str	r2, [r1, r2]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f9a2 	bl	8007080 <__malloc_unlock>
 8006d3c:	3408      	adds	r4, #8
 8006d3e:	e659      	b.n	80069f4 <_malloc_r+0x58>
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	e6af      	b.n	8006aa4 <_malloc_r+0x108>
 8006d44:	f108 0801 	add.w	r8, r8, #1
 8006d48:	3408      	adds	r4, #8
 8006d4a:	f018 0f03 	tst.w	r8, #3
 8006d4e:	f47f aebd 	bne.w	8006acc <_malloc_r+0x130>
 8006d52:	4649      	mov	r1, r9
 8006d54:	f01c 0f03 	tst.w	ip, #3
 8006d58:	f1a1 0408 	sub.w	r4, r1, #8
 8006d5c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006d60:	f000 80a2 	beq.w	8006ea8 <_malloc_r+0x50c>
 8006d64:	6809      	ldr	r1, [r1, #0]
 8006d66:	42a1      	cmp	r1, r4
 8006d68:	d0f4      	beq.n	8006d54 <_malloc_r+0x3b8>
 8006d6a:	687c      	ldr	r4, [r7, #4]
 8006d6c:	0040      	lsls	r0, r0, #1
 8006d6e:	42a0      	cmp	r0, r4
 8006d70:	f63f aef5 	bhi.w	8006b5e <_malloc_r+0x1c2>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f43f aef2 	beq.w	8006b5e <_malloc_r+0x1c2>
 8006d7a:	4204      	tst	r4, r0
 8006d7c:	f000 8099 	beq.w	8006eb2 <_malloc_r+0x516>
 8006d80:	46c4      	mov	ip, r8
 8006d82:	e69f      	b.n	8006ac4 <_malloc_r+0x128>
 8006d84:	f104 0308 	add.w	r3, r4, #8
 8006d88:	6964      	ldr	r4, [r4, #20]
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	bf08      	it	eq
 8006d8e:	f10c 0c02 	addeq.w	ip, ip, #2
 8006d92:	f43f ae5e 	beq.w	8006a52 <_malloc_r+0xb6>
 8006d96:	e61d      	b.n	80069d4 <_malloc_r+0x38>
 8006d98:	1859      	adds	r1, r3, r1
 8006d9a:	6848      	ldr	r0, [r1, #4]
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f040 0001 	orr.w	r0, r0, #1
 8006da8:	6048      	str	r0, [r1, #4]
 8006daa:	60d3      	str	r3, [r2, #12]
 8006dac:	609a      	str	r2, [r3, #8]
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 f966 	bl	8007080 <__malloc_unlock>
 8006db4:	e61e      	b.n	80069f4 <_malloc_r+0x58>
 8006db6:	f10c 0e5b 	add.w	lr, ip, #91	; 0x5b
 8006dba:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8006dbe:	e632      	b.n	8006a26 <_malloc_r+0x8a>
 8006dc0:	098a      	lsrs	r2, r1, #6
 8006dc2:	3238      	adds	r2, #56	; 0x38
 8006dc4:	0050      	lsls	r0, r2, #1
 8006dc6:	e792      	b.n	8006cee <_malloc_r+0x352>
 8006dc8:	42bc      	cmp	r4, r7
 8006dca:	f43f aef5 	beq.w	8006bb8 <_malloc_r+0x21c>
 8006dce:	4c3c      	ldr	r4, [pc, #240]	; (8006ec0 <_malloc_r+0x524>)
 8006dd0:	68a4      	ldr	r4, [r4, #8]
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	f022 0003 	bic.w	r0, r2, #3
 8006dd8:	e74e      	b.n	8006c78 <_malloc_r+0x2dc>
 8006dda:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8006dde:	d81a      	bhi.n	8006e16 <_malloc_r+0x47a>
 8006de0:	ea4f 32d5 	mov.w	r2, r5, lsr #15
 8006de4:	f102 0e77 	add.w	lr, r2, #119	; 0x77
 8006de8:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8006dec:	e61b      	b.n	8006a26 <_malloc_r+0x8a>
 8006dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006df2:	e6ff      	b.n	8006bf4 <_malloc_r+0x258>
 8006df4:	1091      	asrs	r1, r2, #2
 8006df6:	2001      	movs	r0, #1
 8006df8:	fa00 f001 	lsl.w	r0, r0, r1
 8006dfc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006e00:	4619      	mov	r1, r3
 8006e02:	4302      	orrs	r2, r0
 8006e04:	f8c8 2004 	str.w	r2, [r8, #4]
 8006e08:	e782      	b.n	8006d10 <_malloc_r+0x374>
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8c8 2004 	str.w	r2, [r8, #4]
 8006e10:	4644      	mov	r4, r8
 8006e12:	2000      	movs	r0, #0
 8006e14:	e730      	b.n	8006c78 <_malloc_r+0x2dc>
 8006e16:	f240 5354 	movw	r3, #1364	; 0x554
 8006e1a:	459c      	cmp	ip, r3
 8006e1c:	d821      	bhi.n	8006e62 <_malloc_r+0x4c6>
 8006e1e:	ea4f 4095 	mov.w	r0, r5, lsr #18
 8006e22:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
 8006e26:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8006e2a:	e5fc      	b.n	8006a26 <_malloc_r+0x8a>
 8006e2c:	f103 0c10 	add.w	ip, r3, #16
 8006e30:	e6b2      	b.n	8006b98 <_malloc_r+0x1fc>
 8006e32:	2854      	cmp	r0, #84	; 0x54
 8006e34:	d829      	bhi.n	8006e8a <_malloc_r+0x4ee>
 8006e36:	0b0a      	lsrs	r2, r1, #12
 8006e38:	326e      	adds	r2, #110	; 0x6e
 8006e3a:	0050      	lsls	r0, r2, #1
 8006e3c:	e757      	b.n	8006cee <_malloc_r+0x352>
 8006e3e:	68bc      	ldr	r4, [r7, #8]
 8006e40:	6861      	ldr	r1, [r4, #4]
 8006e42:	f021 0003 	bic.w	r0, r1, #3
 8006e46:	e717      	b.n	8006c78 <_malloc_r+0x2dc>
 8006e48:	ea4f 500b 	mov.w	r0, fp, lsl #20
 8006e4c:	0d01      	lsrs	r1, r0, #20
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	f47f aebc 	bne.w	8006bcc <_malloc_r+0x230>
 8006e54:	68b8      	ldr	r0, [r7, #8]
 8006e56:	eb0c 0109 	add.w	r1, ip, r9
 8006e5a:	f041 0401 	orr.w	r4, r1, #1
 8006e5e:	6044      	str	r4, [r0, #4]
 8006e60:	e6fc      	b.n	8006c5c <_malloc_r+0x2c0>
 8006e62:	21fc      	movs	r1, #252	; 0xfc
 8006e64:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8006e68:	e5dd      	b.n	8006a26 <_malloc_r+0x8a>
 8006e6a:	4816      	ldr	r0, [pc, #88]	; (8006ec4 <_malloc_r+0x528>)
 8006e6c:	f8c0 8000 	str.w	r8, [r0]
 8006e70:	e6b5      	b.n	8006bde <_malloc_r+0x242>
 8006e72:	f104 0108 	add.w	r1, r4, #8
 8006e76:	4c14      	ldr	r4, [pc, #80]	; (8006ec8 <_malloc_r+0x52c>)
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f004 fd31 	bl	800b8e0 <_free_r>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	e6ec      	b.n	8006c5c <_malloc_r+0x2c0>
 8006e82:	2001      	movs	r0, #1
 8006e84:	f04f 0b00 	mov.w	fp, #0
 8006e88:	e6c7      	b.n	8006c1a <_malloc_r+0x27e>
 8006e8a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8006e8e:	d803      	bhi.n	8006e98 <_malloc_r+0x4fc>
 8006e90:	0bca      	lsrs	r2, r1, #15
 8006e92:	3277      	adds	r2, #119	; 0x77
 8006e94:	0050      	lsls	r0, r2, #1
 8006e96:	e72a      	b.n	8006cee <_malloc_r+0x352>
 8006e98:	f240 5354 	movw	r3, #1364	; 0x554
 8006e9c:	4298      	cmp	r0, r3
 8006e9e:	d80c      	bhi.n	8006eba <_malloc_r+0x51e>
 8006ea0:	0c8a      	lsrs	r2, r1, #18
 8006ea2:	327c      	adds	r2, #124	; 0x7c
 8006ea4:	0050      	lsls	r0, r2, #1
 8006ea6:	e722      	b.n	8006cee <_malloc_r+0x352>
 8006ea8:	687c      	ldr	r4, [r7, #4]
 8006eaa:	ea24 0400 	bic.w	r4, r4, r0
 8006eae:	607c      	str	r4, [r7, #4]
 8006eb0:	e75c      	b.n	8006d6c <_malloc_r+0x3d0>
 8006eb2:	0040      	lsls	r0, r0, #1
 8006eb4:	f108 0804 	add.w	r8, r8, #4
 8006eb8:	e75f      	b.n	8006d7a <_malloc_r+0x3de>
 8006eba:	20fc      	movs	r0, #252	; 0xfc
 8006ebc:	227e      	movs	r2, #126	; 0x7e
 8006ebe:	e716      	b.n	8006cee <_malloc_r+0x352>
 8006ec0:	20000570 	.word	0x20000570
 8006ec4:	2000097c 	.word	0x2000097c
 8006ec8:	20000af8 	.word	0x20000af8

08006ecc <_mbrtowc_r>:
 8006ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	461f      	mov	r7, r3
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	4688      	mov	r8, r1
 8006eda:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006edc:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <_mbrtowc_r+0x54>)
 8006ede:	b19a      	cbz	r2, 8006f08 <_mbrtowc_r+0x3c>
 8006ee0:	f8d3 9000 	ldr.w	r9, [r3]
 8006ee4:	f7ff fd48 	bl	8006978 <__locale_charset>
 8006ee8:	4641      	mov	r1, r8
 8006eea:	e88d 0041 	stmia.w	sp, {r0, r6}
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	47c8      	blx	r9
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	d103      	bne.n	8006f02 <_mbrtowc_r+0x36>
 8006efa:	2100      	movs	r1, #0
 8006efc:	228a      	movs	r2, #138	; 0x8a
 8006efe:	6031      	str	r1, [r6, #0]
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	b003      	add	sp, #12
 8006f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f08:	681f      	ldr	r7, [r3, #0]
 8006f0a:	f7ff fd35 	bl	8006978 <__locale_charset>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	e88d 0041 	stmia.w	sp, {r0, r6}
 8006f14:	4a03      	ldr	r2, [pc, #12]	; (8006f24 <_mbrtowc_r+0x58>)
 8006f16:	4628      	mov	r0, r5
 8006f18:	2301      	movs	r3, #1
 8006f1a:	47b8      	blx	r7
 8006f1c:	e7eb      	b.n	8006ef6 <_mbrtowc_r+0x2a>
 8006f1e:	bf00      	nop
 8006f20:	20000980 	.word	0x20000980
 8006f24:	0800dc48 	.word	0x0800dc48

08006f28 <__ascii_mbtowc>:
 8006f28:	b082      	sub	sp, #8
 8006f2a:	b149      	cbz	r1, 8006f40 <__ascii_mbtowc+0x18>
 8006f2c:	b15a      	cbz	r2, 8006f46 <__ascii_mbtowc+0x1e>
 8006f2e:	b163      	cbz	r3, 8006f4a <__ascii_mbtowc+0x22>
 8006f30:	7813      	ldrb	r3, [r2, #0]
 8006f32:	600b      	str	r3, [r1, #0]
 8006f34:	7810      	ldrb	r0, [r2, #0]
 8006f36:	3000      	adds	r0, #0
 8006f38:	bf18      	it	ne
 8006f3a:	2001      	movne	r0, #1
 8006f3c:	b002      	add	sp, #8
 8006f3e:	4770      	bx	lr
 8006f40:	a901      	add	r1, sp, #4
 8006f42:	2a00      	cmp	r2, #0
 8006f44:	d1f3      	bne.n	8006f2e <__ascii_mbtowc+0x6>
 8006f46:	4610      	mov	r0, r2
 8006f48:	e7f8      	b.n	8006f3c <__ascii_mbtowc+0x14>
 8006f4a:	f06f 0001 	mvn.w	r0, #1
 8006f4e:	e7f5      	b.n	8006f3c <__ascii_mbtowc+0x14>

08006f50 <memset>:
 8006f50:	b4f0      	push	{r4, r5, r6, r7}
 8006f52:	0784      	lsls	r4, r0, #30
 8006f54:	4603      	mov	r3, r0
 8006f56:	f000 808d 	beq.w	8007074 <memset+0x124>
 8006f5a:	1e54      	subs	r4, r2, #1
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	f000 8087 	beq.w	8007070 <memset+0x120>
 8006f62:	07e5      	lsls	r5, r4, #31
 8006f64:	b2ce      	uxtb	r6, r1
 8006f66:	d411      	bmi.n	8006f8c <memset+0x3c>
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f802 6b01 	strb.w	r6, [r2], #1
 8006f6e:	4613      	mov	r3, r2
 8006f70:	4615      	mov	r5, r2
 8006f72:	0792      	lsls	r2, r2, #30
 8006f74:	d010      	beq.n	8006f98 <memset+0x48>
 8006f76:	1e62      	subs	r2, r4, #1
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d079      	beq.n	8007070 <memset+0x120>
 8006f7c:	f803 6b01 	strb.w	r6, [r3], #1
 8006f80:	4614      	mov	r4, r2
 8006f82:	079a      	lsls	r2, r3, #30
 8006f84:	461d      	mov	r5, r3
 8006f86:	d007      	beq.n	8006f98 <memset+0x48>
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	e7ed      	b.n	8006f68 <memset+0x18>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f803 6b01 	strb.w	r6, [r3], #1
 8006f92:	079a      	lsls	r2, r3, #30
 8006f94:	461d      	mov	r5, r3
 8006f96:	d1f7      	bne.n	8006f88 <memset+0x38>
 8006f98:	2c03      	cmp	r4, #3
 8006f9a:	d952      	bls.n	8007042 <memset+0xf2>
 8006f9c:	b2ce      	uxtb	r6, r1
 8006f9e:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8006fa2:	2c0f      	cmp	r4, #15
 8006fa4:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8006fa8:	d92d      	bls.n	8007006 <memset+0xb6>
 8006faa:	f1a4 0210 	sub.w	r2, r4, #16
 8006fae:	4617      	mov	r7, r2
 8006fb0:	2f0f      	cmp	r7, #15
 8006fb2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8006fb6:	602b      	str	r3, [r5, #0]
 8006fb8:	606b      	str	r3, [r5, #4]
 8006fba:	60ab      	str	r3, [r5, #8]
 8006fbc:	60eb      	str	r3, [r5, #12]
 8006fbe:	f105 0210 	add.w	r2, r5, #16
 8006fc2:	d916      	bls.n	8006ff2 <memset+0xa2>
 8006fc4:	b13e      	cbz	r6, 8006fd6 <memset+0x86>
 8006fc6:	3f10      	subs	r7, #16
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	6053      	str	r3, [r2, #4]
 8006fcc:	6093      	str	r3, [r2, #8]
 8006fce:	60d3      	str	r3, [r2, #12]
 8006fd0:	3210      	adds	r2, #16
 8006fd2:	2f0f      	cmp	r7, #15
 8006fd4:	d90d      	bls.n	8006ff2 <memset+0xa2>
 8006fd6:	3f20      	subs	r7, #32
 8006fd8:	f102 0610 	add.w	r6, r2, #16
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	6053      	str	r3, [r2, #4]
 8006fe0:	6093      	str	r3, [r2, #8]
 8006fe2:	60d3      	str	r3, [r2, #12]
 8006fe4:	6113      	str	r3, [r2, #16]
 8006fe6:	6153      	str	r3, [r2, #20]
 8006fe8:	6193      	str	r3, [r2, #24]
 8006fea:	61d3      	str	r3, [r2, #28]
 8006fec:	3220      	adds	r2, #32
 8006fee:	2f0f      	cmp	r7, #15
 8006ff0:	d8f1      	bhi.n	8006fd6 <memset+0x86>
 8006ff2:	f1a4 0210 	sub.w	r2, r4, #16
 8006ff6:	f022 020f 	bic.w	r2, r2, #15
 8006ffa:	f004 040f 	and.w	r4, r4, #15
 8006ffe:	3210      	adds	r2, #16
 8007000:	2c03      	cmp	r4, #3
 8007002:	4415      	add	r5, r2
 8007004:	d91d      	bls.n	8007042 <memset+0xf2>
 8007006:	1f27      	subs	r7, r4, #4
 8007008:	463e      	mov	r6, r7
 800700a:	462a      	mov	r2, r5
 800700c:	2e03      	cmp	r6, #3
 800700e:	f842 3b04 	str.w	r3, [r2], #4
 8007012:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8007016:	d90d      	bls.n	8007034 <memset+0xe4>
 8007018:	b127      	cbz	r7, 8007024 <memset+0xd4>
 800701a:	3e04      	subs	r6, #4
 800701c:	2e03      	cmp	r6, #3
 800701e:	f842 3b04 	str.w	r3, [r2], #4
 8007022:	d907      	bls.n	8007034 <memset+0xe4>
 8007024:	4617      	mov	r7, r2
 8007026:	f847 3b04 	str.w	r3, [r7], #4
 800702a:	3e08      	subs	r6, #8
 800702c:	6053      	str	r3, [r2, #4]
 800702e:	1d3a      	adds	r2, r7, #4
 8007030:	2e03      	cmp	r6, #3
 8007032:	d8f7      	bhi.n	8007024 <memset+0xd4>
 8007034:	1f23      	subs	r3, r4, #4
 8007036:	f023 0203 	bic.w	r2, r3, #3
 800703a:	1d13      	adds	r3, r2, #4
 800703c:	f004 0403 	and.w	r4, r4, #3
 8007040:	18ed      	adds	r5, r5, r3
 8007042:	b1ac      	cbz	r4, 8007070 <memset+0x120>
 8007044:	b2c9      	uxtb	r1, r1
 8007046:	43ea      	mvns	r2, r5
 8007048:	192c      	adds	r4, r5, r4
 800704a:	f805 1b01 	strb.w	r1, [r5], #1
 800704e:	18a3      	adds	r3, r4, r2
 8007050:	42a5      	cmp	r5, r4
 8007052:	f003 0201 	and.w	r2, r3, #1
 8007056:	d00b      	beq.n	8007070 <memset+0x120>
 8007058:	b11a      	cbz	r2, 8007062 <memset+0x112>
 800705a:	f805 1b01 	strb.w	r1, [r5], #1
 800705e:	42a5      	cmp	r5, r4
 8007060:	d006      	beq.n	8007070 <memset+0x120>
 8007062:	462b      	mov	r3, r5
 8007064:	f803 1b01 	strb.w	r1, [r3], #1
 8007068:	7069      	strb	r1, [r5, #1]
 800706a:	1c5d      	adds	r5, r3, #1
 800706c:	42a5      	cmp	r5, r4
 800706e:	d1f8      	bne.n	8007062 <memset+0x112>
 8007070:	bcf0      	pop	{r4, r5, r6, r7}
 8007072:	4770      	bx	lr
 8007074:	4605      	mov	r5, r0
 8007076:	4614      	mov	r4, r2
 8007078:	e78e      	b.n	8006f98 <memset+0x48>
 800707a:	bf00      	nop

0800707c <__malloc_lock>:
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop

08007080 <__malloc_unlock>:
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop

08007084 <__fpclassifyd>:
 8007084:	460b      	mov	r3, r1
 8007086:	b161      	cbz	r1, 80070a2 <__fpclassifyd+0x1e>
 8007088:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800708c:	d009      	beq.n	80070a2 <__fpclassifyd+0x1e>
 800708e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007092:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
 8007096:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800709a:	4291      	cmp	r1, r2
 800709c:	d805      	bhi.n	80070aa <__fpclassifyd+0x26>
 800709e:	2004      	movs	r0, #4
 80070a0:	4770      	bx	lr
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d1f3      	bne.n	800708e <__fpclassifyd+0xa>
 80070a6:	2002      	movs	r0, #2
 80070a8:	4770      	bx	lr
 80070aa:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
 80070ae:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 80070b2:	4291      	cmp	r1, r2
 80070b4:	d9f3      	bls.n	800709e <__fpclassifyd+0x1a>
 80070b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ba:	f2c0 020f 	movt	r2, #15
 80070be:	4293      	cmp	r3, r2
 80070c0:	d801      	bhi.n	80070c6 <__fpclassifyd+0x42>
 80070c2:	2003      	movs	r0, #3
 80070c4:	4770      	bx	lr
 80070c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070ca:	4291      	cmp	r1, r2
 80070cc:	d9f9      	bls.n	80070c2 <__fpclassifyd+0x3e>
 80070ce:	2200      	movs	r2, #0
 80070d0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d004      	beq.n	80070e2 <__fpclassifyd+0x5e>
 80070d8:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 80070dc:	d001      	beq.n	80070e2 <__fpclassifyd+0x5e>
 80070de:	2000      	movs	r0, #0
 80070e0:	4770      	bx	lr
 80070e2:	f1d0 0001 	rsbs	r0, r0, #1
 80070e6:	bf38      	it	cc
 80070e8:	2000      	movcc	r0, #0
 80070ea:	4770      	bx	lr

080070ec <_sbrk_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4c07      	ldr	r4, [pc, #28]	; (800710c <_sbrk_r+0x20>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4605      	mov	r5, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	f7fa fc40 	bl	800197c <_sbrk>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d000      	beq.n	8007102 <_sbrk_r+0x16>
 8007100:	bd38      	pop	{r3, r4, r5, pc}
 8007102:	6821      	ldr	r1, [r4, #0]
 8007104:	2900      	cmp	r1, #0
 8007106:	d0fb      	beq.n	8007100 <_sbrk_r+0x14>
 8007108:	6029      	str	r1, [r5, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20001c44 	.word	0x20001c44

08007110 <__sccl>:
 8007110:	b4f0      	push	{r4, r5, r6, r7}
 8007112:	780d      	ldrb	r5, [r1, #0]
 8007114:	2d5e      	cmp	r5, #94	; 0x5e
 8007116:	d03f      	beq.n	8007198 <__sccl+0x88>
 8007118:	2400      	movs	r4, #0
 800711a:	3101      	adds	r1, #1
 800711c:	4626      	mov	r6, r4
 800711e:	2300      	movs	r3, #0
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	54c4      	strb	r4, [r0, r3]
 8007124:	3302      	adds	r3, #2
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	5484      	strb	r4, [r0, r2]
 800712c:	d1f8      	bne.n	8007120 <__sccl+0x10>
 800712e:	b185      	cbz	r5, 8007152 <__sccl+0x42>
 8007130:	f086 0401 	eor.w	r4, r6, #1
 8007134:	5544      	strb	r4, [r0, r5]
 8007136:	1c4a      	adds	r2, r1, #1
 8007138:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800713c:	2b2d      	cmp	r3, #45	; 0x2d
 800713e:	d00c      	beq.n	800715a <__sccl+0x4a>
 8007140:	2b5d      	cmp	r3, #93	; 0x5d
 8007142:	d008      	beq.n	8007156 <__sccl+0x46>
 8007144:	b913      	cbnz	r3, 800714c <__sccl+0x3c>
 8007146:	4608      	mov	r0, r1
 8007148:	bcf0      	pop	{r4, r5, r6, r7}
 800714a:	4770      	bx	lr
 800714c:	461d      	mov	r5, r3
 800714e:	4611      	mov	r1, r2
 8007150:	e7f0      	b.n	8007134 <__sccl+0x24>
 8007152:	3901      	subs	r1, #1
 8007154:	e7f7      	b.n	8007146 <__sccl+0x36>
 8007156:	4611      	mov	r1, r2
 8007158:	e7f5      	b.n	8007146 <__sccl+0x36>
 800715a:	784e      	ldrb	r6, [r1, #1]
 800715c:	2e5d      	cmp	r6, #93	; 0x5d
 800715e:	d0f5      	beq.n	800714c <__sccl+0x3c>
 8007160:	42b5      	cmp	r5, r6
 8007162:	dcf3      	bgt.n	800714c <__sccl+0x3c>
 8007164:	43ef      	mvns	r7, r5
 8007166:	1943      	adds	r3, r0, r5
 8007168:	3501      	adds	r5, #1
 800716a:	19bf      	adds	r7, r7, r6
 800716c:	3102      	adds	r1, #2
 800716e:	42ae      	cmp	r6, r5
 8007170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007174:	f007 0701 	and.w	r7, r7, #1
 8007178:	dd0c      	ble.n	8007194 <__sccl+0x84>
 800717a:	b127      	cbz	r7, 8007186 <__sccl+0x76>
 800717c:	3501      	adds	r5, #1
 800717e:	42ae      	cmp	r6, r5
 8007180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007184:	dd06      	ble.n	8007194 <__sccl+0x84>
 8007186:	3502      	adds	r5, #2
 8007188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718c:	42ae      	cmp	r6, r5
 800718e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007192:	dcf8      	bgt.n	8007186 <__sccl+0x76>
 8007194:	3202      	adds	r2, #2
 8007196:	e7cf      	b.n	8007138 <__sccl+0x28>
 8007198:	2401      	movs	r4, #1
 800719a:	784d      	ldrb	r5, [r1, #1]
 800719c:	4626      	mov	r6, r4
 800719e:	3102      	adds	r1, #2
 80071a0:	e7bd      	b.n	800711e <__sccl+0xe>
 80071a2:	bf00      	nop

080071a4 <nanf>:
 80071a4:	2000      	movs	r0, #0
 80071a6:	f6c7 70c0 	movt	r0, #32704	; 0x7fc0
 80071aa:	4770      	bx	lr

080071ac <sprintf>:
 80071ac:	b40e      	push	{r1, r2, r3}
 80071ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b0:	b09c      	sub	sp, #112	; 0x70
 80071b2:	ac21      	add	r4, sp, #132	; 0x84
 80071b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80071b8:	f240 5310 	movw	r3, #1296	; 0x510
 80071bc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80071c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80071c4:	4606      	mov	r6, r0
 80071c6:	a902      	add	r1, sp, #8
 80071c8:	9504      	str	r5, [sp, #16]
 80071ca:	9507      	str	r5, [sp, #28]
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	f44f 7702 	mov.w	r7, #520	; 0x208
 80071d2:	4623      	mov	r3, r4
 80071d4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80071d8:	f8ad 7014 	strh.w	r7, [sp, #20]
 80071dc:	9602      	str	r6, [sp, #8]
 80071de:	9606      	str	r6, [sp, #24]
 80071e0:	f8ad 5016 	strh.w	r5, [sp, #22]
 80071e4:	9401      	str	r4, [sp, #4]
 80071e6:	f001 fb0f 	bl	8008808 <_svfprintf_r>
 80071ea:	9902      	ldr	r1, [sp, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	700a      	strb	r2, [r1, #0]
 80071f0:	b01c      	add	sp, #112	; 0x70
 80071f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80071f6:	b003      	add	sp, #12
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	0000      	movs	r0, r0
	...

08007200 <_strtod_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	b09d      	sub	sp, #116	; 0x74
 8007206:	9104      	str	r1, [sp, #16]
 8007208:	4682      	mov	sl, r0
 800720a:	2100      	movs	r1, #0
 800720c:	2000      	movs	r0, #0
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007214:	920f      	str	r2, [sp, #60]	; 0x3c
 8007216:	9317      	str	r3, [sp, #92]	; 0x5c
 8007218:	461a      	mov	r2, r3
 800721a:	4617      	mov	r7, r2
 800721c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007220:	2b2d      	cmp	r3, #45	; 0x2d
 8007222:	d855      	bhi.n	80072d0 <_strtod_r+0xd0>
 8007224:	e8df f003 	tbb	[pc, r3]
 8007228:	54545450 	.word	0x54545450
 800722c:	54545454 	.word	0x54545454
 8007230:	4e4e4e54 	.word	0x4e4e4e54
 8007234:	54544e4e 	.word	0x54544e4e
 8007238:	54545454 	.word	0x54545454
 800723c:	54545454 	.word	0x54545454
 8007240:	54545454 	.word	0x54545454
 8007244:	54545454 	.word	0x54545454
 8007248:	5454544e 	.word	0x5454544e
 800724c:	54545454 	.word	0x54545454
 8007250:	30545454 	.word	0x30545454
 8007254:	1754      	.short	0x1754
 8007256:	1c78      	adds	r0, r7, #1
 8007258:	9017      	str	r0, [sp, #92]	; 0x5c
 800725a:	787b      	ldrb	r3, [r7, #1]
 800725c:	2501      	movs	r5, #1
 800725e:	9510      	str	r5, [sp, #64]	; 0x40
 8007260:	b9cb      	cbnz	r3, 8007296 <_strtod_r+0x96>
 8007262:	469b      	mov	fp, r3
 8007264:	4699      	mov	r9, r3
 8007266:	9804      	ldr	r0, [sp, #16]
 8007268:	2500      	movs	r5, #0
 800726a:	9017      	str	r0, [sp, #92]	; 0x5c
 800726c:	9510      	str	r5, [sp, #64]	; 0x40
 800726e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007270:	b10c      	cbz	r4, 8007276 <_strtod_r+0x76>
 8007272:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007274:	6020      	str	r0, [r4, #0]
 8007276:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007278:	b10d      	cbz	r5, 800727e <_strtod_r+0x7e>
 800727a:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800727e:	4658      	mov	r0, fp
 8007280:	4649      	mov	r1, r9
 8007282:	b01d      	add	sp, #116	; 0x74
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	1c78      	adds	r0, r7, #1
 800728a:	9017      	str	r0, [sp, #92]	; 0x5c
 800728c:	787b      	ldrb	r3, [r7, #1]
 800728e:	2400      	movs	r4, #0
 8007290:	9410      	str	r4, [sp, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0e5      	beq.n	8007262 <_strtod_r+0x62>
 8007296:	2b30      	cmp	r3, #48	; 0x30
 8007298:	4607      	mov	r7, r0
 800729a:	d11d      	bne.n	80072d8 <_strtod_r+0xd8>
 800729c:	787b      	ldrb	r3, [r7, #1]
 800729e:	2b58      	cmp	r3, #88	; 0x58
 80072a0:	f000 84ad 	beq.w	8007bfe <_strtod_r+0x9fe>
 80072a4:	2b78      	cmp	r3, #120	; 0x78
 80072a6:	f000 84aa 	beq.w	8007bfe <_strtod_r+0x9fe>
 80072aa:	1c7a      	adds	r2, r7, #1
 80072ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ae:	4617      	mov	r7, r2
 80072b0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80072b4:	2b30      	cmp	r3, #48	; 0x30
 80072b6:	d0f9      	beq.n	80072ac <_strtod_r+0xac>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 840b 	beq.w	8007ad4 <_strtod_r+0x8d4>
 80072be:	2501      	movs	r5, #1
 80072c0:	9508      	str	r5, [sp, #32]
 80072c2:	e00b      	b.n	80072dc <_strtod_r+0xdc>
 80072c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072c6:	e7a8      	b.n	800721a <_strtod_r+0x1a>
 80072c8:	f04f 0b00 	mov.w	fp, #0
 80072cc:	46d9      	mov	r9, fp
 80072ce:	e7ca      	b.n	8007266 <_strtod_r+0x66>
 80072d0:	2100      	movs	r1, #0
 80072d2:	2b30      	cmp	r3, #48	; 0x30
 80072d4:	9110      	str	r1, [sp, #64]	; 0x40
 80072d6:	d0e1      	beq.n	800729c <_strtod_r+0x9c>
 80072d8:	2600      	movs	r6, #0
 80072da:	9608      	str	r6, [sp, #32]
 80072dc:	2b2f      	cmp	r3, #47	; 0x2f
 80072de:	461d      	mov	r5, r3
 80072e0:	f04f 0b00 	mov.w	fp, #0
 80072e4:	dd1f      	ble.n	8007326 <_strtod_r+0x126>
 80072e6:	2b39      	cmp	r3, #57	; 0x39
 80072e8:	dc1d      	bgt.n	8007326 <_strtod_r+0x126>
 80072ea:	1c78      	adds	r0, r7, #1
 80072ec:	465e      	mov	r6, fp
 80072ee:	465c      	mov	r4, fp
 80072f0:	e00e      	b.n	8007310 <_strtod_r+0x110>
 80072f2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80072f6:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80072fa:	3e30      	subs	r6, #48	; 0x30
 80072fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80072fe:	4680      	mov	r8, r0
 8007300:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007304:	3401      	adds	r4, #1
 8007306:	2b2f      	cmp	r3, #47	; 0x2f
 8007308:	461d      	mov	r5, r3
 800730a:	dd0f      	ble.n	800732c <_strtod_r+0x12c>
 800730c:	2b39      	cmp	r3, #57	; 0x39
 800730e:	dc0d      	bgt.n	800732c <_strtod_r+0x12c>
 8007310:	2c0f      	cmp	r4, #15
 8007312:	dcf3      	bgt.n	80072fc <_strtod_r+0xfc>
 8007314:	2c08      	cmp	r4, #8
 8007316:	ddec      	ble.n	80072f2 <_strtod_r+0xf2>
 8007318:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800731c:	eb03 014b 	add.w	r1, r3, fp, lsl #1
 8007320:	f1a1 0b30 	sub.w	fp, r1, #48	; 0x30
 8007324:	e7ea      	b.n	80072fc <_strtod_r+0xfc>
 8007326:	46b8      	mov	r8, r7
 8007328:	465e      	mov	r6, fp
 800732a:	465c      	mov	r4, fp
 800732c:	4650      	mov	r0, sl
 800732e:	f7ff fb2f 	bl	8006990 <_localeconv_r>
 8007332:	f8d0 9000 	ldr.w	r9, [r0]
 8007336:	4650      	mov	r0, sl
 8007338:	f7ff fb2a 	bl	8006990 <_localeconv_r>
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f7fe f933 	bl	80055a8 <strlen>
 8007342:	4649      	mov	r1, r9
 8007344:	4602      	mov	r2, r0
 8007346:	4640      	mov	r0, r8
 8007348:	f7fe f95e 	bl	8005608 <strncmp>
 800734c:	4680      	mov	r8, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	f000 8111 	beq.w	8007576 <_strtod_r+0x376>
 8007354:	2000      	movs	r0, #0
 8007356:	46a0      	mov	r8, r4
 8007358:	4684      	mov	ip, r0
 800735a:	4686      	mov	lr, r0
 800735c:	2d65      	cmp	r5, #101	; 0x65
 800735e:	f000 8084 	beq.w	800746a <_strtod_r+0x26a>
 8007362:	2d45      	cmp	r5, #69	; 0x45
 8007364:	f000 8081 	beq.w	800746a <_strtod_r+0x26a>
 8007368:	2300      	movs	r3, #0
 800736a:	f1b8 0f00 	cmp.w	r8, #0
 800736e:	d045      	beq.n	80073fc <_strtod_r+0x1fc>
 8007370:	ebcc 0c03 	rsb	ip, ip, r3
 8007374:	2c00      	cmp	r4, #0
 8007376:	bf08      	it	eq
 8007378:	4644      	moveq	r4, r8
 800737a:	4630      	mov	r0, r6
 800737c:	f8cd c018 	str.w	ip, [sp, #24]
 8007380:	9408      	str	r4, [sp, #32]
 8007382:	f7f8 ff83 	bl	800028c <__aeabi_ui2d>
 8007386:	f1b8 0f10 	cmp.w	r8, #16
 800738a:	bfb4      	ite	lt
 800738c:	46c1      	movlt	r9, r8
 800738e:	f04f 0910 	movge.w	r9, #16
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	f1b9 0f09 	cmp.w	r9, #9
 800739a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800739e:	dd13      	ble.n	80073c8 <_strtod_r+0x1c8>
 80073a0:	4ca7      	ldr	r4, [pc, #668]	; (8007640 <_strtod_r+0x440>)
 80073a2:	eb04 05c9 	add.w	r5, r4, r9, lsl #3
 80073a6:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 80073aa:	f7f8 ffe5 	bl	8000378 <__aeabi_dmul>
 80073ae:	4604      	mov	r4, r0
 80073b0:	4658      	mov	r0, fp
 80073b2:	460d      	mov	r5, r1
 80073b4:	f7f8 ff6a 	bl	800028c <__aeabi_ui2d>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4620      	mov	r0, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	f7f8 fe28 	bl	8000014 <__adddf3>
 80073c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073c8:	f1b8 0f0f 	cmp.w	r8, #15
 80073cc:	f300 813e 	bgt.w	800764c <_strtod_r+0x44c>
 80073d0:	9806      	ldr	r0, [sp, #24]
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f000 838f 	beq.w	8007af6 <_strtod_r+0x8f6>
 80073d8:	f340 85a6 	ble.w	8007f28 <_strtod_r+0xd28>
 80073dc:	9c06      	ldr	r4, [sp, #24]
 80073de:	2c16      	cmp	r4, #22
 80073e0:	f300 8556 	bgt.w	8007e90 <_strtod_r+0xc90>
 80073e4:	4996      	ldr	r1, [pc, #600]	; (8007640 <_strtod_r+0x440>)
 80073e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ea:	eb01 0ac4 	add.w	sl, r1, r4, lsl #3
 80073ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80073f2:	f7f8 ffc1 	bl	8000378 <__aeabi_dmul>
 80073f6:	4683      	mov	fp, r0
 80073f8:	4689      	mov	r9, r1
 80073fa:	e738      	b.n	800726e <_strtod_r+0x6e>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f040 80b5 	bne.w	800756c <_strtod_r+0x36c>
 8007402:	9808      	ldr	r0, [sp, #32]
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 80b1 	bne.w	800756c <_strtod_r+0x36c>
 800740a:	f1be 0f00 	cmp.w	lr, #0
 800740e:	f040 836c 	bne.w	8007aea <_strtod_r+0x8ea>
 8007412:	3d49      	subs	r5, #73	; 0x49
 8007414:	2d25      	cmp	r5, #37	; 0x25
 8007416:	f200 8368 	bhi.w	8007aea <_strtod_r+0x8ea>
 800741a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800741e:	007b      	.short	0x007b
 8007420:	03660366 	.word	0x03660366
 8007424:	03660366 	.word	0x03660366
 8007428:	036603c7 	.word	0x036603c7
 800742c:	03660366 	.word	0x03660366
 8007430:	03660366 	.word	0x03660366
 8007434:	03660366 	.word	0x03660366
 8007438:	03660366 	.word	0x03660366
 800743c:	03660366 	.word	0x03660366
 8007440:	03660366 	.word	0x03660366
 8007444:	03660366 	.word	0x03660366
 8007448:	03660366 	.word	0x03660366
 800744c:	03660366 	.word	0x03660366
 8007450:	03660366 	.word	0x03660366
 8007454:	03660366 	.word	0x03660366
 8007458:	03660366 	.word	0x03660366
 800745c:	007b0366 	.word	0x007b0366
 8007460:	03660366 	.word	0x03660366
 8007464:	03660366 	.word	0x03660366
 8007468:	03c7      	.short	0x03c7
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	d102      	bne.n	8007476 <_strtod_r+0x276>
 8007470:	2800      	cmp	r0, #0
 8007472:	f000 8336 	beq.w	8007ae2 <_strtod_r+0x8e2>
 8007476:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007478:	1c51      	adds	r1, r2, #1
 800747a:	9117      	str	r1, [sp, #92]	; 0x5c
 800747c:	7855      	ldrb	r5, [r2, #1]
 800747e:	9204      	str	r2, [sp, #16]
 8007480:	2d2b      	cmp	r5, #43	; 0x2b
 8007482:	f000 8324 	beq.w	8007ace <_strtod_r+0x8ce>
 8007486:	2d2d      	cmp	r5, #45	; 0x2d
 8007488:	f000 8319 	beq.w	8007abe <_strtod_r+0x8be>
 800748c:	2200      	movs	r2, #0
 800748e:	9209      	str	r2, [sp, #36]	; 0x24
 8007490:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8007494:	2909      	cmp	r1, #9
 8007496:	f200 82ff 	bhi.w	8007a98 <_strtod_r+0x898>
 800749a:	2d30      	cmp	r5, #48	; 0x30
 800749c:	d106      	bne.n	80074ac <_strtod_r+0x2ac>
 800749e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80074a0:	1c6b      	adds	r3, r5, #1
 80074a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80074a4:	f813 5b01 	ldrb.w	r5, [r3], #1
 80074a8:	2d30      	cmp	r5, #48	; 0x30
 80074aa:	d0fa      	beq.n	80074a2 <_strtod_r+0x2a2>
 80074ac:	f1a5 0131 	sub.w	r1, r5, #49	; 0x31
 80074b0:	2908      	cmp	r1, #8
 80074b2:	f63f af59 	bhi.w	8007368 <_strtod_r+0x168>
 80074b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80074b8:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 80074bc:	910a      	str	r1, [sp, #40]	; 0x28
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	3101      	adds	r1, #1
 80074c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80074c4:	785d      	ldrb	r5, [r3, #1]
 80074c6:	2d2f      	cmp	r5, #47	; 0x2f
 80074c8:	dd11      	ble.n	80074ee <_strtod_r+0x2ee>
 80074ca:	2d39      	cmp	r5, #57	; 0x39
 80074cc:	dc0f      	bgt.n	80074ee <_strtod_r+0x2ee>
 80074ce:	3302      	adds	r3, #2
 80074d0:	e001      	b.n	80074d6 <_strtod_r+0x2d6>
 80074d2:	2d39      	cmp	r5, #57	; 0x39
 80074d4:	dc0b      	bgt.n	80074ee <_strtod_r+0x2ee>
 80074d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80074d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80074dc:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80074e0:	781d      	ldrb	r5, [r3, #0]
 80074e2:	3a30      	subs	r2, #48	; 0x30
 80074e4:	2d2f      	cmp	r5, #47	; 0x2f
 80074e6:	4619      	mov	r1, r3
 80074e8:	f103 0301 	add.w	r3, r3, #1
 80074ec:	dcf1      	bgt.n	80074d2 <_strtod_r+0x2d2>
 80074ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f0:	1ac9      	subs	r1, r1, r3
 80074f2:	2908      	cmp	r1, #8
 80074f4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80074f8:	dc02      	bgt.n	8007500 <_strtod_r+0x300>
 80074fa:	429a      	cmp	r2, r3
 80074fc:	bfb8      	it	lt
 80074fe:	4613      	movlt	r3, r2
 8007500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007502:	2a00      	cmp	r2, #0
 8007504:	f43f af31 	beq.w	800736a <_strtod_r+0x16a>
 8007508:	425b      	negs	r3, r3
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	f47f af2f 	bne.w	8007370 <_strtod_r+0x170>
 8007512:	e773      	b.n	80073fc <_strtod_r+0x1fc>
 8007514:	494b      	ldr	r1, [pc, #300]	; (8007644 <_strtod_r+0x444>)
 8007516:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007518:	e009      	b.n	800752e <_strtod_r+0x32e>
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	3201      	adds	r2, #1
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	dd02      	ble.n	8007528 <_strtod_r+0x328>
 8007522:	2b5a      	cmp	r3, #90	; 0x5a
 8007524:	bfd8      	it	le
 8007526:	3320      	addle	r3, #32
 8007528:	42a3      	cmp	r3, r4
 800752a:	f040 82de 	bne.w	8007aea <_strtod_r+0x8ea>
 800752e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007532:	4613      	mov	r3, r2
 8007534:	2c00      	cmp	r4, #0
 8007536:	d1f0      	bne.n	800751a <_strtod_r+0x31a>
 8007538:	4c43      	ldr	r4, [pc, #268]	; (8007648 <_strtod_r+0x448>)
 800753a:	9217      	str	r2, [sp, #92]	; 0x5c
 800753c:	4611      	mov	r1, r2
 800753e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8007542:	460d      	mov	r5, r1
 8007544:	2800      	cmp	r0, #0
 8007546:	f000 8585 	beq.w	8008054 <_strtod_r+0xe54>
 800754a:	786b      	ldrb	r3, [r5, #1]
 800754c:	3101      	adds	r1, #1
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	dd02      	ble.n	8007558 <_strtod_r+0x358>
 8007552:	2b5a      	cmp	r3, #90	; 0x5a
 8007554:	bfd8      	it	le
 8007556:	3320      	addle	r3, #32
 8007558:	4283      	cmp	r3, r0
 800755a:	d0f0      	beq.n	800753e <_strtod_r+0x33e>
 800755c:	1c50      	adds	r0, r2, #1
 800755e:	9017      	str	r0, [sp, #92]	; 0x5c
 8007560:	2500      	movs	r5, #0
 8007562:	462a      	mov	r2, r5
 8007564:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8007568:	9207      	str	r2, [sp, #28]
 800756a:	9506      	str	r5, [sp, #24]
 800756c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007570:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007574:	e67b      	b.n	800726e <_strtod_r+0x6e>
 8007576:	4650      	mov	r0, sl
 8007578:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800757a:	f7ff fa09 	bl	8006990 <_localeconv_r>
 800757e:	6800      	ldr	r0, [r0, #0]
 8007580:	f7fe f812 	bl	80055a8 <strlen>
 8007584:	182a      	adds	r2, r5, r0
 8007586:	9217      	str	r2, [sp, #92]	; 0x5c
 8007588:	5c2d      	ldrb	r5, [r5, r0]
 800758a:	2c00      	cmp	r4, #0
 800758c:	f040 828c 	bne.w	8007aa8 <_strtod_r+0x8a8>
 8007590:	2d30      	cmp	r5, #48	; 0x30
 8007592:	4620      	mov	r0, r4
 8007594:	d105      	bne.n	80075a2 <_strtod_r+0x3a2>
 8007596:	3201      	adds	r2, #1
 8007598:	9217      	str	r2, [sp, #92]	; 0x5c
 800759a:	7815      	ldrb	r5, [r2, #0]
 800759c:	3001      	adds	r0, #1
 800759e:	2d30      	cmp	r5, #48	; 0x30
 80075a0:	d0f9      	beq.n	8007596 <_strtod_r+0x396>
 80075a2:	f1a5 0131 	sub.w	r1, r5, #49	; 0x31
 80075a6:	2908      	cmp	r1, #8
 80075a8:	f200 82f9 	bhi.w	8007b9e <_strtod_r+0x99e>
 80075ac:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80075ae:	4684      	mov	ip, r0
 80075b0:	46be      	mov	lr, r7
 80075b2:	f04f 0800 	mov.w	r8, #0
 80075b6:	2001      	movs	r0, #1
 80075b8:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 80075bc:	2900      	cmp	r1, #0
 80075be:	f000 83d4 	beq.w	8007d6a <_strtod_r+0xb6a>
 80075c2:	2801      	cmp	r0, #1
 80075c4:	4484      	add	ip, r0
 80075c6:	f000 8543 	beq.w	8008050 <_strtod_r+0xe50>
 80075ca:	eb08 0300 	add.w	r3, r8, r0
 80075ce:	1e5d      	subs	r5, r3, #1
 80075d0:	ea6f 0208 	mvn.w	r2, r8
 80075d4:	1953      	adds	r3, r2, r5
 80075d6:	f1b8 0f10 	cmp.w	r8, #16
 80075da:	f003 0201 	and.w	r2, r3, #1
 80075de:	f108 0301 	add.w	r3, r8, #1
 80075e2:	dc08      	bgt.n	80075f6 <_strtod_r+0x3f6>
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	bfcb      	itete	gt
 80075e8:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 80075ec:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 80075f0:	ea4f 0b4b 	movgt.w	fp, fp, lsl #1
 80075f4:	0076      	lslle	r6, r6, #1
 80075f6:	42ab      	cmp	r3, r5
 80075f8:	f000 83a4 	beq.w	8007d44 <_strtod_r+0xb44>
 80075fc:	b1b2      	cbz	r2, 800762c <_strtod_r+0x42c>
 80075fe:	3301      	adds	r3, #1
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	2a10      	cmp	r2, #16
 8007604:	dc0f      	bgt.n	8007626 <_strtod_r+0x426>
 8007606:	e005      	b.n	8007614 <_strtod_r+0x414>
 8007608:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800760c:	0076      	lsls	r6, r6, #1
 800760e:	1c53      	adds	r3, r2, #1
 8007610:	2a10      	cmp	r2, #16
 8007612:	dc08      	bgt.n	8007626 <_strtod_r+0x426>
 8007614:	2b09      	cmp	r3, #9
 8007616:	bfcb      	itete	gt
 8007618:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 800761c:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 8007620:	ea4f 0b4b 	movgt.w	fp, fp, lsl #1
 8007624:	0076      	lslle	r6, r6, #1
 8007626:	42ab      	cmp	r3, r5
 8007628:	f000 838c 	beq.w	8007d44 <_strtod_r+0xb44>
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	2b10      	cmp	r3, #16
 8007630:	dced      	bgt.n	800760e <_strtod_r+0x40e>
 8007632:	2a09      	cmp	r2, #9
 8007634:	dde8      	ble.n	8007608 <_strtod_r+0x408>
 8007636:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800763a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800763e:	e7e6      	b.n	800760e <_strtod_r+0x40e>
 8007640:	0800e030 	.word	0x0800e030
 8007644:	0800df57 	.word	0x0800df57
 8007648:	0800df5b 	.word	0x0800df5b
 800764c:	9806      	ldr	r0, [sp, #24]
 800764e:	ebc9 0b08 	rsb	fp, r9, r8
 8007652:	eb00 040b 	add.w	r4, r0, fp
 8007656:	2c00      	cmp	r4, #0
 8007658:	f340 83ae 	ble.w	8007db8 <_strtod_r+0xbb8>
 800765c:	f014 010f 	ands.w	r1, r4, #15
 8007660:	d009      	beq.n	8007676 <_strtod_r+0x476>
 8007662:	4da3      	ldr	r5, [pc, #652]	; (80078f0 <_strtod_r+0x6f0>)
 8007664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007668:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
 800766c:	c803      	ldmia	r0, {r0, r1}
 800766e:	f7f8 fe83 	bl	8000378 <__aeabi_dmul>
 8007672:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007676:	f034 040f 	bics.w	r4, r4, #15
 800767a:	f040 8242 	bne.w	8007b02 <_strtod_r+0x902>
 800767e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007682:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007686:	9409      	str	r4, [sp, #36]	; 0x24
 8007688:	4639      	mov	r1, r7
 800768a:	9600      	str	r6, [sp, #0]
 800768c:	4650      	mov	r0, sl
 800768e:	9a08      	ldr	r2, [sp, #32]
 8007690:	4643      	mov	r3, r8
 8007692:	f005 f8f3 	bl	800c87c <__s2b>
 8007696:	9f06      	ldr	r7, [sp, #24]
 8007698:	900e      	str	r0, [sp, #56]	; 0x38
 800769a:	2f00      	cmp	r7, #0
 800769c:	f2c0 8438 	blt.w	8007f10 <_strtod_r+0xd10>
 80076a0:	2600      	movs	r6, #0
 80076a2:	960a      	str	r6, [sp, #40]	; 0x28
 80076a4:	9c06      	ldr	r4, [sp, #24]
 80076a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80076a8:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 80076ac:	350c      	adds	r5, #12
 80076ae:	9511      	str	r5, [sp, #68]	; 0x44
 80076b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80076b2:	f8cd b018 	str.w	fp, [sp, #24]
 80076b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80076ba:	e06b      	b.n	8007794 <_strtod_r+0x594>
 80076bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 8118 	beq.w	80078f4 <_strtod_r+0x6f4>
 80076c4:	2700      	movs	r7, #0
 80076c6:	2500      	movs	r5, #0
 80076c8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80076cc:	2400      	movs	r4, #0
 80076ce:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
 80076d2:	960d      	str	r6, [sp, #52]	; 0x34
 80076d4:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 80076d8:	2600      	movs	r6, #0
 80076da:	2300      	movs	r3, #0
 80076dc:	f6c7 76f0 	movt	r6, #32752	; 0x7ff0
 80076e0:	ea0c 0606 	and.w	r6, ip, r6
 80076e4:	f6c7 73e0 	movt	r3, #32736	; 0x7fe0
 80076e8:	429e      	cmp	r6, r3
 80076ea:	f000 8139 	beq.w	8007960 <_strtod_r+0x760>
 80076ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f0:	b300      	cbz	r0, 8007734 <_strtod_r+0x534>
 80076f2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 80076f6:	d81d      	bhi.n	8007734 <_strtod_r+0x534>
 80076f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80076fa:	4639      	mov	r1, r7
 80076fc:	a37a      	add	r3, pc, #488	; (adr r3, 80078e8 <_strtod_r+0x6e8>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f9 f8b5 	bl	8000870 <__aeabi_dcmple>
 8007706:	b190      	cbz	r0, 800772e <_strtod_r+0x52e>
 8007708:	980d      	ldr	r0, [sp, #52]	; 0x34
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 f8f6 	bl	80008fc <__aeabi_d2uiz>
 8007710:	2800      	cmp	r0, #0
 8007712:	f000 81bc 	beq.w	8007a8e <_strtod_r+0x88e>
 8007716:	f7f8 fdb9 	bl	800028c <__aeabi_ui2d>
 800771a:	900d      	str	r0, [sp, #52]	; 0x34
 800771c:	460f      	mov	r7, r1
 800771e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007720:	2900      	cmp	r1, #0
 8007722:	f040 81b2 	bne.w	8007a8a <_strtod_r+0x88a>
 8007726:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
 800772a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800772c:	4615      	mov	r5, r2
 800772e:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
 8007732:	1b9d      	subs	r5, r3, r6
 8007734:	9806      	ldr	r0, [sp, #24]
 8007736:	9908      	ldr	r1, [sp, #32]
 8007738:	f005 fd38 	bl	800d1ac <__ulp>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 fe18 	bl	8000378 <__aeabi_dmul>
 8007748:	9c06      	ldr	r4, [sp, #24]
 800774a:	9d08      	ldr	r5, [sp, #32]
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4620      	mov	r0, r4
 8007752:	4629      	mov	r1, r5
 8007754:	f7f8 fc5e 	bl	8000014 <__adddf3>
 8007758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800775c:	9c05      	ldr	r4, [sp, #20]
 800775e:	9006      	str	r0, [sp, #24]
 8007760:	9108      	str	r1, [sp, #32]
 8007762:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007764:	b931      	cbnz	r1, 8007774 <_strtod_r+0x574>
 8007766:	2500      	movs	r5, #0
 8007768:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800776c:	4025      	ands	r5, r4
 800776e:	42ae      	cmp	r6, r5
 8007770:	f000 8133 	beq.w	80079da <_strtod_r+0x7da>
 8007774:	4650      	mov	r0, sl
 8007776:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007778:	f004 fff8 	bl	800c76c <_Bfree>
 800777c:	4650      	mov	r0, sl
 800777e:	4659      	mov	r1, fp
 8007780:	f004 fff4 	bl	800c76c <_Bfree>
 8007784:	4650      	mov	r0, sl
 8007786:	4641      	mov	r1, r8
 8007788:	f004 fff0 	bl	800c76c <_Bfree>
 800778c:	4650      	mov	r0, sl
 800778e:	4649      	mov	r1, r9
 8007790:	f004 ffec 	bl	800c76c <_Bfree>
 8007794:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007796:	4650      	mov	r0, sl
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	f004 ffc1 	bl	800c720 <_Balloc>
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077a2:	1c9e      	adds	r6, r3, #2
 80077a4:	00b2      	lsls	r2, r6, #2
 80077a6:	4683      	mov	fp, r0
 80077a8:	f100 000c 	add.w	r0, r0, #12
 80077ac:	f004 ff0a 	bl	800c5c4 <memcpy>
 80077b0:	a916      	add	r1, sp, #88	; 0x58
 80077b2:	a819      	add	r0, sp, #100	; 0x64
 80077b4:	9a06      	ldr	r2, [sp, #24]
 80077b6:	9b08      	ldr	r3, [sp, #32]
 80077b8:	9100      	str	r1, [sp, #0]
 80077ba:	9001      	str	r0, [sp, #4]
 80077bc:	4650      	mov	r0, sl
 80077be:	f005 fd75 	bl	800d2ac <__d2b>
 80077c2:	2101      	movs	r1, #1
 80077c4:	9018      	str	r0, [sp, #96]	; 0x60
 80077c6:	4650      	mov	r0, sl
 80077c8:	f005 f944 	bl	800ca54 <__i2b>
 80077cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077ce:	4680      	mov	r8, r0
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	f2c0 8084 	blt.w	80078de <_strtod_r+0x6de>
 80077d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80077da:	18a4      	adds	r4, r4, r2
 80077dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077e0:	1b90      	subs	r0, r2, r6
 80077e2:	18c2      	adds	r2, r0, r3
 80077e4:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 80077e8:	428a      	cmp	r2, r1
 80077ea:	bfb4      	ite	lt
 80077ec:	f200 4333 	addwlt	r3, r0, #1075	; 0x433
 80077f0:	f1c3 0336 	rsbge	r3, r3, #54	; 0x36
 80077f4:	18fd      	adds	r5, r7, r3
 80077f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077f8:	18e6      	adds	r6, r4, r3
 80077fa:	42a6      	cmp	r6, r4
 80077fc:	bfb4      	ite	lt
 80077fe:	4633      	movlt	r3, r6
 8007800:	4623      	movge	r3, r4
 8007802:	19ed      	adds	r5, r5, r7
 8007804:	42ab      	cmp	r3, r5
 8007806:	bfa8      	it	ge
 8007808:	462b      	movge	r3, r5
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd02      	ble.n	8007814 <_strtod_r+0x614>
 800780e:	1af6      	subs	r6, r6, r3
 8007810:	1aed      	subs	r5, r5, r3
 8007812:	1ae4      	subs	r4, r4, r3
 8007814:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007816:	b180      	cbz	r0, 800783a <_strtod_r+0x63a>
 8007818:	4602      	mov	r2, r0
 800781a:	4641      	mov	r1, r8
 800781c:	4650      	mov	r0, sl
 800781e:	f005 fa8b 	bl	800cd38 <__pow5mult>
 8007822:	4680      	mov	r8, r0
 8007824:	4641      	mov	r1, r8
 8007826:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007828:	4650      	mov	r0, sl
 800782a:	f005 f91d 	bl	800ca68 <__multiply>
 800782e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007830:	4607      	mov	r7, r0
 8007832:	4650      	mov	r0, sl
 8007834:	f004 ff9a 	bl	800c76c <_Bfree>
 8007838:	9718      	str	r7, [sp, #96]	; 0x60
 800783a:	2e00      	cmp	r6, #0
 800783c:	dd05      	ble.n	800784a <_strtod_r+0x64a>
 800783e:	4650      	mov	r0, sl
 8007840:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007842:	4632      	mov	r2, r6
 8007844:	f005 fac2 	bl	800cdcc <__lshift>
 8007848:	9018      	str	r0, [sp, #96]	; 0x60
 800784a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800784c:	b122      	cbz	r2, 8007858 <_strtod_r+0x658>
 800784e:	4659      	mov	r1, fp
 8007850:	4650      	mov	r0, sl
 8007852:	f005 fa71 	bl	800cd38 <__pow5mult>
 8007856:	4683      	mov	fp, r0
 8007858:	2d00      	cmp	r5, #0
 800785a:	dd05      	ble.n	8007868 <_strtod_r+0x668>
 800785c:	4659      	mov	r1, fp
 800785e:	4650      	mov	r0, sl
 8007860:	462a      	mov	r2, r5
 8007862:	f005 fab3 	bl	800cdcc <__lshift>
 8007866:	4683      	mov	fp, r0
 8007868:	2c00      	cmp	r4, #0
 800786a:	dd05      	ble.n	8007878 <_strtod_r+0x678>
 800786c:	4641      	mov	r1, r8
 800786e:	4650      	mov	r0, sl
 8007870:	4622      	mov	r2, r4
 8007872:	f005 faab 	bl	800cdcc <__lshift>
 8007876:	4680      	mov	r8, r0
 8007878:	9918      	ldr	r1, [sp, #96]	; 0x60
 800787a:	465a      	mov	r2, fp
 800787c:	4650      	mov	r0, sl
 800787e:	f005 fb89 	bl	800cf94 <__mdiff>
 8007882:	2600      	movs	r6, #0
 8007884:	68c5      	ldr	r5, [r0, #12]
 8007886:	4641      	mov	r1, r8
 8007888:	60c6      	str	r6, [r0, #12]
 800788a:	4681      	mov	r9, r0
 800788c:	950c      	str	r5, [sp, #48]	; 0x30
 800788e:	f005 fb53 	bl	800cf38 <__mcmp>
 8007892:	42b0      	cmp	r0, r6
 8007894:	f2c0 81da 	blt.w	8007c4c <_strtod_r+0xa4c>
 8007898:	f000 822a 	beq.w	8007cf0 <_strtod_r+0xaf0>
 800789c:	4648      	mov	r0, r9
 800789e:	4641      	mov	r1, r8
 80078a0:	f005 fd64 	bl	800d36c <__ratio>
 80078a4:	2200      	movs	r2, #0
 80078a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078aa:	4604      	mov	r4, r0
 80078ac:	460f      	mov	r7, r1
 80078ae:	f7f8 ffdf 	bl	8000870 <__aeabi_dcmple>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	f47f af02 	bne.w	80076bc <_strtod_r+0x4bc>
 80078b8:	2300      	movs	r3, #0
 80078ba:	4639      	mov	r1, r7
 80078bc:	2200      	movs	r2, #0
 80078be:	4620      	mov	r0, r4
 80078c0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80078c4:	f7f8 fd58 	bl	8000378 <__aeabi_dmul>
 80078c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ca:	900d      	str	r0, [sp, #52]	; 0x34
 80078cc:	460f      	mov	r7, r1
 80078ce:	b90a      	cbnz	r2, 80078d4 <_strtod_r+0x6d4>
 80078d0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80078d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80078d6:	460d      	mov	r5, r1
 80078d8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80078dc:	e6fc      	b.n	80076d8 <_strtod_r+0x4d8>
 80078de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80078e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078e2:	1aaf      	subs	r7, r5, r2
 80078e4:	e77a      	b.n	80077dc <_strtod_r+0x5dc>
 80078e6:	bf00      	nop
 80078e8:	ffc00000 	.word	0xffc00000
 80078ec:	41dfffff 	.word	0x41dfffff
 80078f0:	0800e030 	.word	0x0800e030
 80078f4:	9e04      	ldr	r6, [sp, #16]
 80078f6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80078fa:	bb16      	cbnz	r6, 8007942 <_strtod_r+0x742>
 80078fc:	f3cc 0513 	ubfx	r5, ip, #0, #20
 8007900:	bb2d      	cbnz	r5, 800794e <_strtod_r+0x74e>
 8007902:	2300      	movs	r3, #0
 8007904:	4620      	mov	r0, r4
 8007906:	4639      	mov	r1, r7
 8007908:	2200      	movs	r2, #0
 800790a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800790e:	f8cd c00c 	str.w	ip, [sp, #12]
 8007912:	f7f8 ffa3 	bl	800085c <__aeabi_dcmplt>
 8007916:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800791a:	2800      	cmp	r0, #0
 800791c:	f040 826d 	bne.w	8007dfa <_strtod_r+0xbfa>
 8007920:	2300      	movs	r3, #0
 8007922:	4620      	mov	r0, r4
 8007924:	4639      	mov	r1, r7
 8007926:	2200      	movs	r2, #0
 8007928:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800792c:	f7f8 fd24 	bl	8000378 <__aeabi_dmul>
 8007930:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007934:	460f      	mov	r7, r1
 8007936:	900d      	str	r0, [sp, #52]	; 0x34
 8007938:	4604      	mov	r4, r0
 800793a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800793e:	460d      	mov	r5, r1
 8007940:	e6ca      	b.n	80076d8 <_strtod_r+0x4d8>
 8007942:	2e01      	cmp	r6, #1
 8007944:	d103      	bne.n	800794e <_strtod_r+0x74e>
 8007946:	4667      	mov	r7, ip
 8007948:	2f00      	cmp	r7, #0
 800794a:	f000 814d 	beq.w	8007be8 <_strtod_r+0x9e8>
 800794e:	2700      	movs	r7, #0
 8007950:	2500      	movs	r5, #0
 8007952:	970d      	str	r7, [sp, #52]	; 0x34
 8007954:	2400      	movs	r4, #0
 8007956:	f6cb 75f0 	movt	r5, #49136	; 0xbff0
 800795a:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 800795e:	e6bb      	b.n	80076d8 <_strtod_r+0x4d8>
 8007960:	f1ac 7e54 	sub.w	lr, ip, #55574528	; 0x3500000
 8007964:	9a06      	ldr	r2, [sp, #24]
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	f8cd e014 	str.w	lr, [sp, #20]
 800796c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007974:	461d      	mov	r5, r3
 8007976:	4614      	mov	r4, r2
 8007978:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800797c:	f005 fc16 	bl	800d1ac <__ulp>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007988:	f7f8 fcf6 	bl	8000378 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007994:	f7f8 fb3e 	bl	8000014 <__adddf3>
 8007998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800799c:	9d05      	ldr	r5, [sp, #20]
 800799e:	2100      	movs	r1, #0
 80079a0:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 80079a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80079a8:	4029      	ands	r1, r5
 80079aa:	f6c7 409f 	movt	r0, #31903	; 0x7c9f
 80079ae:	4281      	cmp	r1, r0
 80079b0:	d964      	bls.n	8007a7c <_strtod_r+0x87c>
 80079b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80079b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079b8:	f6c7 70ef 	movt	r0, #32751	; 0x7fef
 80079bc:	4281      	cmp	r1, r0
 80079be:	f000 81da 	beq.w	8007d76 <_strtod_r+0xb76>
 80079c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80079c6:	4637      	mov	r7, r6
 80079c8:	f6c7 77ef 	movt	r7, #32751	; 0x7fef
 80079cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079d0:	9705      	str	r7, [sp, #20]
 80079d2:	9204      	str	r2, [sp, #16]
 80079d4:	9206      	str	r2, [sp, #24]
 80079d6:	9708      	str	r7, [sp, #32]
 80079d8:	e6cc      	b.n	8007774 <_strtod_r+0x574>
 80079da:	4639      	mov	r1, r7
 80079dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80079de:	f7f8 ff65 	bl	80008ac <__aeabi_d2iz>
 80079e2:	f7f8 fc63 	bl	80002ac <__aeabi_i2d>
 80079e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80079e8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80079ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 fb0c 	bl	8000010 <__aeabi_dsub>
 80079f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	bb4a      	cbnz	r2, 8007a54 <_strtod_r+0x854>
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	bb3b      	cbnz	r3, 8007a54 <_strtod_r+0x854>
 8007a04:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007a08:	bb24      	cbnz	r4, 8007a54 <_strtod_r+0x854>
 8007a0a:	a387      	add	r3, pc, #540	; (adr r3, 8007c28 <_strtod_r+0xa28>)
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f7f8 ff24 	bl	800085c <__aeabi_dcmplt>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f43f aead 	beq.w	8007774 <_strtod_r+0x574>
 8007a1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007a1e:	464e      	mov	r6, r9
 8007a20:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a28:	4647      	mov	r7, r8
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a2e:	f004 fe9d 	bl	800c76c <_Bfree>
 8007a32:	4650      	mov	r0, sl
 8007a34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a36:	f004 fe99 	bl	800c76c <_Bfree>
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	f004 fe95 	bl	800c76c <_Bfree>
 8007a42:	4650      	mov	r0, sl
 8007a44:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a46:	f004 fe91 	bl	800c76c <_Bfree>
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	f004 fe8d 	bl	800c76c <_Bfree>
 8007a52:	e40c      	b.n	800726e <_strtod_r+0x6e>
 8007a54:	4630      	mov	r0, r6
 8007a56:	4639      	mov	r1, r7
 8007a58:	a375      	add	r3, pc, #468	; (adr r3, 8007c30 <_strtod_r+0xa30>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fefd 	bl	800085c <__aeabi_dcmplt>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d1d9      	bne.n	8007a1a <_strtod_r+0x81a>
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	a373      	add	r3, pc, #460	; (adr r3, 8007c38 <_strtod_r+0xa38>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 ff12 	bl	8000898 <__aeabi_dcmpgt>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f43f ae7d 	beq.w	8007774 <_strtod_r+0x574>
 8007a7a:	e7ce      	b.n	8007a1a <_strtod_r+0x81a>
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	f105 7454 	add.w	r4, r5, #55574528	; 0x3500000
 8007a82:	9405      	str	r4, [sp, #20]
 8007a84:	9306      	str	r3, [sp, #24]
 8007a86:	9408      	str	r4, [sp, #32]
 8007a88:	e66b      	b.n	8007762 <_strtod_r+0x562>
 8007a8a:	463a      	mov	r2, r7
 8007a8c:	e64d      	b.n	800772a <_strtod_r+0x52a>
 8007a8e:	2700      	movs	r7, #0
 8007a90:	900d      	str	r0, [sp, #52]	; 0x34
 8007a92:	f6c3 77f0 	movt	r7, #16368	; 0x3ff0
 8007a96:	e642      	b.n	800771e <_strtod_r+0x51e>
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a9e:	f1b8 0f00 	cmp.w	r8, #0
 8007aa2:	f47f ac65 	bne.w	8007370 <_strtod_r+0x170>
 8007aa6:	e4a9      	b.n	80073fc <_strtod_r+0x1fc>
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4684      	mov	ip, r0
 8007aac:	46a0      	mov	r8, r4
 8007aae:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8007ab2:	2909      	cmp	r1, #9
 8007ab4:	d812      	bhi.n	8007adc <_strtod_r+0x8dc>
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8007abc:	e57e      	b.n	80075bc <_strtod_r+0x3bc>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac2:	9d04      	ldr	r5, [sp, #16]
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	1caa      	adds	r2, r5, #2
 8007ac8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007aca:	789d      	ldrb	r5, [r3, #2]
 8007acc:	e4e0      	b.n	8007490 <_strtod_r+0x290>
 8007ace:	2100      	movs	r1, #0
 8007ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8007ad2:	e7f6      	b.n	8007ac2 <_strtod_r+0x8c2>
 8007ad4:	469b      	mov	fp, r3
 8007ad6:	4699      	mov	r9, r3
 8007ad8:	f7ff bbc9 	b.w	800726e <_strtod_r+0x6e>
 8007adc:	f04f 0e01 	mov.w	lr, #1
 8007ae0:	e43c      	b.n	800735c <_strtod_r+0x15c>
 8007ae2:	9d08      	ldr	r5, [sp, #32]
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	f47f acc6 	bne.w	8007476 <_strtod_r+0x276>
 8007aea:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007aee:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007af2:	f7ff bbb8 	b.w	8007266 <_strtod_r+0x66>
 8007af6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007afa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007afe:	f7ff bbb6 	b.w	800726e <_strtod_r+0x6e>
 8007b02:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8007b06:	f300 814a 	bgt.w	8007d9e <_strtod_r+0xb9e>
 8007b0a:	1124      	asrs	r4, r4, #4
 8007b0c:	2c01      	cmp	r4, #1
 8007b0e:	f8df b138 	ldr.w	fp, [pc, #312]	; 8007c48 <_strtod_r+0xa48>
 8007b12:	f340 829b 	ble.w	800804c <_strtod_r+0xe4c>
 8007b16:	46d9      	mov	r9, fp
 8007b18:	2500      	movs	r5, #0
 8007b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b1e:	f014 0f01 	tst.w	r4, #1
 8007b22:	f105 0501 	add.w	r5, r5, #1
 8007b26:	ea4f 0464 	mov.w	r4, r4, asr #1
 8007b2a:	d003      	beq.n	8007b34 <_strtod_r+0x934>
 8007b2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b30:	f7f8 fc22 	bl	8000378 <__aeabi_dmul>
 8007b34:	2c01      	cmp	r4, #1
 8007b36:	f109 0908 	add.w	r9, r9, #8
 8007b3a:	dcf0      	bgt.n	8007b1e <_strtod_r+0x91e>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b44:	9a05      	ldr	r2, [sp, #20]
 8007b46:	eb0b 01c5 	add.w	r1, fp, r5, lsl #3
 8007b4a:	f1a2 7354 	sub.w	r3, r2, #55574528	; 0x3500000
 8007b4e:	9305      	str	r3, [sp, #20]
 8007b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b58:	f7f8 fc0e 	bl	8000378 <__aeabi_dmul>
 8007b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b60:	9d05      	ldr	r5, [sp, #20]
 8007b62:	2000      	movs	r0, #0
 8007b64:	2400      	movs	r4, #0
 8007b66:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 8007b6a:	4028      	ands	r0, r5
 8007b6c:	f6c7 44a0 	movt	r4, #31904	; 0x7ca0
 8007b70:	42a0      	cmp	r0, r4
 8007b72:	f200 8114 	bhi.w	8007d9e <_strtod_r+0xb9e>
 8007b76:	2200      	movs	r2, #0
 8007b78:	f6c7 4290 	movt	r2, #31888	; 0x7c90
 8007b7c:	4290      	cmp	r0, r2
 8007b7e:	f240 81e9 	bls.w	8007f54 <_strtod_r+0xd54>
 8007b82:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007b86:	462c      	mov	r4, r5
 8007b88:	f6c7 74ef 	movt	r4, #32751	; 0x7fef
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b90:	2300      	movs	r3, #0
 8007b92:	9405      	str	r4, [sp, #20]
 8007b94:	9204      	str	r2, [sp, #16]
 8007b96:	4693      	mov	fp, r2
 8007b98:	46a1      	mov	r9, r4
 8007b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9c:	e574      	b.n	8007688 <_strtod_r+0x488>
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	46c4      	mov	ip, r8
 8007ba4:	f04f 0e01 	mov.w	lr, #1
 8007ba8:	f7ff bbd8 	b.w	800735c <_strtod_r+0x15c>
 8007bac:	4824      	ldr	r0, [pc, #144]	; (8007c40 <_strtod_r+0xa40>)
 8007bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bb0:	e008      	b.n	8007bc4 <_strtod_r+0x9c4>
 8007bb2:	786d      	ldrb	r5, [r5, #1]
 8007bb4:	3201      	adds	r2, #1
 8007bb6:	2d40      	cmp	r5, #64	; 0x40
 8007bb8:	dd02      	ble.n	8007bc0 <_strtod_r+0x9c0>
 8007bba:	2d5a      	cmp	r5, #90	; 0x5a
 8007bbc:	bfd8      	it	le
 8007bbe:	3520      	addle	r5, #32
 8007bc0:	42a5      	cmp	r5, r4
 8007bc2:	d192      	bne.n	8007aea <_strtod_r+0x8ea>
 8007bc4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007bc8:	4615      	mov	r5, r2
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	d1f1      	bne.n	8007bb2 <_strtod_r+0x9b2>
 8007bce:	1c53      	adds	r3, r2, #1
 8007bd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bd2:	7852      	ldrb	r2, [r2, #1]
 8007bd4:	2a28      	cmp	r2, #40	; 0x28
 8007bd6:	f000 8245 	beq.w	8008064 <_strtod_r+0xe64>
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	f6cf 70f8 	movt	r0, #65528	; 0xfff8
 8007be2:	9007      	str	r0, [sp, #28]
 8007be4:	9106      	str	r1, [sp, #24]
 8007be6:	e4c1      	b.n	800756c <_strtod_r+0x36c>
 8007be8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007bec:	4647      	mov	r7, r8
 8007bee:	464e      	mov	r6, r9
 8007bf0:	f04f 0b00 	mov.w	fp, #0
 8007bf4:	2422      	movs	r4, #34	; 0x22
 8007bf6:	f8ca 4000 	str.w	r4, [sl]
 8007bfa:	46d9      	mov	r9, fp
 8007bfc:	e715      	b.n	8007a2a <_strtod_r+0x82a>
 8007bfe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007c00:	4d10      	ldr	r5, [pc, #64]	; (8007c44 <_strtod_r+0xa44>)
 8007c02:	ac18      	add	r4, sp, #96	; 0x60
 8007c04:	9400      	str	r4, [sp, #0]
 8007c06:	9101      	str	r1, [sp, #4]
 8007c08:	4650      	mov	r0, sl
 8007c0a:	a917      	add	r1, sp, #92	; 0x5c
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	ab19      	add	r3, sp, #100	; 0x64
 8007c10:	f003 fffc 	bl	800bc0c <__gethex>
 8007c14:	f010 0607 	ands.w	r6, r0, #7
 8007c18:	4604      	mov	r4, r0
 8007c1a:	f040 80f7 	bne.w	8007e0c <_strtod_r+0xc0c>
 8007c1e:	46b3      	mov	fp, r6
 8007c20:	46b1      	mov	r9, r6
 8007c22:	f7ff bb24 	b.w	800726e <_strtod_r+0x6e>
 8007c26:	bf00      	nop
 8007c28:	94a03595 	.word	0x94a03595
 8007c2c:	3fcfffff 	.word	0x3fcfffff
 8007c30:	94a03595 	.word	0x94a03595
 8007c34:	3fdfffff 	.word	0x3fdfffff
 8007c38:	35afe535 	.word	0x35afe535
 8007c3c:	3fe00000 	.word	0x3fe00000
 8007c40:	0800df63 	.word	0x0800df63
 8007c44:	20000984 	.word	0x20000984
 8007c48:	0800e0f8 	.word	0x0800e0f8
 8007c4c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007c50:	4647      	mov	r7, r8
 8007c52:	464e      	mov	r6, r9
 8007c54:	bb85      	cbnz	r5, 8007cb8 <_strtod_r+0xab8>
 8007c56:	9d04      	ldr	r5, [sp, #16]
 8007c58:	bb75      	cbnz	r5, 8007cb8 <_strtod_r+0xab8>
 8007c5a:	9a05      	ldr	r2, [sp, #20]
 8007c5c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8007c60:	bb53      	cbnz	r3, 8007cb8 <_strtod_r+0xab8>
 8007c62:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8007c66:	4013      	ands	r3, r2
 8007c68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c6c:	d924      	bls.n	8007cb8 <_strtod_r+0xab8>
 8007c6e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8007c72:	b919      	cbnz	r1, 8007c7c <_strtod_r+0xa7c>
 8007c74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007c78:	2801      	cmp	r0, #1
 8007c7a:	dd1d      	ble.n	8007cb8 <_strtod_r+0xab8>
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4650      	mov	r0, sl
 8007c82:	f005 f8a3 	bl	800cdcc <__lshift>
 8007c86:	4639      	mov	r1, r7
 8007c88:	4606      	mov	r6, r0
 8007c8a:	f005 f955 	bl	800cf38 <__mcmp>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	dd12      	ble.n	8007cb8 <_strtod_r+0xab8>
 8007c92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	f040 81cb 	bne.w	8008030 <_strtod_r+0xe30>
 8007c9a:	9d05      	ldr	r5, [sp, #20]
 8007c9c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007ca0:	0d13      	lsrs	r3, r2, #20
 8007ca2:	051d      	lsls	r5, r3, #20
 8007ca4:	f5a5 1280 	sub.w	r2, r5, #1048576	; 0x100000
 8007ca8:	ea6f 5312 	mvn.w	r3, r2, lsr #20
 8007cac:	ea6f 5103 	mvn.w	r1, r3, lsl #20
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cb4:	9105      	str	r1, [sp, #20]
 8007cb6:	9004      	str	r0, [sp, #16]
 8007cb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	f000 8098 	beq.w	8007df0 <_strtod_r+0xbf0>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	f6c3 1350 	movt	r3, #14672	; 0x3950
 8007cc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cca:	9212      	str	r2, [sp, #72]	; 0x48
 8007ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007cd4:	f7f8 fb50 	bl	8000378 <__aeabi_dmul>
 8007cd8:	4683      	mov	fp, r0
 8007cda:	4689      	mov	r9, r1
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	f47f aea4 	bne.w	8007a2a <_strtod_r+0x82a>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	f47f aea1 	bne.w	8007a2a <_strtod_r+0x82a>
 8007ce8:	2522      	movs	r5, #34	; 0x22
 8007cea:	f8ca 5000 	str.w	r5, [sl]
 8007cee:	e69c      	b.n	8007a2a <_strtod_r+0x82a>
 8007cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cf2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007cf6:	464e      	mov	r6, r9
 8007cf8:	4647      	mov	r7, r8
 8007cfa:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007cfe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 80e2 	beq.w	8007ecc <_strtod_r+0xccc>
 8007d08:	9a05      	ldr	r2, [sp, #20]
 8007d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d0e:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 8007d12:	f420 0570 	bic.w	r5, r0, #15728640	; 0xf00000
 8007d16:	f2c0 030f 	movt	r3, #15
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	9c04      	ldr	r4, [sp, #16]
 8007d1e:	f000 8123 	beq.w	8007f68 <_strtod_r+0xd68>
 8007d22:	07e3      	lsls	r3, r4, #31
 8007d24:	d5c8      	bpl.n	8007cb8 <_strtod_r+0xab8>
 8007d26:	4658      	mov	r0, fp
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f005 fa3f 	bl	800d1ac <__ulp>
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	4658      	mov	r0, fp
 8007d34:	4649      	mov	r1, r9
 8007d36:	4622      	mov	r2, r4
 8007d38:	462b      	mov	r3, r5
 8007d3a:	f7f8 f96b 	bl	8000014 <__adddf3>
 8007d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d42:	e7b9      	b.n	8007cb8 <_strtod_r+0xab8>
 8007d44:	4440      	add	r0, r8
 8007d46:	3801      	subs	r0, #1
 8007d48:	2810      	cmp	r0, #16
 8007d4a:	f100 0801 	add.w	r8, r0, #1
 8007d4e:	f300 80ff 	bgt.w	8007f50 <_strtod_r+0xd50>
 8007d52:	f1b8 0f09 	cmp.w	r8, #9
 8007d56:	bfd5      	itete	le
 8007d58:	eb06 0686 	addle.w	r6, r6, r6, lsl #2
 8007d5c:	eb0b 0b8b 	addgt.w	fp, fp, fp, lsl #2
 8007d60:	eb01 0646 	addle.w	r6, r1, r6, lsl #1
 8007d64:	eb01 0b4b 	addgt.w	fp, r1, fp, lsl #1
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f10e 0101 	add.w	r1, lr, #1
 8007d6e:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d70:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8007d74:	e69b      	b.n	8007aae <_strtod_r+0x8ae>
 8007d76:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007d78:	1c68      	adds	r0, r5, #1
 8007d7a:	f47f ae22 	bne.w	80079c2 <_strtod_r+0x7c2>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	4601      	mov	r1, r0
 8007d82:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8007d86:	2222      	movs	r2, #34	; 0x22
 8007d88:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007d8c:	464e      	mov	r6, r9
 8007d8e:	4647      	mov	r7, r8
 8007d90:	9105      	str	r1, [sp, #20]
 8007d92:	9004      	str	r0, [sp, #16]
 8007d94:	f8ca 2000 	str.w	r2, [sl]
 8007d98:	4683      	mov	fp, r0
 8007d9a:	4689      	mov	r9, r1
 8007d9c:	e645      	b.n	8007a2a <_strtod_r+0x82a>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4611      	mov	r1, r2
 8007da2:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8007da6:	2322      	movs	r3, #34	; 0x22
 8007da8:	9105      	str	r1, [sp, #20]
 8007daa:	9204      	str	r2, [sp, #16]
 8007dac:	f8ca 3000 	str.w	r3, [sl]
 8007db0:	4693      	mov	fp, r2
 8007db2:	4689      	mov	r9, r1
 8007db4:	f7ff ba5b 	b.w	800726e <_strtod_r+0x6e>
 8007db8:	f43f ac61 	beq.w	800767e <_strtod_r+0x47e>
 8007dbc:	f1c4 0900 	rsb	r9, r4, #0
 8007dc0:	f019 030f 	ands.w	r3, r9, #15
 8007dc4:	d00a      	beq.n	8007ddc <_strtod_r+0xbdc>
 8007dc6:	4aa5      	ldr	r2, [pc, #660]	; (800805c <_strtod_r+0xe5c>)
 8007dc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dcc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dd4:	f7f8 fbfa 	bl	80005cc <__aeabi_ddiv>
 8007dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ddc:	ea5f 1529 	movs.w	r5, r9, asr #4
 8007de0:	f040 80e0 	bne.w	8007fa4 <_strtod_r+0xda4>
 8007de4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007de8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007dec:	9509      	str	r5, [sp, #36]	; 0x24
 8007dee:	e44b      	b.n	8007688 <_strtod_r+0x488>
 8007df0:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007df4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007df8:	e617      	b.n	8007a2a <_strtod_r+0x82a>
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007dfe:	460f      	mov	r7, r1
 8007e00:	940d      	str	r4, [sp, #52]	; 0x34
 8007e02:	f6cb 71e0 	movt	r1, #49120	; 0xbfe0
 8007e06:	f6c3 77e0 	movt	r7, #16352	; 0x3fe0
 8007e0a:	e598      	b.n	800793e <_strtod_r+0x73e>
 8007e0c:	2e06      	cmp	r6, #6
 8007e0e:	f000 8084 	beq.w	8007f1a <_strtod_r+0xd1a>
 8007e12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e14:	b13a      	cbz	r2, 8007e26 <_strtod_r+0xc26>
 8007e16:	6829      	ldr	r1, [r5, #0]
 8007e18:	a81a      	add	r0, sp, #104	; 0x68
 8007e1a:	f005 fad1 	bl	800d3c0 <__copybits>
 8007e1e:	4650      	mov	r0, sl
 8007e20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e22:	f004 fca3 	bl	800c76c <_Bfree>
 8007e26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e28:	2e06      	cmp	r6, #6
 8007e2a:	d80b      	bhi.n	8007e44 <_strtod_r+0xc44>
 8007e2c:	e8df f006 	tbb	[pc, r6]
 8007e30:	151c212c 	.word	0x151c212c
 8007e34:	2104      	.short	0x2104
 8007e36:	2c          	.byte	0x2c
 8007e37:	00          	.byte	0x00
 8007e38:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8007e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e40:	9007      	str	r0, [sp, #28]
 8007e42:	9206      	str	r2, [sp, #24]
 8007e44:	0722      	lsls	r2, r4, #28
 8007e46:	f57f ab91 	bpl.w	800756c <_strtod_r+0x36c>
 8007e4a:	9c07      	ldr	r4, [sp, #28]
 8007e4c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007e50:	f044 4300 	orr.w	r3, r4, #2147483648	; 0x80000000
 8007e54:	4699      	mov	r9, r3
 8007e56:	f7ff ba0a 	b.w	800726e <_strtod_r+0x6e>
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8007e62:	9107      	str	r1, [sp, #28]
 8007e64:	9506      	str	r5, [sp, #24]
 8007e66:	e7ed      	b.n	8007e44 <_strtod_r+0xc44>
 8007e68:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007e6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e6c:	9006      	str	r0, [sp, #24]
 8007e6e:	9207      	str	r2, [sp, #28]
 8007e70:	e7e8      	b.n	8007e44 <_strtod_r+0xc44>
 8007e72:	f203 4133 	addw	r1, r3, #1075	; 0x433
 8007e76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007e7a:	f423 1080 	bic.w	r0, r3, #1048576	; 0x100000
 8007e7e:	ea40 5201 	orr.w	r2, r0, r1, lsl #20
 8007e82:	9506      	str	r5, [sp, #24]
 8007e84:	9207      	str	r2, [sp, #28]
 8007e86:	e7dd      	b.n	8007e44 <_strtod_r+0xc44>
 8007e88:	2500      	movs	r5, #0
 8007e8a:	9507      	str	r5, [sp, #28]
 8007e8c:	9506      	str	r5, [sp, #24]
 8007e8e:	e7d9      	b.n	8007e44 <_strtod_r+0xc44>
 8007e90:	9d06      	ldr	r5, [sp, #24]
 8007e92:	f1c8 0125 	rsb	r1, r8, #37	; 0x25
 8007e96:	428d      	cmp	r5, r1
 8007e98:	f73f abd8 	bgt.w	800764c <_strtod_r+0x44c>
 8007e9c:	4c6f      	ldr	r4, [pc, #444]	; (800805c <_strtod_r+0xe5c>)
 8007e9e:	f1c8 080f 	rsb	r8, r8, #15
 8007ea2:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 8007ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eaa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007eae:	f7f8 fa63 	bl	8000378 <__aeabi_dmul>
 8007eb2:	9a06      	ldr	r2, [sp, #24]
 8007eb4:	ebc8 0802 	rsb	r8, r8, r2
 8007eb8:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 fa5a 	bl	8000378 <__aeabi_dmul>
 8007ec4:	4683      	mov	fp, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	f7ff b9d1 	b.w	800726e <_strtod_r+0x6e>
 8007ecc:	9c05      	ldr	r4, [sp, #20]
 8007ece:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d13a      	bne.n	8007f4c <_strtod_r+0xd4c>
 8007ed6:	9904      	ldr	r1, [sp, #16]
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	f43f aeda 	beq.w	8007c92 <_strtod_r+0xa92>
 8007ede:	07ca      	lsls	r2, r1, #31
 8007ee0:	f57f aeea 	bpl.w	8007cb8 <_strtod_r+0xab8>
 8007ee4:	4658      	mov	r0, fp
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f005 f960 	bl	800d1ac <__ulp>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4658      	mov	r0, fp
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 f88c 	bl	8000010 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	f7f8 fca0 	bl	8000848 <__aeabi_dcmpeq>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f47f ae71 	bne.w	8007bf0 <_strtod_r+0x9f0>
 8007f0e:	e6d3      	b.n	8007cb8 <_strtod_r+0xab8>
 8007f10:	9906      	ldr	r1, [sp, #24]
 8007f12:	4248      	negs	r0, r1
 8007f14:	900a      	str	r0, [sp, #40]	; 0x28
 8007f16:	f7ff bbc5 	b.w	80076a4 <_strtod_r+0x4a4>
 8007f1a:	3701      	adds	r7, #1
 8007f1c:	f04f 0b00 	mov.w	fp, #0
 8007f20:	9717      	str	r7, [sp, #92]	; 0x5c
 8007f22:	46d9      	mov	r9, fp
 8007f24:	f7ff b9a3 	b.w	800726e <_strtod_r+0x6e>
 8007f28:	9a06      	ldr	r2, [sp, #24]
 8007f2a:	f112 0f16 	cmn.w	r2, #22
 8007f2e:	f6ff ab8d 	blt.w	800764c <_strtod_r+0x44c>
 8007f32:	4b4a      	ldr	r3, [pc, #296]	; (800805c <_strtod_r+0xe5c>)
 8007f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f38:	eba3 0ac2 	sub.w	sl, r3, r2, lsl #3
 8007f3c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007f40:	f7f8 fb44 	bl	80005cc <__aeabi_ddiv>
 8007f44:	4683      	mov	fp, r0
 8007f46:	4689      	mov	r9, r1
 8007f48:	f7ff b991 	b.w	800726e <_strtod_r+0x6e>
 8007f4c:	9904      	ldr	r1, [sp, #16]
 8007f4e:	e7c6      	b.n	8007ede <_strtod_r+0xcde>
 8007f50:	2000      	movs	r0, #0
 8007f52:	e70a      	b.n	8007d6a <_strtod_r+0xb6a>
 8007f54:	f105 7354 	add.w	r3, r5, #55574528	; 0x3500000
 8007f58:	2000      	movs	r0, #0
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007f60:	4699      	mov	r9, r3
 8007f62:	9009      	str	r0, [sp, #36]	; 0x24
 8007f64:	f7ff bb90 	b.w	8007688 <_strtod_r+0x488>
 8007f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	d05d      	beq.n	800802a <_strtod_r+0xe2a>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 8007f74:	4010      	ands	r0, r2
 8007f76:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
 8007f7a:	d856      	bhi.n	800802a <_strtod_r+0xe2a>
 8007f7c:	0d05      	lsrs	r5, r0, #20
 8007f7e:	f1c5 016b 	rsb	r1, r5, #107	; 0x6b
 8007f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f86:	fa00 f301 	lsl.w	r3, r0, r1
 8007f8a:	429c      	cmp	r4, r3
 8007f8c:	f47f aec9 	bne.w	8007d22 <_strtod_r+0xb22>
 8007f90:	2100      	movs	r1, #0
 8007f92:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
 8007f96:	4011      	ands	r1, r2
 8007f98:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007f9c:	2400      	movs	r4, #0
 8007f9e:	9005      	str	r0, [sp, #20]
 8007fa0:	9404      	str	r4, [sp, #16]
 8007fa2:	e689      	b.n	8007cb8 <_strtod_r+0xab8>
 8007fa4:	2d1f      	cmp	r5, #31
 8007fa6:	dc38      	bgt.n	800801a <_strtod_r+0xe1a>
 8007fa8:	f015 0f10 	tst.w	r5, #16
 8007fac:	bf14      	ite	ne
 8007fae:	216a      	movne	r1, #106	; 0x6a
 8007fb0:	2100      	moveq	r1, #0
 8007fb2:	2d00      	cmp	r5, #0
 8007fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8007fb6:	dd0f      	ble.n	8007fd8 <_strtod_r+0xdd8>
 8007fb8:	4c29      	ldr	r4, [pc, #164]	; (8008060 <_strtod_r+0xe60>)
 8007fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fbe:	07eb      	lsls	r3, r5, #31
 8007fc0:	d503      	bpl.n	8007fca <_strtod_r+0xdca>
 8007fc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007fc6:	f7f8 f9d7 	bl	8000378 <__aeabi_dmul>
 8007fca:	3408      	adds	r4, #8
 8007fcc:	106d      	asrs	r5, r5, #1
 8007fce:	d1f6      	bne.n	8007fbe <_strtod_r+0xdbe>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fda:	b178      	cbz	r0, 8007ffc <_strtod_r+0xdfc>
 8007fdc:	9a05      	ldr	r2, [sp, #20]
 8007fde:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8007fe2:	f1c3 056b 	rsb	r5, r3, #107	; 0x6b
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	dd08      	ble.n	8007ffc <_strtod_r+0xdfc>
 8007fea:	2d1f      	cmp	r5, #31
 8007fec:	dd4c      	ble.n	8008088 <_strtod_r+0xe88>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2d34      	cmp	r5, #52	; 0x34
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	dd50      	ble.n	8008098 <_strtod_r+0xe98>
 8007ff6:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 8007ffa:	9205      	str	r2, [sp, #20]
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	9c04      	ldr	r4, [sp, #16]
 8008000:	4619      	mov	r1, r3
 8008002:	4620      	mov	r0, r4
 8008004:	2200      	movs	r2, #0
 8008006:	2300      	movs	r3, #0
 8008008:	f8dd b010 	ldr.w	fp, [sp, #16]
 800800c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008010:	f7f8 fc1a 	bl	8000848 <__aeabi_dcmpeq>
 8008014:	2800      	cmp	r0, #0
 8008016:	f43f ab37 	beq.w	8007688 <_strtod_r+0x488>
 800801a:	f04f 0b00 	mov.w	fp, #0
 800801e:	2022      	movs	r0, #34	; 0x22
 8008020:	f8ca 0000 	str.w	r0, [sl]
 8008024:	46d9      	mov	r9, fp
 8008026:	f7ff b922 	b.w	800726e <_strtod_r+0x6e>
 800802a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800802e:	e7ac      	b.n	8007f8a <_strtod_r+0xd8a>
 8008030:	9905      	ldr	r1, [sp, #20]
 8008032:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8008036:	0d04      	lsrs	r4, r0, #20
 8008038:	0525      	lsls	r5, r4, #20
 800803a:	f1b5 6fd6 	cmp.w	r5, #112197632	; 0x6b00000
 800803e:	f63f ae31 	bhi.w	8007ca4 <_strtod_r+0xaa4>
 8008042:	f1b5 7f5c 	cmp.w	r5, #57671680	; 0x3700000
 8008046:	f63f ae3b 	bhi.w	8007cc0 <_strtod_r+0xac0>
 800804a:	e5d1      	b.n	8007bf0 <_strtod_r+0x9f0>
 800804c:	2500      	movs	r5, #0
 800804e:	e579      	b.n	8007b44 <_strtod_r+0x944>
 8008050:	4640      	mov	r0, r8
 8008052:	e679      	b.n	8007d48 <_strtod_r+0xb48>
 8008054:	3101      	adds	r1, #1
 8008056:	9117      	str	r1, [sp, #92]	; 0x5c
 8008058:	f7ff ba82 	b.w	8007560 <_strtod_r+0x360>
 800805c:	0800e030 	.word	0x0800e030
 8008060:	0800df68 	.word	0x0800df68
 8008064:	a817      	add	r0, sp, #92	; 0x5c
 8008066:	4910      	ldr	r1, [pc, #64]	; (80080a8 <_strtod_r+0xea8>)
 8008068:	aa1a      	add	r2, sp, #104	; 0x68
 800806a:	f004 f893 	bl	800c194 <__hexnan>
 800806e:	2805      	cmp	r0, #5
 8008070:	f47f adb3 	bne.w	8007bda <_strtod_r+0x9da>
 8008074:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008076:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008078:	f045 43ff 	orr.w	r3, r5, #2139095040	; 0x7f800000
 800807c:	f443 02e0 	orr.w	r2, r3, #7340032	; 0x700000
 8008080:	9207      	str	r2, [sp, #28]
 8008082:	9106      	str	r1, [sp, #24]
 8008084:	f7ff ba72 	b.w	800756c <_strtod_r+0x36c>
 8008088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800808c:	fa01 f405 	lsl.w	r4, r1, r5
 8008090:	9804      	ldr	r0, [sp, #16]
 8008092:	4020      	ands	r0, r4
 8008094:	9004      	str	r0, [sp, #16]
 8008096:	e7b1      	b.n	8007ffc <_strtod_r+0xdfc>
 8008098:	3d20      	subs	r5, #32
 800809a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800809e:	fa01 f505 	lsl.w	r5, r1, r5
 80080a2:	4015      	ands	r5, r2
 80080a4:	9505      	str	r5, [sp, #20]
 80080a6:	e7a9      	b.n	8007ffc <_strtod_r+0xdfc>
 80080a8:	20000998 	.word	0x20000998
 80080ac:	f3af 8000 	nop.w

080080b0 <_strtol_r>:
 80080b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80080b4:	4c49      	ldr	r4, [pc, #292]	; (80081dc <_strtol_r+0x12c>)
 80080b6:	b082      	sub	sp, #8
 80080b8:	f8d4 c000 	ldr.w	ip, [r4]
 80080bc:	9001      	str	r0, [sp, #4]
 80080be:	460f      	mov	r7, r1
 80080c0:	463c      	mov	r4, r7
 80080c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80080c6:	eb0c 0005 	add.w	r0, ip, r5
 80080ca:	7846      	ldrb	r6, [r0, #1]
 80080cc:	4627      	mov	r7, r4
 80080ce:	f006 0008 	and.w	r0, r6, #8
 80080d2:	b2c6      	uxtb	r6, r0
 80080d4:	2e00      	cmp	r6, #0
 80080d6:	d1f3      	bne.n	80080c0 <_strtol_r+0x10>
 80080d8:	2d2d      	cmp	r5, #45	; 0x2d
 80080da:	d061      	beq.n	80081a0 <_strtol_r+0xf0>
 80080dc:	2d2b      	cmp	r5, #43	; 0x2b
 80080de:	bf04      	itt	eq
 80080e0:	4624      	moveq	r4, r4
 80080e2:	f814 5b01 	ldrbeq.w	r5, [r4], #1
 80080e6:	46b3      	mov	fp, r6
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d141      	bne.n	8008170 <_strtol_r+0xc0>
 80080ec:	2d30      	cmp	r5, #48	; 0x30
 80080ee:	d043      	beq.n	8008178 <_strtol_r+0xc8>
 80080f0:	230a      	movs	r3, #10
 80080f2:	469a      	mov	sl, r3
 80080f4:	f1bb 0f00 	cmp.w	fp, #0
 80080f8:	bf0c      	ite	eq
 80080fa:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000
 80080fe:	f04f 4700 	movne.w	r7, #2147483648	; 0x80000000
 8008102:	fbb7 f9fa 	udiv	r9, r7, sl
 8008106:	fb0a 7019 	mls	r0, sl, r9, r7
 800810a:	9000      	str	r0, [sp, #0]
 800810c:	2000      	movs	r0, #0
 800810e:	4680      	mov	r8, r0
 8008110:	e00c      	b.n	800812c <_strtol_r+0x7c>
 8008112:	3d30      	subs	r5, #48	; 0x30
 8008114:	42ab      	cmp	r3, r5
 8008116:	dd1b      	ble.n	8008150 <_strtol_r+0xa0>
 8008118:	1c46      	adds	r6, r0, #1
 800811a:	d005      	beq.n	8008128 <_strtol_r+0x78>
 800811c:	45c8      	cmp	r8, r9
 800811e:	d839      	bhi.n	8008194 <_strtol_r+0xe4>
 8008120:	d035      	beq.n	800818e <_strtol_r+0xde>
 8008122:	fb0a 5808 	mla	r8, sl, r8, r5
 8008126:	2001      	movs	r0, #1
 8008128:	f814 5b01 	ldrb.w	r5, [r4], #1
 800812c:	eb0c 0605 	add.w	r6, ip, r5
 8008130:	7876      	ldrb	r6, [r6, #1]
 8008132:	f006 0704 	and.w	r7, r6, #4
 8008136:	b2ff      	uxtb	r7, r7
 8008138:	2f00      	cmp	r7, #0
 800813a:	d1ea      	bne.n	8008112 <_strtol_r+0x62>
 800813c:	f016 0603 	ands.w	r6, r6, #3
 8008140:	d006      	beq.n	8008150 <_strtol_r+0xa0>
 8008142:	2e01      	cmp	r6, #1
 8008144:	bf14      	ite	ne
 8008146:	2657      	movne	r6, #87	; 0x57
 8008148:	2637      	moveq	r6, #55	; 0x37
 800814a:	1bad      	subs	r5, r5, r6
 800814c:	42ab      	cmp	r3, r5
 800814e:	dce3      	bgt.n	8008118 <_strtol_r+0x68>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d02a      	beq.n	80081aa <_strtol_r+0xfa>
 8008154:	f1bb 0f00 	cmp.w	fp, #0
 8008158:	d001      	beq.n	800815e <_strtol_r+0xae>
 800815a:	f1c8 0800 	rsb	r8, r8, #0
 800815e:	2a00      	cmp	r2, #0
 8008160:	d031      	beq.n	80081c6 <_strtol_r+0x116>
 8008162:	b9d0      	cbnz	r0, 800819a <_strtol_r+0xea>
 8008164:	4640      	mov	r0, r8
 8008166:	6011      	str	r1, [r2, #0]
 8008168:	b002      	add	sp, #8
 800816a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800816e:	4770      	bx	lr
 8008170:	2b10      	cmp	r3, #16
 8008172:	d1be      	bne.n	80080f2 <_strtol_r+0x42>
 8008174:	2d30      	cmp	r5, #48	; 0x30
 8008176:	d1bc      	bne.n	80080f2 <_strtol_r+0x42>
 8008178:	7825      	ldrb	r5, [r4, #0]
 800817a:	2d78      	cmp	r5, #120	; 0x78
 800817c:	d025      	beq.n	80081ca <_strtol_r+0x11a>
 800817e:	2d58      	cmp	r5, #88	; 0x58
 8008180:	d023      	beq.n	80081ca <_strtol_r+0x11a>
 8008182:	bb43      	cbnz	r3, 80081d6 <_strtol_r+0x126>
 8008184:	f04f 0a08 	mov.w	sl, #8
 8008188:	2530      	movs	r5, #48	; 0x30
 800818a:	4653      	mov	r3, sl
 800818c:	e7b2      	b.n	80080f4 <_strtol_r+0x44>
 800818e:	9800      	ldr	r0, [sp, #0]
 8008190:	4285      	cmp	r5, r0
 8008192:	ddc6      	ble.n	8008122 <_strtol_r+0x72>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008198:	e7c6      	b.n	8008128 <_strtol_r+0x78>
 800819a:	4640      	mov	r0, r8
 800819c:	1e61      	subs	r1, r4, #1
 800819e:	e7e2      	b.n	8008166 <_strtol_r+0xb6>
 80081a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80081a4:	f04f 0b01 	mov.w	fp, #1
 80081a8:	e79e      	b.n	80080e8 <_strtol_r+0x38>
 80081aa:	f1bb 0f00 	cmp.w	fp, #0
 80081ae:	9901      	ldr	r1, [sp, #4]
 80081b0:	bf0c      	ite	eq
 80081b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80081b6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80081ba:	2322      	movs	r3, #34	; 0x22
 80081bc:	600b      	str	r3, [r1, #0]
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d0d2      	beq.n	8008168 <_strtol_r+0xb8>
 80081c2:	1e61      	subs	r1, r4, #1
 80081c4:	e7cf      	b.n	8008166 <_strtol_r+0xb6>
 80081c6:	4640      	mov	r0, r8
 80081c8:	e7ce      	b.n	8008168 <_strtol_r+0xb8>
 80081ca:	f04f 0a10 	mov.w	sl, #16
 80081ce:	7865      	ldrb	r5, [r4, #1]
 80081d0:	4653      	mov	r3, sl
 80081d2:	3402      	adds	r4, #2
 80081d4:	e78e      	b.n	80080f4 <_strtol_r+0x44>
 80081d6:	469a      	mov	sl, r3
 80081d8:	2530      	movs	r5, #48	; 0x30
 80081da:	e78b      	b.n	80080f4 <_strtol_r+0x44>
 80081dc:	200000e4 	.word	0x200000e4

080081e0 <_strtoll_r>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	b087      	sub	sp, #28
 80081e6:	9101      	str	r1, [sp, #4]
 80081e8:	4968      	ldr	r1, [pc, #416]	; (800838c <_strtoll_r+0x1ac>)
 80081ea:	9005      	str	r0, [sp, #20]
 80081ec:	f8d1 8000 	ldr.w	r8, [r1]
 80081f0:	9801      	ldr	r0, [sp, #4]
 80081f2:	9202      	str	r2, [sp, #8]
 80081f4:	4699      	mov	r9, r3
 80081f6:	4606      	mov	r6, r0
 80081f8:	f816 7b01 	ldrb.w	r7, [r6], #1
 80081fc:	eb08 0307 	add.w	r3, r8, r7
 8008200:	785a      	ldrb	r2, [r3, #1]
 8008202:	4630      	mov	r0, r6
 8008204:	f002 0408 	and.w	r4, r2, #8
 8008208:	b2e5      	uxtb	r5, r4
 800820a:	2d00      	cmp	r5, #0
 800820c:	d1f3      	bne.n	80081f6 <_strtoll_r+0x16>
 800820e:	2f2d      	cmp	r7, #45	; 0x2d
 8008210:	f000 8082 	beq.w	8008318 <_strtoll_r+0x138>
 8008214:	2f2b      	cmp	r7, #43	; 0x2b
 8008216:	bf04      	itt	eq
 8008218:	4636      	moveq	r6, r6
 800821a:	f816 7b01 	ldrbeq.w	r7, [r6], #1
 800821e:	9503      	str	r5, [sp, #12]
 8008220:	f1b9 0f00 	cmp.w	r9, #0
 8008224:	d109      	bne.n	800823a <_strtoll_r+0x5a>
 8008226:	2f30      	cmp	r7, #48	; 0x30
 8008228:	f000 808b 	beq.w	8008342 <_strtoll_r+0x162>
 800822c:	f04f 0a0a 	mov.w	sl, #10
 8008230:	f04f 0b00 	mov.w	fp, #0
 8008234:	f04f 090a 	mov.w	r9, #10
 8008238:	e006      	b.n	8008248 <_strtoll_r+0x68>
 800823a:	f1b9 0f10 	cmp.w	r9, #16
 800823e:	f000 8099 	beq.w	8008374 <_strtoll_r+0x194>
 8008242:	46ca      	mov	sl, r9
 8008244:	ea4f 7be9 	mov.w	fp, r9, asr #31
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d05f      	beq.n	800830e <_strtoll_r+0x12e>
 800824e:	2400      	movs	r4, #0
 8008250:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008254:	4629      	mov	r1, r5
 8008256:	4620      	mov	r0, r4
 8008258:	4652      	mov	r2, sl
 800825a:	465b      	mov	r3, fp
 800825c:	f7f8 fbbe 	bl	80009dc <__aeabi_uldivmod>
 8008260:	4629      	mov	r1, r5
 8008262:	9204      	str	r2, [sp, #16]
 8008264:	465b      	mov	r3, fp
 8008266:	4652      	mov	r2, sl
 8008268:	4620      	mov	r0, r4
 800826a:	f7f8 fbb7 	bl	80009dc <__aeabi_uldivmod>
 800826e:	2500      	movs	r5, #0
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	2000      	movs	r0, #0
 8008276:	2100      	movs	r1, #0
 8008278:	e019      	b.n	80082ae <_strtoll_r+0xce>
 800827a:	3f30      	subs	r7, #48	; 0x30
 800827c:	45b9      	cmp	r9, r7
 800827e:	dd2a      	ble.n	80082d6 <_strtoll_r+0xf6>
 8008280:	1c6c      	adds	r4, r5, #1
 8008282:	d012      	beq.n	80082aa <_strtoll_r+0xca>
 8008284:	428b      	cmp	r3, r1
 8008286:	bf08      	it	eq
 8008288:	4282      	cmpeq	r2, r0
 800828a:	d33d      	bcc.n	8008308 <_strtoll_r+0x128>
 800828c:	4299      	cmp	r1, r3
 800828e:	bf08      	it	eq
 8008290:	4290      	cmpeq	r0, r2
 8008292:	d036      	beq.n	8008302 <_strtoll_r+0x122>
 8008294:	fb00 fc0b 	mul.w	ip, r0, fp
 8008298:	fba0 450a 	umull	r4, r5, r0, sl
 800829c:	fb0a c001 	mla	r0, sl, r1, ip
 80082a0:	1941      	adds	r1, r0, r5
 80082a2:	19e0      	adds	r0, r4, r7
 80082a4:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 80082a8:	2501      	movs	r5, #1
 80082aa:	f816 7b01 	ldrb.w	r7, [r6], #1
 80082ae:	eb08 0407 	add.w	r4, r8, r7
 80082b2:	7864      	ldrb	r4, [r4, #1]
 80082b4:	f004 0c04 	and.w	ip, r4, #4
 80082b8:	fa5f fe8c 	uxtb.w	lr, ip
 80082bc:	f1be 0f00 	cmp.w	lr, #0
 80082c0:	d1db      	bne.n	800827a <_strtoll_r+0x9a>
 80082c2:	f014 0403 	ands.w	r4, r4, #3
 80082c6:	d006      	beq.n	80082d6 <_strtoll_r+0xf6>
 80082c8:	2c01      	cmp	r4, #1
 80082ca:	bf14      	ite	ne
 80082cc:	2457      	movne	r4, #87	; 0x57
 80082ce:	2437      	moveq	r4, #55	; 0x37
 80082d0:	1b3f      	subs	r7, r7, r4
 80082d2:	45b9      	cmp	r9, r7
 80082d4:	dcd4      	bgt.n	8008280 <_strtoll_r+0xa0>
 80082d6:	1c6b      	adds	r3, r5, #1
 80082d8:	9a03      	ldr	r2, [sp, #12]
 80082da:	d022      	beq.n	8008322 <_strtoll_r+0x142>
 80082dc:	b112      	cbz	r2, 80082e4 <_strtoll_r+0x104>
 80082de:	4240      	negs	r0, r0
 80082e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082e4:	9c02      	ldr	r4, [sp, #8]
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	b12c      	cbz	r4, 80082f8 <_strtoll_r+0x118>
 80082ec:	b10d      	cbz	r5, 80082f2 <_strtoll_r+0x112>
 80082ee:	3e01      	subs	r6, #1
 80082f0:	9601      	str	r6, [sp, #4]
 80082f2:	9c01      	ldr	r4, [sp, #4]
 80082f4:	9902      	ldr	r1, [sp, #8]
 80082f6:	600c      	str	r4, [r1, #0]
 80082f8:	4610      	mov	r0, r2
 80082fa:	4619      	mov	r1, r3
 80082fc:	b007      	add	sp, #28
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	9d04      	ldr	r5, [sp, #16]
 8008304:	42af      	cmp	r7, r5
 8008306:	ddc5      	ble.n	8008294 <_strtoll_r+0xb4>
 8008308:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800830c:	e7cd      	b.n	80082aa <_strtoll_r+0xca>
 800830e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008312:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8008316:	e79d      	b.n	8008254 <_strtoll_r+0x74>
 8008318:	2101      	movs	r1, #1
 800831a:	f816 7b01 	ldrb.w	r7, [r6], #1
 800831e:	9103      	str	r1, [sp, #12]
 8008320:	e77e      	b.n	8008220 <_strtoll_r+0x40>
 8008322:	b952      	cbnz	r2, 800833a <_strtoll_r+0x15a>
 8008324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008328:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800832c:	9c05      	ldr	r4, [sp, #20]
 800832e:	2022      	movs	r0, #34	; 0x22
 8008330:	6020      	str	r0, [r4, #0]
 8008332:	9c02      	ldr	r4, [sp, #8]
 8008334:	2c00      	cmp	r4, #0
 8008336:	d1da      	bne.n	80082ee <_strtoll_r+0x10e>
 8008338:	e7de      	b.n	80082f8 <_strtoll_r+0x118>
 800833a:	2200      	movs	r2, #0
 800833c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008340:	e7f4      	b.n	800832c <_strtoll_r+0x14c>
 8008342:	7837      	ldrb	r7, [r6, #0]
 8008344:	2f78      	cmp	r7, #120	; 0x78
 8008346:	d00c      	beq.n	8008362 <_strtoll_r+0x182>
 8008348:	2f58      	cmp	r7, #88	; 0x58
 800834a:	d00a      	beq.n	8008362 <_strtoll_r+0x182>
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	d117      	bne.n	8008382 <_strtoll_r+0x1a2>
 8008352:	f04f 0a08 	mov.w	sl, #8
 8008356:	f04f 0b00 	mov.w	fp, #0
 800835a:	2730      	movs	r7, #48	; 0x30
 800835c:	f04f 0908 	mov.w	r9, #8
 8008360:	e772      	b.n	8008248 <_strtoll_r+0x68>
 8008362:	7877      	ldrb	r7, [r6, #1]
 8008364:	f04f 0a10 	mov.w	sl, #16
 8008368:	f04f 0b00 	mov.w	fp, #0
 800836c:	3602      	adds	r6, #2
 800836e:	f04f 0910 	mov.w	r9, #16
 8008372:	e769      	b.n	8008248 <_strtoll_r+0x68>
 8008374:	2f30      	cmp	r7, #48	; 0x30
 8008376:	d0e4      	beq.n	8008342 <_strtoll_r+0x162>
 8008378:	f04f 0a10 	mov.w	sl, #16
 800837c:	f04f 0b00 	mov.w	fp, #0
 8008380:	e762      	b.n	8008248 <_strtoll_r+0x68>
 8008382:	46ca      	mov	sl, r9
 8008384:	ea4f 7be9 	mov.w	fp, r9, asr #31
 8008388:	2730      	movs	r7, #48	; 0x30
 800838a:	e75d      	b.n	8008248 <_strtoll_r+0x68>
 800838c:	200000e4 	.word	0x200000e4

08008390 <_strtoul_r>:
 8008390:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008394:	4c51      	ldr	r4, [pc, #324]	; (80084dc <_strtoul_r+0x14c>)
 8008396:	b082      	sub	sp, #8
 8008398:	f8d4 8000 	ldr.w	r8, [r4]
 800839c:	9001      	str	r0, [sp, #4]
 800839e:	460f      	mov	r7, r1
 80083a0:	463c      	mov	r4, r7
 80083a2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083a6:	eb08 0005 	add.w	r0, r8, r5
 80083aa:	7846      	ldrb	r6, [r0, #1]
 80083ac:	4627      	mov	r7, r4
 80083ae:	f006 0008 	and.w	r0, r6, #8
 80083b2:	b2c6      	uxtb	r6, r0
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	d1f3      	bne.n	80083a0 <_strtoul_r+0x10>
 80083b8:	2d2d      	cmp	r5, #45	; 0x2d
 80083ba:	d05d      	beq.n	8008478 <_strtoul_r+0xe8>
 80083bc:	2d2b      	cmp	r5, #43	; 0x2b
 80083be:	bf04      	itt	eq
 80083c0:	4624      	moveq	r4, r4
 80083c2:	f814 5b01 	ldrbeq.w	r5, [r4], #1
 80083c6:	9600      	str	r6, [sp, #0]
 80083c8:	b953      	cbnz	r3, 80083e0 <_strtoul_r+0x50>
 80083ca:	2d30      	cmp	r5, #48	; 0x30
 80083cc:	d059      	beq.n	8008482 <_strtoul_r+0xf2>
 80083ce:	f649 1999 	movw	r9, #39321	; 0x9999
 80083d2:	230a      	movs	r3, #10
 80083d4:	f04f 0b05 	mov.w	fp, #5
 80083d8:	f6c1 1999 	movt	r9, #6553	; 0x1999
 80083dc:	469a      	mov	sl, r3
 80083de:	e00a      	b.n	80083f6 <_strtoul_r+0x66>
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d067      	beq.n	80084b4 <_strtoul_r+0x124>
 80083e4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80083e8:	fbb9 f9f3 	udiv	r9, r9, r3
 80083ec:	fb03 fb09 	mul.w	fp, r3, r9
 80083f0:	469a      	mov	sl, r3
 80083f2:	ea6f 0b0b 	mvn.w	fp, fp
 80083f6:	f04f 0c00 	mov.w	ip, #0
 80083fa:	4660      	mov	r0, ip
 80083fc:	e00e      	b.n	800841c <_strtoul_r+0x8c>
 80083fe:	3d30      	subs	r5, #48	; 0x30
 8008400:	42ab      	cmp	r3, r5
 8008402:	dd1d      	ble.n	8008440 <_strtoul_r+0xb0>
 8008404:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 8008408:	d006      	beq.n	8008418 <_strtoul_r+0x88>
 800840a:	4548      	cmp	r0, r9
 800840c:	d829      	bhi.n	8008462 <_strtoul_r+0xd2>
 800840e:	d026      	beq.n	800845e <_strtoul_r+0xce>
 8008410:	fb0a 5000 	mla	r0, sl, r0, r5
 8008414:	f04f 0c01 	mov.w	ip, #1
 8008418:	f814 5b01 	ldrb.w	r5, [r4], #1
 800841c:	eb08 0705 	add.w	r7, r8, r5
 8008420:	787e      	ldrb	r6, [r7, #1]
 8008422:	f006 0704 	and.w	r7, r6, #4
 8008426:	b2ff      	uxtb	r7, r7
 8008428:	2f00      	cmp	r7, #0
 800842a:	d1e8      	bne.n	80083fe <_strtoul_r+0x6e>
 800842c:	f016 0603 	ands.w	r6, r6, #3
 8008430:	d006      	beq.n	8008440 <_strtoul_r+0xb0>
 8008432:	2e01      	cmp	r6, #1
 8008434:	bf14      	ite	ne
 8008436:	2657      	movne	r6, #87	; 0x57
 8008438:	2637      	moveq	r6, #55	; 0x37
 800843a:	1bad      	subs	r5, r5, r6
 800843c:	42ab      	cmp	r3, r5
 800843e:	dce1      	bgt.n	8008404 <_strtoul_r+0x74>
 8008440:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 8008444:	d010      	beq.n	8008468 <_strtoul_r+0xd8>
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	b103      	cbz	r3, 800844c <_strtoul_r+0xbc>
 800844a:	4240      	negs	r0, r0
 800844c:	b11a      	cbz	r2, 8008456 <_strtoul_r+0xc6>
 800844e:	f1bc 0f00 	cmp.w	ip, #0
 8008452:	d10f      	bne.n	8008474 <_strtoul_r+0xe4>
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	b002      	add	sp, #8
 8008458:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800845c:	4770      	bx	lr
 800845e:	455d      	cmp	r5, fp
 8008460:	ddd6      	ble.n	8008410 <_strtoul_r+0x80>
 8008462:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008466:	e7d7      	b.n	8008418 <_strtoul_r+0x88>
 8008468:	9901      	ldr	r1, [sp, #4]
 800846a:	2022      	movs	r0, #34	; 0x22
 800846c:	6008      	str	r0, [r1, #0]
 800846e:	4660      	mov	r0, ip
 8008470:	2a00      	cmp	r2, #0
 8008472:	d0f0      	beq.n	8008456 <_strtoul_r+0xc6>
 8008474:	1e61      	subs	r1, r4, #1
 8008476:	e7ed      	b.n	8008454 <_strtoul_r+0xc4>
 8008478:	2701      	movs	r7, #1
 800847a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800847e:	9700      	str	r7, [sp, #0]
 8008480:	e7a2      	b.n	80083c8 <_strtoul_r+0x38>
 8008482:	7825      	ldrb	r5, [r4, #0]
 8008484:	2d78      	cmp	r5, #120	; 0x78
 8008486:	d00b      	beq.n	80084a0 <_strtoul_r+0x110>
 8008488:	2d58      	cmp	r5, #88	; 0x58
 800848a:	d009      	beq.n	80084a0 <_strtoul_r+0x110>
 800848c:	b9d3      	cbnz	r3, 80084c4 <_strtoul_r+0x134>
 800848e:	f04f 0a08 	mov.w	sl, #8
 8008492:	f04f 0b07 	mov.w	fp, #7
 8008496:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 800849a:	2530      	movs	r5, #48	; 0x30
 800849c:	4653      	mov	r3, sl
 800849e:	e7aa      	b.n	80083f6 <_strtoul_r+0x66>
 80084a0:	f04f 0a10 	mov.w	sl, #16
 80084a4:	7865      	ldrb	r5, [r4, #1]
 80084a6:	f04f 0b0f 	mov.w	fp, #15
 80084aa:	3402      	adds	r4, #2
 80084ac:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80084b0:	4653      	mov	r3, sl
 80084b2:	e7a0      	b.n	80083f6 <_strtoul_r+0x66>
 80084b4:	2d30      	cmp	r5, #48	; 0x30
 80084b6:	d0e4      	beq.n	8008482 <_strtoul_r+0xf2>
 80084b8:	469a      	mov	sl, r3
 80084ba:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 80084be:	f04f 0b0f 	mov.w	fp, #15
 80084c2:	e798      	b.n	80083f6 <_strtoul_r+0x66>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c8:	fbb0 f9f3 	udiv	r9, r0, r3
 80084cc:	fb03 f609 	mul.w	r6, r3, r9
 80084d0:	469a      	mov	sl, r3
 80084d2:	ea6f 0b06 	mvn.w	fp, r6
 80084d6:	2530      	movs	r5, #48	; 0x30
 80084d8:	e78d      	b.n	80083f6 <_strtoul_r+0x66>
 80084da:	bf00      	nop
 80084dc:	200000e4 	.word	0x200000e4

080084e0 <_strtoull_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b087      	sub	sp, #28
 80084e6:	9101      	str	r1, [sp, #4]
 80084e8:	4978      	ldr	r1, [pc, #480]	; (80086cc <_strtoull_r+0x1ec>)
 80084ea:	9005      	str	r0, [sp, #20]
 80084ec:	f8d1 a000 	ldr.w	sl, [r1]
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	9202      	str	r2, [sp, #8]
 80084f4:	469b      	mov	fp, r3
 80084f6:	4680      	mov	r8, r0
 80084f8:	f818 9b01 	ldrb.w	r9, [r8], #1
 80084fc:	eb0a 0309 	add.w	r3, sl, r9
 8008500:	785a      	ldrb	r2, [r3, #1]
 8008502:	4640      	mov	r0, r8
 8008504:	f002 0408 	and.w	r4, r2, #8
 8008508:	b2e5      	uxtb	r5, r4
 800850a:	2d00      	cmp	r5, #0
 800850c:	d1f3      	bne.n	80084f6 <_strtoull_r+0x16>
 800850e:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8008512:	f000 808e 	beq.w	8008632 <_strtoull_r+0x152>
 8008516:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 800851a:	bf04      	itt	eq
 800851c:	46c0      	nopeq			; (mov r8, r8)
 800851e:	f818 9b01 	ldrbeq.w	r9, [r8], #1
 8008522:	9504      	str	r5, [sp, #16]
 8008524:	f1bb 0f00 	cmp.w	fp, #0
 8008528:	d110      	bne.n	800854c <_strtoull_r+0x6c>
 800852a:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 800852e:	f000 8085 	beq.w	800863c <_strtoull_r+0x15c>
 8008532:	2705      	movs	r7, #5
 8008534:	f649 1599 	movw	r5, #39321	; 0x9999
 8008538:	9703      	str	r7, [sp, #12]
 800853a:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
 800853e:	f6c1 1599 	movt	r5, #6553	; 0x1999
 8008542:	260a      	movs	r6, #10
 8008544:	2700      	movs	r7, #0
 8008546:	f04f 0b0a 	mov.w	fp, #10
 800854a:	e018      	b.n	800857e <_strtoull_r+0x9e>
 800854c:	f1bb 0f10 	cmp.w	fp, #16
 8008550:	f000 8099 	beq.w	8008686 <_strtoull_r+0x1a6>
 8008554:	465e      	mov	r6, fp
 8008556:	17f7      	asrs	r7, r6, #31
 8008558:	4632      	mov	r2, r6
 800855a:	463b      	mov	r3, r7
 800855c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008564:	f7f8 fa3a 	bl	80009dc <__aeabi_uldivmod>
 8008568:	4632      	mov	r2, r6
 800856a:	4604      	mov	r4, r0
 800856c:	460d      	mov	r5, r1
 800856e:	463b      	mov	r3, r7
 8008570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008578:	f7f8 fa30 	bl	80009dc <__aeabi_uldivmod>
 800857c:	9203      	str	r2, [sp, #12]
 800857e:	2000      	movs	r0, #0
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	e01b      	b.n	80085be <_strtoull_r+0xde>
 8008586:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 800858a:	45cb      	cmp	fp, r9
 800858c:	dd2c      	ble.n	80085e8 <_strtoull_r+0x108>
 800858e:	1c41      	adds	r1, r0, #1
 8008590:	d013      	beq.n	80085ba <_strtoull_r+0xda>
 8008592:	429d      	cmp	r5, r3
 8008594:	bf08      	it	eq
 8008596:	4294      	cmpeq	r4, r2
 8008598:	d33e      	bcc.n	8008618 <_strtoull_r+0x138>
 800859a:	42ab      	cmp	r3, r5
 800859c:	bf08      	it	eq
 800859e:	42a2      	cmpeq	r2, r4
 80085a0:	d037      	beq.n	8008612 <_strtoull_r+0x132>
 80085a2:	fb02 fc07 	mul.w	ip, r2, r7
 80085a6:	fba2 0106 	umull	r0, r1, r2, r6
 80085aa:	fb06 c303 	mla	r3, r6, r3, ip
 80085ae:	eb10 0209 	adds.w	r2, r0, r9
 80085b2:	4419      	add	r1, r3
 80085b4:	eb41 73e9 	adc.w	r3, r1, r9, asr #31
 80085b8:	2001      	movs	r0, #1
 80085ba:	f818 9b01 	ldrb.w	r9, [r8], #1
 80085be:	eb0a 0109 	add.w	r1, sl, r9
 80085c2:	7849      	ldrb	r1, [r1, #1]
 80085c4:	f001 0c04 	and.w	ip, r1, #4
 80085c8:	fa5f fc8c 	uxtb.w	ip, ip
 80085cc:	f1bc 0f00 	cmp.w	ip, #0
 80085d0:	d1d9      	bne.n	8008586 <_strtoull_r+0xa6>
 80085d2:	f011 0103 	ands.w	r1, r1, #3
 80085d6:	d007      	beq.n	80085e8 <_strtoull_r+0x108>
 80085d8:	2901      	cmp	r1, #1
 80085da:	bf14      	ite	ne
 80085dc:	2157      	movne	r1, #87	; 0x57
 80085de:	2137      	moveq	r1, #55	; 0x37
 80085e0:	ebc1 0909 	rsb	r9, r1, r9
 80085e4:	45cb      	cmp	fp, r9
 80085e6:	dcd2      	bgt.n	800858e <_strtoull_r+0xae>
 80085e8:	1c41      	adds	r1, r0, #1
 80085ea:	d018      	beq.n	800861e <_strtoull_r+0x13e>
 80085ec:	9904      	ldr	r1, [sp, #16]
 80085ee:	b111      	cbz	r1, 80085f6 <_strtoull_r+0x116>
 80085f0:	4252      	negs	r2, r2
 80085f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80085f6:	9902      	ldr	r1, [sp, #8]
 80085f8:	b131      	cbz	r1, 8008608 <_strtoull_r+0x128>
 80085fa:	b110      	cbz	r0, 8008602 <_strtoull_r+0x122>
 80085fc:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8008600:	9101      	str	r1, [sp, #4]
 8008602:	9901      	ldr	r1, [sp, #4]
 8008604:	9802      	ldr	r0, [sp, #8]
 8008606:	6001      	str	r1, [r0, #0]
 8008608:	4610      	mov	r0, r2
 800860a:	4619      	mov	r1, r3
 800860c:	b007      	add	sp, #28
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	9803      	ldr	r0, [sp, #12]
 8008614:	4581      	cmp	r9, r0
 8008616:	ddc4      	ble.n	80085a2 <_strtoull_r+0xc2>
 8008618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800861c:	e7cd      	b.n	80085ba <_strtoull_r+0xda>
 800861e:	9b05      	ldr	r3, [sp, #20]
 8008620:	9802      	ldr	r0, [sp, #8]
 8008622:	2222      	movs	r2, #34	; 0x22
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	b3a0      	cbz	r0, 8008692 <_strtoull_r+0x1b2>
 8008628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800862c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008630:	e7e4      	b.n	80085fc <_strtoull_r+0x11c>
 8008632:	2601      	movs	r6, #1
 8008634:	f818 9b01 	ldrb.w	r9, [r8], #1
 8008638:	9604      	str	r6, [sp, #16]
 800863a:	e773      	b.n	8008524 <_strtoull_r+0x44>
 800863c:	f898 1000 	ldrb.w	r1, [r8]
 8008640:	2978      	cmp	r1, #120	; 0x78
 8008642:	d011      	beq.n	8008668 <_strtoull_r+0x188>
 8008644:	2958      	cmp	r1, #88	; 0x58
 8008646:	d00f      	beq.n	8008668 <_strtoull_r+0x188>
 8008648:	f1bb 0f00 	cmp.w	fp, #0
 800864c:	d126      	bne.n	800869c <_strtoull_r+0x1bc>
 800864e:	2307      	movs	r3, #7
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008656:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800865a:	2608      	movs	r6, #8
 800865c:	2700      	movs	r7, #0
 800865e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8008662:	f04f 0b08 	mov.w	fp, #8
 8008666:	e78a      	b.n	800857e <_strtoull_r+0x9e>
 8008668:	220f      	movs	r2, #15
 800866a:	f898 9001 	ldrb.w	r9, [r8, #1]
 800866e:	9203      	str	r2, [sp, #12]
 8008670:	f108 0802 	add.w	r8, r8, #2
 8008674:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008678:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
 800867c:	2610      	movs	r6, #16
 800867e:	2700      	movs	r7, #0
 8008680:	f04f 0b10 	mov.w	fp, #16
 8008684:	e77b      	b.n	800857e <_strtoull_r+0x9e>
 8008686:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 800868a:	d0d7      	beq.n	800863c <_strtoull_r+0x15c>
 800868c:	2610      	movs	r6, #16
 800868e:	2700      	movs	r7, #0
 8008690:	e762      	b.n	8008558 <_strtoull_r+0x78>
 8008692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800869a:	e7b5      	b.n	8008608 <_strtoull_r+0x128>
 800869c:	465e      	mov	r6, fp
 800869e:	17f7      	asrs	r7, r6, #31
 80086a0:	465a      	mov	r2, fp
 80086a2:	463b      	mov	r3, r7
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086ac:	f7f8 f996 	bl	80009dc <__aeabi_uldivmod>
 80086b0:	465a      	mov	r2, fp
 80086b2:	4604      	mov	r4, r0
 80086b4:	460d      	mov	r5, r1
 80086b6:	463b      	mov	r3, r7
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086c0:	f7f8 f98c 	bl	80009dc <__aeabi_uldivmod>
 80086c4:	f04f 0930 	mov.w	r9, #48	; 0x30
 80086c8:	9203      	str	r2, [sp, #12]
 80086ca:	e758      	b.n	800857e <_strtoull_r+0x9e>
 80086cc:	200000e4 	.word	0x200000e4

080086d0 <_sungetc_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	1c4b      	adds	r3, r1, #1
 80086d4:	4614      	mov	r4, r2
 80086d6:	d019      	beq.n	800870c <_sungetc_r+0x3c>
 80086d8:	8992      	ldrh	r2, [r2, #12]
 80086da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086dc:	f022 0520 	bic.w	r5, r2, #32
 80086e0:	81a5      	strh	r5, [r4, #12]
 80086e2:	b2cd      	uxtb	r5, r1
 80086e4:	b1ab      	cbz	r3, 8008712 <_sungetc_r+0x42>
 80086e6:	6862      	ldr	r2, [r4, #4]
 80086e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ea:	428a      	cmp	r2, r1
 80086ec:	da09      	bge.n	8008702 <_sungetc_r+0x32>
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	1e43      	subs	r3, r0, #1
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	f800 5c01 	strb.w	r5, [r0, #-1]
 80086f8:	6862      	ldr	r2, [r4, #4]
 80086fa:	1c51      	adds	r1, r2, #1
 80086fc:	6061      	str	r1, [r4, #4]
 80086fe:	4628      	mov	r0, r5
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	4621      	mov	r1, r4
 8008704:	f001 fdee 	bl	800a2e4 <__submore>
 8008708:	2800      	cmp	r0, #0
 800870a:	d0f0      	beq.n	80086ee <_sungetc_r+0x1e>
 800870c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008710:	e7f5      	b.n	80086fe <_sungetc_r+0x2e>
 8008712:	6920      	ldr	r0, [r4, #16]
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	b128      	cbz	r0, 8008724 <_sungetc_r+0x54>
 8008718:	4290      	cmp	r0, r2
 800871a:	d203      	bcs.n	8008724 <_sungetc_r+0x54>
 800871c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008720:	42a9      	cmp	r1, r5
 8008722:	d00f      	beq.n	8008744 <_sungetc_r+0x74>
 8008724:	6861      	ldr	r1, [r4, #4]
 8008726:	4623      	mov	r3, r4
 8008728:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800872c:	f803 5f42 	strb.w	r5, [r3, #66]!
 8008730:	63e1      	str	r1, [r4, #60]	; 0x3c
 8008732:	63a2      	str	r2, [r4, #56]	; 0x38
 8008734:	2101      	movs	r1, #1
 8008736:	2203      	movs	r2, #3
 8008738:	6320      	str	r0, [r4, #48]	; 0x30
 800873a:	6362      	str	r2, [r4, #52]	; 0x34
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	6061      	str	r1, [r4, #4]
 8008740:	4628      	mov	r0, r5
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	6863      	ldr	r3, [r4, #4]
 8008746:	3a01      	subs	r2, #1
 8008748:	3301      	adds	r3, #1
 800874a:	e884 000c 	stmia.w	r4, {r2, r3}
 800874e:	e7d6      	b.n	80086fe <_sungetc_r+0x2e>

08008750 <__ssrefill_r>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8008756:	b169      	cbz	r1, 8008774 <__ssrefill_r+0x24>
 8008758:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800875c:	4299      	cmp	r1, r3
 800875e:	d001      	beq.n	8008764 <__ssrefill_r+0x14>
 8008760:	f003 f8be 	bl	800b8e0 <_free_r>
 8008764:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008766:	2000      	movs	r0, #0
 8008768:	6320      	str	r0, [r4, #48]	; 0x30
 800876a:	6061      	str	r1, [r4, #4]
 800876c:	b111      	cbz	r1, 8008774 <__ssrefill_r+0x24>
 800876e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	bd10      	pop	{r4, pc}
 8008774:	89a2      	ldrh	r2, [r4, #12]
 8008776:	6920      	ldr	r0, [r4, #16]
 8008778:	f042 0120 	orr.w	r1, r2, #32
 800877c:	2300      	movs	r3, #0
 800877e:	6020      	str	r0, [r4, #0]
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	81a1      	strh	r1, [r4, #12]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008788:	bd10      	pop	{r4, pc}
 800878a:	bf00      	nop

0800878c <_sfread_r>:
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	fb02 fa03 	mul.w	sl, r2, r3
 8008794:	b083      	sub	sp, #12
 8008796:	9201      	str	r2, [sp, #4]
 8008798:	4699      	mov	r9, r3
 800879a:	4607      	mov	r7, r0
 800879c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800879e:	f1ba 0f00 	cmp.w	sl, #0
 80087a2:	d024      	beq.n	80087ee <_sfread_r+0x62>
 80087a4:	460e      	mov	r6, r1
 80087a6:	4655      	mov	r5, sl
 80087a8:	f04f 0800 	mov.w	r8, #0
 80087ac:	f8d4 b004 	ldr.w	fp, [r4, #4]
 80087b0:	4630      	mov	r0, r6
 80087b2:	455d      	cmp	r5, fp
 80087b4:	465a      	mov	r2, fp
 80087b6:	6821      	ldr	r1, [r4, #0]
 80087b8:	d91b      	bls.n	80087f2 <_sfread_r+0x66>
 80087ba:	f003 ff03 	bl	800c5c4 <memcpy>
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	f8c4 8004 	str.w	r8, [r4, #4]
 80087c4:	eb02 030b 	add.w	r3, r2, fp
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	4638      	mov	r0, r7
 80087cc:	4621      	mov	r1, r4
 80087ce:	445e      	add	r6, fp
 80087d0:	ebcb 0505 	rsb	r5, fp, r5
 80087d4:	f7ff ffbc 	bl	8008750 <__ssrefill_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0e7      	beq.n	80087ac <_sfread_r+0x20>
 80087dc:	9801      	ldr	r0, [sp, #4]
 80087de:	ebc5 050a 	rsb	r5, r5, sl
 80087e2:	fbb5 f9f0 	udiv	r9, r5, r0
 80087e6:	4648      	mov	r0, r9
 80087e8:	b003      	add	sp, #12
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ee:	46d1      	mov	r9, sl
 80087f0:	e7f9      	b.n	80087e6 <_sfread_r+0x5a>
 80087f2:	462a      	mov	r2, r5
 80087f4:	f003 fee6 	bl	800c5c4 <memcpy>
 80087f8:	6862      	ldr	r2, [r4, #4]
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	1b50      	subs	r0, r2, r5
 80087fe:	1959      	adds	r1, r3, r5
 8008800:	6060      	str	r0, [r4, #4]
 8008802:	6021      	str	r1, [r4, #0]
 8008804:	e7ef      	b.n	80087e6 <_sfread_r+0x5a>
 8008806:	bf00      	nop

08008808 <_svfprintf_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b0c3      	sub	sp, #268	; 0x10c
 800880e:	468b      	mov	fp, r1
 8008810:	9310      	str	r3, [sp, #64]	; 0x40
 8008812:	4614      	mov	r4, r2
 8008814:	900c      	str	r0, [sp, #48]	; 0x30
 8008816:	f7fe f8bb 	bl	8006990 <_localeconv_r>
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	2600      	movs	r6, #0
 800881e:	2700      	movs	r7, #0
 8008820:	9014      	str	r0, [sp, #80]	; 0x50
 8008822:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 8008826:	f7fc febf 	bl	80055a8 <strlen>
 800882a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800882e:	9018      	str	r0, [sp, #96]	; 0x60
 8008830:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8008834:	b201      	sxth	r1, r0
 8008836:	b121      	cbz	r1, 8008842 <_svfprintf_r+0x3a>
 8008838:	f8db 2010 	ldr.w	r2, [fp, #16]
 800883c:	2a00      	cmp	r2, #0
 800883e:	f001 82ca 	beq.w	8009dd6 <_svfprintf_r+0x15ce>
 8008842:	2700      	movs	r7, #0
 8008844:	ae32      	add	r6, sp, #200	; 0xc8
 8008846:	f8df 9520 	ldr.w	r9, [pc, #1312]	; 8008d68 <_svfprintf_r+0x560>
 800884a:	9711      	str	r7, [sp, #68]	; 0x44
 800884c:	9608      	str	r6, [sp, #32]
 800884e:	9625      	str	r6, [sp, #148]	; 0x94
 8008850:	9727      	str	r7, [sp, #156]	; 0x9c
 8008852:	9726      	str	r7, [sp, #152]	; 0x98
 8008854:	46a2      	mov	sl, r4
 8008856:	9719      	str	r7, [sp, #100]	; 0x64
 8008858:	971a      	str	r7, [sp, #104]	; 0x68
 800885a:	970f      	str	r7, [sp, #60]	; 0x3c
 800885c:	f89a 4000 	ldrb.w	r4, [sl]
 8008860:	2c00      	cmp	r4, #0
 8008862:	f000 81a2 	beq.w	8008baa <_svfprintf_r+0x3a2>
 8008866:	2c25      	cmp	r4, #37	; 0x25
 8008868:	f000 819f 	beq.w	8008baa <_svfprintf_r+0x3a2>
 800886c:	f10a 0301 	add.w	r3, sl, #1
 8008870:	e001      	b.n	8008876 <_svfprintf_r+0x6e>
 8008872:	2d25      	cmp	r5, #37	; 0x25
 8008874:	d004      	beq.n	8008880 <_svfprintf_r+0x78>
 8008876:	781d      	ldrb	r5, [r3, #0]
 8008878:	461c      	mov	r4, r3
 800887a:	3301      	adds	r3, #1
 800887c:	2d00      	cmp	r5, #0
 800887e:	d1f8      	bne.n	8008872 <_svfprintf_r+0x6a>
 8008880:	ebca 0504 	rsb	r5, sl, r4
 8008884:	b17d      	cbz	r5, 80088a6 <_svfprintf_r+0x9e>
 8008886:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008888:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800888a:	1c53      	adds	r3, r2, #1
 800888c:	1941      	adds	r1, r0, r5
 800888e:	2b07      	cmp	r3, #7
 8008890:	f8c6 a000 	str.w	sl, [r6]
 8008894:	6075      	str	r5, [r6, #4]
 8008896:	9127      	str	r1, [sp, #156]	; 0x9c
 8008898:	9326      	str	r3, [sp, #152]	; 0x98
 800889a:	f300 8169 	bgt.w	8008b70 <_svfprintf_r+0x368>
 800889e:	3608      	adds	r6, #8
 80088a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80088a2:	197f      	adds	r7, r7, r5
 80088a4:	970f      	str	r7, [sp, #60]	; 0x3c
 80088a6:	7820      	ldrb	r0, [r4, #0]
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f000 8169 	beq.w	8008b80 <_svfprintf_r+0x378>
 80088ae:	2100      	movs	r1, #0
 80088b0:	f104 0a01 	add.w	sl, r4, #1
 80088b4:	f894 8001 	ldrb.w	r8, [r4, #1]
 80088b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088bc:	910d      	str	r1, [sp, #52]	; 0x34
 80088be:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 80088c2:	9109      	str	r1, [sp, #36]	; 0x24
 80088c4:	940a      	str	r4, [sp, #40]	; 0x28
 80088c6:	2020      	movs	r0, #32
 80088c8:	212b      	movs	r1, #43	; 0x2b
 80088ca:	f10a 0a01 	add.w	sl, sl, #1
 80088ce:	f1a8 0220 	sub.w	r2, r8, #32
 80088d2:	2a58      	cmp	r2, #88	; 0x58
 80088d4:	f200 825d 	bhi.w	8008d92 <_svfprintf_r+0x58a>
 80088d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80088dc:	025b0274 	.word	0x025b0274
 80088e0:	027e025b 	.word	0x027e025b
 80088e4:	025b025b 	.word	0x025b025b
 80088e8:	025b025b 	.word	0x025b025b
 80088ec:	025b025b 	.word	0x025b025b
 80088f0:	01c501b9 	.word	0x01c501b9
 80088f4:	0143025b 	.word	0x0143025b
 80088f8:	025b01ca 	.word	0x025b01ca
 80088fc:	028c0285 	.word	0x028c0285
 8008900:	028c028c 	.word	0x028c028c
 8008904:	028c028c 	.word	0x028c028c
 8008908:	028c028c 	.word	0x028c028c
 800890c:	028c028c 	.word	0x028c028c
 8008910:	025b025b 	.word	0x025b025b
 8008914:	025b025b 	.word	0x025b025b
 8008918:	025b025b 	.word	0x025b025b
 800891c:	025b025b 	.word	0x025b025b
 8008920:	025b025b 	.word	0x025b025b
 8008924:	01880087 	.word	0x01880087
 8008928:	0188025b 	.word	0x0188025b
 800892c:	025b025b 	.word	0x025b025b
 8008930:	025b025b 	.word	0x025b025b
 8008934:	025b01f8 	.word	0x025b01f8
 8008938:	006d025b 	.word	0x006d025b
 800893c:	025b025b 	.word	0x025b025b
 8008940:	025b025b 	.word	0x025b025b
 8008944:	0059025b 	.word	0x0059025b
 8008948:	025b025b 	.word	0x025b025b
 800894c:	025b01ff 	.word	0x025b01ff
 8008950:	025b025b 	.word	0x025b025b
 8008954:	025b025b 	.word	0x025b025b
 8008958:	025b025b 	.word	0x025b025b
 800895c:	025b025b 	.word	0x025b025b
 8008960:	01e6025b 	.word	0x01e6025b
 8008964:	0188008b 	.word	0x0188008b
 8008968:	01880188 	.word	0x01880188
 800896c:	008b02aa 	.word	0x008b02aa
 8008970:	025b025b 	.word	0x025b025b
 8008974:	025b02d7 	.word	0x025b02d7
 8008978:	0071029d 	.word	0x0071029d
 800897c:	0234021f 	.word	0x0234021f
 8008980:	02b1025b 	.word	0x02b1025b
 8008984:	005d025b 	.word	0x005d025b
 8008988:	025b025b 	.word	0x025b025b
 800898c:	0248      	.short	0x0248
 800898e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008990:	f045 0210 	orr.w	r2, r5, #16
 8008994:	9209      	str	r2, [sp, #36]	; 0x24
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	0699      	lsls	r1, r3, #26
 800899a:	f100 8208 	bmi.w	8008dae <_svfprintf_r+0x5a6>
 800899e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80089a0:	06e2      	lsls	r2, r4, #27
 80089a2:	f141 8091 	bpl.w	8009ac8 <_svfprintf_r+0x12c0>
 80089a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80089a8:	683d      	ldr	r5, [r7, #0]
 80089aa:	1d3b      	adds	r3, r7, #4
 80089ac:	9310      	str	r3, [sp, #64]	; 0x40
 80089ae:	462c      	mov	r4, r5
 80089b0:	2301      	movs	r3, #1
 80089b2:	2500      	movs	r5, #0
 80089b4:	e116      	b.n	8008be4 <_svfprintf_r+0x3dc>
 80089b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b8:	f042 0110 	orr.w	r1, r2, #16
 80089bc:	9109      	str	r1, [sp, #36]	; 0x24
 80089be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c0:	f013 0320 	ands.w	r3, r3, #32
 80089c4:	f040 8104 	bne.w	8008bd0 <_svfprintf_r+0x3c8>
 80089c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80089ca:	f014 0010 	ands.w	r0, r4, #16
 80089ce:	f040 8761 	bne.w	8009894 <_svfprintf_r+0x108c>
 80089d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089d4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80089d8:	f000 875c 	beq.w	8009894 <_svfprintf_r+0x108c>
 80089dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80089de:	4603      	mov	r3, r0
 80089e0:	1d3a      	adds	r2, r7, #4
 80089e2:	883c      	ldrh	r4, [r7, #0]
 80089e4:	2500      	movs	r5, #0
 80089e6:	9210      	str	r2, [sp, #64]	; 0x40
 80089e8:	e0fc      	b.n	8008be4 <_svfprintf_r+0x3dc>
 80089ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089ec:	f045 0310 	orr.w	r3, r5, #16
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089f4:	06bf      	lsls	r7, r7, #26
 80089f6:	f140 80da 	bpl.w	8008bae <_svfprintf_r+0x3a6>
 80089fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80089fc:	1de0      	adds	r0, r4, #7
 80089fe:	f020 0507 	bic.w	r5, r0, #7
 8008a02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a06:	3508      	adds	r5, #8
 8008a08:	9510      	str	r5, [sp, #64]	; 0x40
 8008a0a:	4614      	mov	r4, r2
 8008a0c:	461d      	mov	r5, r3
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	f173 0000 	sbcs.w	r0, r3, #0
 8008a14:	f2c0 8735 	blt.w	8009882 <_svfprintf_r+0x107a>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	db03      	blt.n	8008a28 <_svfprintf_r+0x220>
 8008a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a22:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 8008a26:	9009      	str	r0, [sp, #36]	; 0x24
 8008a28:	ea54 0005 	orrs.w	r0, r4, r5
 8008a2c:	f040 83ef 	bne.w	800920e <_svfprintf_r+0xa06>
 8008a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	f040 83eb 	bne.w	800920e <_svfprintf_r+0xa06>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f040 8658 	bne.w	80096ee <_svfprintf_r+0xee6>
 8008a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a40:	07da      	lsls	r2, r3, #31
 8008a42:	f141 8017 	bpl.w	8009a74 <_svfprintf_r+0x126c>
 8008a46:	af42      	add	r7, sp, #264	; 0x108
 8008a48:	2130      	movs	r1, #48	; 0x30
 8008a4a:	9808      	ldr	r0, [sp, #32]
 8008a4c:	f807 1d41 	strb.w	r1, [r7, #-65]!
 8008a50:	1bc2      	subs	r2, r0, r7
 8008a52:	920e      	str	r2, [sp, #56]	; 0x38
 8008a54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a58:	2400      	movs	r4, #0
 8008a5a:	4288      	cmp	r0, r1
 8008a5c:	bfb8      	it	lt
 8008a5e:	4608      	movlt	r0, r1
 8008a60:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8008a64:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a66:	9112      	str	r1, [sp, #72]	; 0x48
 8008a68:	9415      	str	r4, [sp, #84]	; 0x54
 8008a6a:	b113      	cbz	r3, 8008a72 <_svfprintf_r+0x26a>
 8008a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a74:	f010 0102 	ands.w	r1, r0, #2
 8008a78:	910a      	str	r1, [sp, #40]	; 0x28
 8008a7a:	d002      	beq.n	8008a82 <_svfprintf_r+0x27a>
 8008a7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a7e:	1c94      	adds	r4, r2, #2
 8008a80:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a84:	f013 0084 	ands.w	r0, r3, #132	; 0x84
 8008a88:	9013      	str	r0, [sp, #76]	; 0x4c
 8008a8a:	f040 8228 	bne.w	8008ede <_svfprintf_r+0x6d6>
 8008a8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a92:	1a6d      	subs	r5, r5, r1
 8008a94:	2d00      	cmp	r5, #0
 8008a96:	f340 8222 	ble.w	8008ede <_svfprintf_r+0x6d6>
 8008a9a:	2d10      	cmp	r5, #16
 8008a9c:	f341 8214 	ble.w	8009ec8 <_svfprintf_r+0x16c0>
 8008aa0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8008aa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008aa4:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
 8008aa8:	2410      	movs	r4, #16
 8008aaa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008aae:	e886 0011 	stmia.w	r6, {r0, r4}
 8008ab2:	1911      	adds	r1, r2, r4
 8008ab4:	48a7      	ldr	r0, [pc, #668]	; (8008d54 <_svfprintf_r+0x54c>)
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	f1a5 0e11 	sub.w	lr, r5, #17
 8008abc:	2a07      	cmp	r2, #7
 8008abe:	901b      	str	r0, [sp, #108]	; 0x6c
 8008ac0:	9127      	str	r1, [sp, #156]	; 0x9c
 8008ac2:	9226      	str	r2, [sp, #152]	; 0x98
 8008ac4:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8008ac8:	f300 856c 	bgt.w	80095a4 <_svfprintf_r+0xd9c>
 8008acc:	3608      	adds	r6, #8
 8008ace:	3d10      	subs	r5, #16
 8008ad0:	2d10      	cmp	r5, #16
 8008ad2:	f340 81f8 	ble.w	8008ec6 <_svfprintf_r+0x6be>
 8008ad6:	b18b      	cbz	r3, 8008afc <_svfprintf_r+0x2f4>
 8008ad8:	3201      	adds	r2, #1
 8008ada:	f64d 73e4 	movw	r3, #57316	; 0xdfe4
 8008ade:	3110      	adds	r1, #16
 8008ae0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008ae4:	2a07      	cmp	r2, #7
 8008ae6:	e886 0018 	stmia.w	r6, {r3, r4}
 8008aea:	9127      	str	r1, [sp, #156]	; 0x9c
 8008aec:	9226      	str	r2, [sp, #152]	; 0x98
 8008aee:	f300 8568 	bgt.w	80095c2 <_svfprintf_r+0xdba>
 8008af2:	3608      	adds	r6, #8
 8008af4:	3d10      	subs	r5, #16
 8008af6:	2d10      	cmp	r5, #16
 8008af8:	f340 81e5 	ble.w	8008ec6 <_svfprintf_r+0x6be>
 8008afc:	4633      	mov	r3, r6
 8008afe:	462e      	mov	r6, r5
 8008b00:	463d      	mov	r5, r7
 8008b02:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008b04:	e013      	b.n	8008b2e <_svfprintf_r+0x326>
 8008b06:	3308      	adds	r3, #8
 8008b08:	3201      	adds	r2, #1
 8008b0a:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
 8008b0e:	3110      	adds	r1, #16
 8008b10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008b14:	3e10      	subs	r6, #16
 8008b16:	2a07      	cmp	r2, #7
 8008b18:	e883 0011 	stmia.w	r3, {r0, r4}
 8008b1c:	9127      	str	r1, [sp, #156]	; 0x9c
 8008b1e:	9226      	str	r2, [sp, #152]	; 0x98
 8008b20:	f300 81bf 	bgt.w	8008ea2 <_svfprintf_r+0x69a>
 8008b24:	3e10      	subs	r6, #16
 8008b26:	3308      	adds	r3, #8
 8008b28:	2e10      	cmp	r6, #16
 8008b2a:	f340 81c9 	ble.w	8008ec0 <_svfprintf_r+0x6b8>
 8008b2e:	3201      	adds	r2, #1
 8008b30:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
 8008b34:	3110      	adds	r1, #16
 8008b36:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008b3a:	2a07      	cmp	r2, #7
 8008b3c:	e883 0011 	stmia.w	r3, {r0, r4}
 8008b40:	9127      	str	r1, [sp, #156]	; 0x9c
 8008b42:	9226      	str	r2, [sp, #152]	; 0x98
 8008b44:	dddf      	ble.n	8008b06 <_svfprintf_r+0x2fe>
 8008b46:	4638      	mov	r0, r7
 8008b48:	4659      	mov	r1, fp
 8008b4a:	aa25      	add	r2, sp, #148	; 0x94
 8008b4c:	f004 feb8 	bl	800d8c0 <__ssprint_r>
 8008b50:	b9e8      	cbnz	r0, 8008b8e <_svfprintf_r+0x386>
 8008b52:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8008b54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b56:	ab32      	add	r3, sp, #200	; 0xc8
 8008b58:	e7d6      	b.n	8008b08 <_svfprintf_r+0x300>
 8008b5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008b5c:	9210      	str	r2, [sp, #64]	; 0x40
 8008b5e:	4267      	negs	r7, r4
 8008b60:	970d      	str	r7, [sp, #52]	; 0x34
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	f043 0204 	orr.w	r2, r3, #4
 8008b68:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6a:	f89a 8000 	ldrb.w	r8, [sl]
 8008b6e:	e6ac      	b.n	80088ca <_svfprintf_r+0xc2>
 8008b70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b72:	4659      	mov	r1, fp
 8008b74:	aa25      	add	r2, sp, #148	; 0x94
 8008b76:	f004 fea3 	bl	800d8c0 <__ssprint_r>
 8008b7a:	b940      	cbnz	r0, 8008b8e <_svfprintf_r+0x386>
 8008b7c:	ae32      	add	r6, sp, #200	; 0xc8
 8008b7e:	e68f      	b.n	80088a0 <_svfprintf_r+0x98>
 8008b80:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008b82:	b124      	cbz	r4, 8008b8e <_svfprintf_r+0x386>
 8008b84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b86:	4659      	mov	r1, fp
 8008b88:	aa25      	add	r2, sp, #148	; 0x94
 8008b8a:	f004 fe99 	bl	800d8c0 <__ssprint_r>
 8008b8e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 8008b92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008b94:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8008b98:	b21a      	sxth	r2, r3
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	bf18      	it	ne
 8008b9e:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	b043      	add	sp, #268	; 0x10c
 8008ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008baa:	4654      	mov	r4, sl
 8008bac:	e67b      	b.n	80088a6 <_svfprintf_r+0x9e>
 8008bae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bb0:	06cd      	lsls	r5, r1, #27
 8008bb2:	f100 8659 	bmi.w	8009868 <_svfprintf_r+0x1060>
 8008bb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008bb8:	0664      	lsls	r4, r4, #25
 8008bba:	f140 8655 	bpl.w	8009868 <_svfprintf_r+0x1060>
 8008bbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008bc0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8008bc4:	1d02      	adds	r2, r0, #4
 8008bc6:	17e5      	asrs	r5, r4, #31
 8008bc8:	9210      	str	r2, [sp, #64]	; 0x40
 8008bca:	462b      	mov	r3, r5
 8008bcc:	4622      	mov	r2, r4
 8008bce:	e71e      	b.n	8008a0e <_svfprintf_r+0x206>
 8008bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bd2:	1ddf      	adds	r7, r3, #7
 8008bd4:	f027 0207 	bic.w	r2, r7, #7
 8008bd8:	f102 0108 	add.w	r1, r2, #8
 8008bdc:	9110      	str	r1, [sp, #64]	; 0x40
 8008bde:	2300      	movs	r3, #0
 8008be0:	e9d2 4500 	ldrd	r4, r5, [r2]
 8008be4:	2000      	movs	r0, #0
 8008be6:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 8008bea:	e716      	b.n	8008a1a <_svfprintf_r+0x212>
 8008bec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008bee:	1def      	adds	r7, r5, #7
 8008bf0:	f027 0107 	bic.w	r1, r7, #7
 8008bf4:	680d      	ldr	r5, [r1, #0]
 8008bf6:	684c      	ldr	r4, [r1, #4]
 8008bf8:	3108      	adds	r1, #8
 8008bfa:	9110      	str	r1, [sp, #64]	; 0x40
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	4621      	mov	r1, r4
 8008c00:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8008c04:	4621      	mov	r1, r4
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7fe fa3c 	bl	8007084 <__fpclassifyd>
 8008c0c:	2801      	cmp	r0, #1
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f040 8740 	bne.w	8009a96 <_svfprintf_r+0x128e>
 8008c16:	2200      	movs	r2, #0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f7f7 fe1f 	bl	800085c <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f041 81f8 	bne.w	800a014 <_svfprintf_r+0x180c>
 8008c24:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8008c28:	2700      	movs	r7, #0
 8008c2a:	4a4b      	ldr	r2, [pc, #300]	; (8008d58 <_svfprintf_r+0x550>)
 8008c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c2e:	9712      	str	r7, [sp, #72]	; 0x48
 8008c30:	4f4a      	ldr	r7, [pc, #296]	; (8008d5c <_svfprintf_r+0x554>)
 8008c32:	2003      	movs	r0, #3
 8008c34:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c3a:	bfd8      	it	le
 8008c3c:	4617      	movle	r7, r2
 8008c3e:	f021 0480 	bic.w	r4, r1, #128	; 0x80
 8008c42:	2003      	movs	r0, #3
 8008c44:	2200      	movs	r2, #0
 8008c46:	9409      	str	r4, [sp, #36]	; 0x24
 8008c48:	900e      	str	r0, [sp, #56]	; 0x38
 8008c4a:	9215      	str	r2, [sp, #84]	; 0x54
 8008c4c:	e70d      	b.n	8008a6a <_svfprintf_r+0x262>
 8008c4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c52:	6817      	ldr	r7, [r2, #0]
 8008c54:	1d1a      	adds	r2, r3, #4
 8008c56:	2f00      	cmp	r7, #0
 8008c58:	970d      	str	r7, [sp, #52]	; 0x34
 8008c5a:	f6ff af7e 	blt.w	8008b5a <_svfprintf_r+0x352>
 8008c5e:	f89a 8000 	ldrb.w	r8, [sl]
 8008c62:	9210      	str	r2, [sp, #64]	; 0x40
 8008c64:	e631      	b.n	80088ca <_svfprintf_r+0xc2>
 8008c66:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
 8008c6a:	f89a 8000 	ldrb.w	r8, [sl]
 8008c6e:	e62c      	b.n	80088ca <_svfprintf_r+0xc2>
 8008c70:	4654      	mov	r4, sl
 8008c72:	f814 8b01 	ldrb.w	r8, [r4], #1
 8008c76:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8008c7a:	f001 82f4 	beq.w	800a266 <_svfprintf_r+0x1a5e>
 8008c7e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8008c82:	2200      	movs	r2, #0
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	f201 823e 	bhi.w	800a106 <_svfprintf_r+0x18fe>
 8008c8a:	f814 8b01 	ldrb.w	r8, [r4], #1
 8008c8e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8008c92:	eb03 0247 	add.w	r2, r3, r7, lsl #1
 8008c96:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8008c9a:	2b09      	cmp	r3, #9
 8008c9c:	46a2      	mov	sl, r4
 8008c9e:	d9f4      	bls.n	8008c8a <_svfprintf_r+0x482>
 8008ca0:	ea42 74e2 	orr.w	r4, r2, r2, asr #31
 8008ca4:	940a      	str	r4, [sp, #40]	; 0x28
 8008ca6:	e612      	b.n	80088ce <_svfprintf_r+0xc6>
 8008ca8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008caa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008cac:	6808      	ldr	r0, [r1, #0]
 8008cae:	2701      	movs	r7, #1
 8008cb0:	1d22      	adds	r2, r4, #4
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	970b      	str	r7, [sp, #44]	; 0x2c
 8008cb6:	970e      	str	r7, [sp, #56]	; 0x38
 8008cb8:	9210      	str	r2, [sp, #64]	; 0x40
 8008cba:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
 8008cbe:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 8008cc2:	af28      	add	r7, sp, #160	; 0xa0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9312      	str	r3, [sp, #72]	; 0x48
 8008cc8:	9315      	str	r3, [sp, #84]	; 0x54
 8008cca:	e6d2      	b.n	8008a72 <_svfprintf_r+0x26a>
 8008ccc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008cce:	f044 0308 	orr.w	r3, r4, #8
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	f89a 8000 	ldrb.w	r8, [sl]
 8008cd8:	e5f7      	b.n	80088ca <_svfprintf_r+0xc2>
 8008cda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cdc:	4d20      	ldr	r5, [pc, #128]	; (8008d60 <_svfprintf_r+0x558>)
 8008cde:	068f      	lsls	r7, r1, #26
 8008ce0:	9519      	str	r5, [sp, #100]	; 0x64
 8008ce2:	d548      	bpl.n	8008d76 <_svfprintf_r+0x56e>
 8008ce4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008ce6:	1dfa      	adds	r2, r7, #7
 8008ce8:	f022 0307 	bic.w	r3, r2, #7
 8008cec:	f103 0408 	add.w	r4, r3, #8
 8008cf0:	9410      	str	r4, [sp, #64]	; 0x40
 8008cf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf8:	07c8      	lsls	r0, r1, #31
 8008cfa:	f140 8444 	bpl.w	8009586 <_svfprintf_r+0xd7e>
 8008cfe:	ea54 0005 	orrs.w	r0, r4, r5
 8008d02:	f000 8440 	beq.w	8009586 <_svfprintf_r+0xd7e>
 8008d06:	2030      	movs	r0, #48	; 0x30
 8008d08:	f041 0702 	orr.w	r7, r1, #2
 8008d0c:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
 8008d10:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 8008d14:	9709      	str	r7, [sp, #36]	; 0x24
 8008d16:	2302      	movs	r3, #2
 8008d18:	e764      	b.n	8008be4 <_svfprintf_r+0x3dc>
 8008d1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d20:	1d07      	adds	r7, r0, #4
 8008d22:	4810      	ldr	r0, [pc, #64]	; (8008d64 <_svfprintf_r+0x55c>)
 8008d24:	f041 0302 	orr.w	r3, r1, #2
 8008d28:	f04f 0878 	mov.w	r8, #120	; 0x78
 8008d2c:	2230      	movs	r2, #48	; 0x30
 8008d2e:	682c      	ldr	r4, [r5, #0]
 8008d30:	9309      	str	r3, [sp, #36]	; 0x24
 8008d32:	9710      	str	r7, [sp, #64]	; 0x40
 8008d34:	2500      	movs	r5, #0
 8008d36:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
 8008d3a:	f88d 8075 	strb.w	r8, [sp, #117]	; 0x75
 8008d3e:	9019      	str	r0, [sp, #100]	; 0x64
 8008d40:	2302      	movs	r3, #2
 8008d42:	e74f      	b.n	8008be4 <_svfprintf_r+0x3dc>
 8008d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d46:	f043 0220 	orr.w	r2, r3, #32
 8008d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d4c:	f89a 8000 	ldrb.w	r8, [sl]
 8008d50:	e5bb      	b.n	80088ca <_svfprintf_r+0xc2>
 8008d52:	bf00      	nop
 8008d54:	0800dfe4 	.word	0x0800dfe4
 8008d58:	0800df90 	.word	0x0800df90
 8008d5c:	0800df94 	.word	0x0800df94
 8008d60:	0800dfa0 	.word	0x0800dfa0
 8008d64:	0800dfb4 	.word	0x0800dfb4
 8008d68:	0800dfd4 	.word	0x0800dfd4
 8008d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d6e:	4d9b      	ldr	r5, [pc, #620]	; (8008fdc <_svfprintf_r+0x7d4>)
 8008d70:	068f      	lsls	r7, r1, #26
 8008d72:	9519      	str	r5, [sp, #100]	; 0x64
 8008d74:	d4b6      	bmi.n	8008ce4 <_svfprintf_r+0x4dc>
 8008d76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d78:	06c5      	lsls	r5, r0, #27
 8008d7a:	f100 8592 	bmi.w	80098a2 <_svfprintf_r+0x109a>
 8008d7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d80:	067c      	lsls	r4, r7, #25
 8008d82:	f140 858e 	bpl.w	80098a2 <_svfprintf_r+0x109a>
 8008d86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d88:	2500      	movs	r5, #0
 8008d8a:	1d13      	adds	r3, r2, #4
 8008d8c:	8814      	ldrh	r4, [r2, #0]
 8008d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8008d90:	e7b1      	b.n	8008cf6 <_svfprintf_r+0x4ee>
 8008d92:	f1b8 0f00 	cmp.w	r8, #0
 8008d96:	f43f aef3 	beq.w	8008b80 <_svfprintf_r+0x378>
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2400      	movs	r4, #0
 8008d9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008da0:	f88d 80a0 	strb.w	r8, [sp, #160]	; 0xa0
 8008da4:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 8008da8:	920e      	str	r2, [sp, #56]	; 0x38
 8008daa:	af28      	add	r7, sp, #160	; 0xa0
 8008dac:	e78a      	b.n	8008cc4 <_svfprintf_r+0x4bc>
 8008dae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008db0:	2301      	movs	r3, #1
 8008db2:	1de0      	adds	r0, r4, #7
 8008db4:	f020 0507 	bic.w	r5, r0, #7
 8008db8:	f105 0708 	add.w	r7, r5, #8
 8008dbc:	9710      	str	r7, [sp, #64]	; 0x40
 8008dbe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dc2:	e70f      	b.n	8008be4 <_svfprintf_r+0x3dc>
 8008dc4:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f040 8695 	bne.w	8009af8 <_svfprintf_r+0x12f0>
 8008dce:	f88d 0073 	strb.w	r0, [sp, #115]	; 0x73
 8008dd2:	f89a 8000 	ldrb.w	r8, [sl]
 8008dd6:	e578      	b.n	80088ca <_svfprintf_r+0xc2>
 8008dd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008dda:	f044 0701 	orr.w	r7, r4, #1
 8008dde:	9709      	str	r7, [sp, #36]	; 0x24
 8008de0:	f89a 8000 	ldrb.w	r8, [sl]
 8008de4:	e571      	b.n	80088ca <_svfprintf_r+0xc2>
 8008de6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008de8:	f047 0380 	orr.w	r3, r7, #128	; 0x80
 8008dec:	9309      	str	r3, [sp, #36]	; 0x24
 8008dee:	f89a 8000 	ldrb.w	r8, [sl]
 8008df2:	e56a      	b.n	80088ca <_svfprintf_r+0xc2>
 8008df4:	4657      	mov	r7, sl
 8008df6:	2200      	movs	r2, #0
 8008df8:	f1a8 0530 	sub.w	r5, r8, #48	; 0x30
 8008dfc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8008e00:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8008e04:	f1a8 0430 	sub.w	r4, r8, #48	; 0x30
 8008e08:	2c09      	cmp	r4, #9
 8008e0a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8008e0e:	46ba      	mov	sl, r7
 8008e10:	d9f2      	bls.n	8008df8 <_svfprintf_r+0x5f0>
 8008e12:	920d      	str	r2, [sp, #52]	; 0x34
 8008e14:	e55b      	b.n	80088ce <_svfprintf_r+0xc6>
 8008e16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008e18:	06a4      	lsls	r4, r4, #26
 8008e1a:	f140 8661 	bpl.w	8009ae0 <_svfprintf_r+0x12d8>
 8008e1e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008e20:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	17c4      	asrs	r4, r0, #31
 8008e26:	3704      	adds	r7, #4
 8008e28:	6018      	str	r0, [r3, #0]
 8008e2a:	605c      	str	r4, [r3, #4]
 8008e2c:	9710      	str	r7, [sp, #64]	; 0x40
 8008e2e:	e515      	b.n	800885c <_svfprintf_r+0x54>
 8008e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	f89a 8000 	ldrb.w	r8, [sl]
 8008e3c:	e545      	b.n	80088ca <_svfprintf_r+0xc2>
 8008e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e40:	2400      	movs	r4, #0
 8008e42:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 8008e46:	681f      	ldr	r7, [r3, #0]
 8008e48:	1d1d      	adds	r5, r3, #4
 8008e4a:	2f00      	cmp	r7, #0
 8008e4c:	f001 80c5 	beq.w	8009fda <_svfprintf_r+0x17d2>
 8008e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e52:	4638      	mov	r0, r7
 8008e54:	2900      	cmp	r1, #0
 8008e56:	f2c1 8002 	blt.w	8009e5e <_svfprintf_r+0x1656>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e5e:	f003 fb11 	bl	800c484 <memchr>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f001 8142 	beq.w	800a0ec <_svfprintf_r+0x18e4>
 8008e68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e6a:	1bc0      	subs	r0, r0, r7
 8008e6c:	4288      	cmp	r0, r1
 8008e6e:	900e      	str	r0, [sp, #56]	; 0x38
 8008e70:	9412      	str	r4, [sp, #72]	; 0x48
 8008e72:	f340 87a6 	ble.w	8009dc2 <_svfprintf_r+0x15ba>
 8008e76:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e78:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 8008e7c:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e7e:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8008e82:	9510      	str	r5, [sp, #64]	; 0x40
 8008e84:	910e      	str	r1, [sp, #56]	; 0x38
 8008e86:	9015      	str	r0, [sp, #84]	; 0x54
 8008e88:	e5ef      	b.n	8008a6a <_svfprintf_r+0x262>
 8008e8a:	f89a 8000 	ldrb.w	r8, [sl]
 8008e8e:	4652      	mov	r2, sl
 8008e90:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8008e94:	f000 86de 	beq.w	8009c54 <_svfprintf_r+0x144c>
 8008e98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e9a:	f047 0310 	orr.w	r3, r7, #16
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea0:	e513      	b.n	80088ca <_svfprintf_r+0xc2>
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	4659      	mov	r1, fp
 8008ea6:	aa25      	add	r2, sp, #148	; 0x94
 8008ea8:	f004 fd0a 	bl	800d8c0 <__ssprint_r>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	f47f ae6e 	bne.w	8008b8e <_svfprintf_r+0x386>
 8008eb2:	3e10      	subs	r6, #16
 8008eb4:	2e10      	cmp	r6, #16
 8008eb6:	ab32      	add	r3, sp, #200	; 0xc8
 8008eb8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8008eba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ebc:	f73f ae37 	bgt.w	8008b2e <_svfprintf_r+0x326>
 8008ec0:	462f      	mov	r7, r5
 8008ec2:	4635      	mov	r5, r6
 8008ec4:	461e      	mov	r6, r3
 8008ec6:	194c      	adds	r4, r1, r5
 8008ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eca:	1c51      	adds	r1, r2, #1
 8008ecc:	2907      	cmp	r1, #7
 8008ece:	e886 0028 	stmia.w	r6, {r3, r5}
 8008ed2:	9427      	str	r4, [sp, #156]	; 0x9c
 8008ed4:	9126      	str	r1, [sp, #152]	; 0x98
 8008ed6:	f300 840f 	bgt.w	80096f8 <_svfprintf_r+0xef0>
 8008eda:	3608      	adds	r6, #8
 8008edc:	e000      	b.n	8008ee0 <_svfprintf_r+0x6d8>
 8008ede:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008ee0:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
 8008ee4:	b168      	cbz	r0, 8008f02 <_svfprintf_r+0x6fa>
 8008ee6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ee8:	3401      	adds	r4, #1
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	2001      	movs	r0, #1
 8008eee:	f10d 0273 	add.w	r2, sp, #115	; 0x73
 8008ef2:	2907      	cmp	r1, #7
 8008ef4:	6032      	str	r2, [r6, #0]
 8008ef6:	6070      	str	r0, [r6, #4]
 8008ef8:	9427      	str	r4, [sp, #156]	; 0x9c
 8008efa:	9126      	str	r1, [sp, #152]	; 0x98
 8008efc:	f300 8305 	bgt.w	800950a <_svfprintf_r+0xd02>
 8008f00:	3608      	adds	r6, #8
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	b163      	cbz	r3, 8008f20 <_svfprintf_r+0x718>
 8008f06:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008f08:	3402      	adds	r4, #2
 8008f0a:	1c48      	adds	r0, r1, #1
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	aa1d      	add	r2, sp, #116	; 0x74
 8008f10:	2807      	cmp	r0, #7
 8008f12:	6032      	str	r2, [r6, #0]
 8008f14:	6073      	str	r3, [r6, #4]
 8008f16:	9427      	str	r4, [sp, #156]	; 0x9c
 8008f18:	9026      	str	r0, [sp, #152]	; 0x98
 8008f1a:	f300 8301 	bgt.w	8009520 <_svfprintf_r+0xd18>
 8008f1e:	3608      	adds	r6, #8
 8008f20:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008f22:	2d80      	cmp	r5, #128	; 0x80
 8008f24:	f000 822e 	beq.w	8009384 <_svfprintf_r+0xb7c>
 8008f28:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f2c:	1aed      	subs	r5, r5, r3
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	dd75      	ble.n	800901e <_svfprintf_r+0x816>
 8008f32:	2d10      	cmp	r5, #16
 8008f34:	f340 85f3 	ble.w	8009b1e <_svfprintf_r+0x1316>
 8008f38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f3a:	2310      	movs	r3, #16
 8008f3c:	3201      	adds	r2, #1
 8008f3e:	4828      	ldr	r0, [pc, #160]	; (8008fe0 <_svfprintf_r+0x7d8>)
 8008f40:	f1a5 0e11 	sub.w	lr, r5, #17
 8008f44:	18e4      	adds	r4, r4, r3
 8008f46:	2a07      	cmp	r2, #7
 8008f48:	f8c6 9000 	str.w	r9, [r6]
 8008f4c:	6073      	str	r3, [r6, #4]
 8008f4e:	900a      	str	r0, [sp, #40]	; 0x28
 8008f50:	9427      	str	r4, [sp, #156]	; 0x9c
 8008f52:	9226      	str	r2, [sp, #152]	; 0x98
 8008f54:	f3ce 1c00 	ubfx	ip, lr, #4, #1
 8008f58:	f300 82ac 	bgt.w	80094b4 <_svfprintf_r+0xcac>
 8008f5c:	3608      	adds	r6, #8
 8008f5e:	3d10      	subs	r5, #16
 8008f60:	2d10      	cmp	r5, #16
 8008f62:	dd51      	ble.n	8009008 <_svfprintf_r+0x800>
 8008f64:	f1bc 0f00 	cmp.w	ip, #0
 8008f68:	d00d      	beq.n	8008f86 <_svfprintf_r+0x77e>
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	3410      	adds	r4, #16
 8008f6e:	2a07      	cmp	r2, #7
 8008f70:	f8c6 9000 	str.w	r9, [r6]
 8008f74:	6073      	str	r3, [r6, #4]
 8008f76:	9427      	str	r4, [sp, #156]	; 0x9c
 8008f78:	9226      	str	r2, [sp, #152]	; 0x98
 8008f7a:	f300 82ad 	bgt.w	80094d8 <_svfprintf_r+0xcd0>
 8008f7e:	3608      	adds	r6, #8
 8008f80:	3d10      	subs	r5, #16
 8008f82:	2d10      	cmp	r5, #16
 8008f84:	dd40      	ble.n	8009008 <_svfprintf_r+0x800>
 8008f86:	4631      	mov	r1, r6
 8008f88:	463e      	mov	r6, r7
 8008f8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008f8c:	e00e      	b.n	8008fac <_svfprintf_r+0x7a4>
 8008f8e:	3108      	adds	r1, #8
 8008f90:	3201      	adds	r2, #1
 8008f92:	3410      	adds	r4, #16
 8008f94:	3d10      	subs	r5, #16
 8008f96:	2a07      	cmp	r2, #7
 8008f98:	f8c1 9000 	str.w	r9, [r1]
 8008f9c:	604b      	str	r3, [r1, #4]
 8008f9e:	9226      	str	r2, [sp, #152]	; 0x98
 8008fa0:	9427      	str	r4, [sp, #156]	; 0x9c
 8008fa2:	dc1f      	bgt.n	8008fe4 <_svfprintf_r+0x7dc>
 8008fa4:	3d10      	subs	r5, #16
 8008fa6:	3108      	adds	r1, #8
 8008fa8:	2d10      	cmp	r5, #16
 8008faa:	dd2b      	ble.n	8009004 <_svfprintf_r+0x7fc>
 8008fac:	3201      	adds	r2, #1
 8008fae:	3410      	adds	r4, #16
 8008fb0:	2a07      	cmp	r2, #7
 8008fb2:	f8c1 9000 	str.w	r9, [r1]
 8008fb6:	604b      	str	r3, [r1, #4]
 8008fb8:	9427      	str	r4, [sp, #156]	; 0x9c
 8008fba:	9226      	str	r2, [sp, #152]	; 0x98
 8008fbc:	dde7      	ble.n	8008f8e <_svfprintf_r+0x786>
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	aa25      	add	r2, sp, #148	; 0x94
 8008fc4:	9306      	str	r3, [sp, #24]
 8008fc6:	f004 fc7b 	bl	800d8c0 <__ssprint_r>
 8008fca:	9b06      	ldr	r3, [sp, #24]
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f47f adde 	bne.w	8008b8e <_svfprintf_r+0x386>
 8008fd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008fd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008fd6:	a932      	add	r1, sp, #200	; 0xc8
 8008fd8:	e7da      	b.n	8008f90 <_svfprintf_r+0x788>
 8008fda:	bf00      	nop
 8008fdc:	0800dfb4 	.word	0x0800dfb4
 8008fe0:	0800dfd4 	.word	0x0800dfd4
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	4659      	mov	r1, fp
 8008fe8:	aa25      	add	r2, sp, #148	; 0x94
 8008fea:	9306      	str	r3, [sp, #24]
 8008fec:	f004 fc68 	bl	800d8c0 <__ssprint_r>
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f47f adcb 	bne.w	8008b8e <_svfprintf_r+0x386>
 8008ff8:	3d10      	subs	r5, #16
 8008ffa:	2d10      	cmp	r5, #16
 8008ffc:	a932      	add	r1, sp, #200	; 0xc8
 8008ffe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009000:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009002:	dcd3      	bgt.n	8008fac <_svfprintf_r+0x7a4>
 8009004:	4637      	mov	r7, r6
 8009006:	460e      	mov	r6, r1
 8009008:	1c50      	adds	r0, r2, #1
 800900a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800900c:	1964      	adds	r4, r4, r5
 800900e:	2807      	cmp	r0, #7
 8009010:	e886 0028 	stmia.w	r6, {r3, r5}
 8009014:	9427      	str	r4, [sp, #156]	; 0x9c
 8009016:	9026      	str	r0, [sp, #152]	; 0x98
 8009018:	f300 826c 	bgt.w	80094f4 <_svfprintf_r+0xcec>
 800901c:	3608      	adds	r6, #8
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	05db      	lsls	r3, r3, #23
 8009022:	f100 811e 	bmi.w	8009262 <_svfprintf_r+0xa5a>
 8009026:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800902a:	6037      	str	r7, [r6, #0]
 800902c:	1c41      	adds	r1, r0, #1
 800902e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009030:	18a4      	adds	r4, r4, r2
 8009032:	2907      	cmp	r1, #7
 8009034:	6077      	str	r7, [r6, #4]
 8009036:	9427      	str	r4, [sp, #156]	; 0x9c
 8009038:	9126      	str	r1, [sp, #152]	; 0x98
 800903a:	f300 80a8 	bgt.w	800918e <_svfprintf_r+0x986>
 800903e:	3608      	adds	r6, #8
 8009040:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009042:	077b      	lsls	r3, r7, #29
 8009044:	f140 80b1 	bpl.w	80091aa <_svfprintf_r+0x9a2>
 8009048:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800904a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800904c:	1aed      	subs	r5, r5, r3
 800904e:	2d00      	cmp	r5, #0
 8009050:	f340 80ab 	ble.w	80091aa <_svfprintf_r+0x9a2>
 8009054:	2d10      	cmp	r5, #16
 8009056:	f340 87cc 	ble.w	8009ff2 <_svfprintf_r+0x17ea>
 800905a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800905c:	2710      	movs	r7, #16
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	49b2      	ldr	r1, [pc, #712]	; (800932c <_svfprintf_r+0xb24>)
 8009062:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
 8009066:	f1a5 0c11 	sub.w	ip, r5, #17
 800906a:	19e4      	adds	r4, r4, r7
 800906c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009070:	2b07      	cmp	r3, #7
 8009072:	e886 0081 	stmia.w	r6, {r0, r7}
 8009076:	9109      	str	r1, [sp, #36]	; 0x24
 8009078:	9427      	str	r4, [sp, #156]	; 0x9c
 800907a:	9326      	str	r3, [sp, #152]	; 0x98
 800907c:	f3cc 1800 	ubfx	r8, ip, #4, #1
 8009080:	f300 83bb 	bgt.w	80097fa <_svfprintf_r+0xff2>
 8009084:	3608      	adds	r6, #8
 8009086:	3d10      	subs	r5, #16
 8009088:	2d10      	cmp	r5, #16
 800908a:	f340 80ad 	ble.w	80091e8 <_svfprintf_r+0x9e0>
 800908e:	f1b8 0f00 	cmp.w	r8, #0
 8009092:	d011      	beq.n	80090b8 <_svfprintf_r+0x8b0>
 8009094:	3301      	adds	r3, #1
 8009096:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
 800909a:	3410      	adds	r4, #16
 800909c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80090a0:	2b07      	cmp	r3, #7
 80090a2:	e886 0081 	stmia.w	r6, {r0, r7}
 80090a6:	9427      	str	r4, [sp, #156]	; 0x9c
 80090a8:	9326      	str	r3, [sp, #152]	; 0x98
 80090aa:	f300 83d1 	bgt.w	8009850 <_svfprintf_r+0x1048>
 80090ae:	3608      	adds	r6, #8
 80090b0:	3d10      	subs	r5, #16
 80090b2:	2d10      	cmp	r5, #16
 80090b4:	f340 8098 	ble.w	80091e8 <_svfprintf_r+0x9e0>
 80090b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80090bc:	e012      	b.n	80090e4 <_svfprintf_r+0x8dc>
 80090be:	3608      	adds	r6, #8
 80090c0:	3301      	adds	r3, #1
 80090c2:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
 80090c6:	3410      	adds	r4, #16
 80090c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80090cc:	3d10      	subs	r5, #16
 80090ce:	2b07      	cmp	r3, #7
 80090d0:	e886 0081 	stmia.w	r6, {r0, r7}
 80090d4:	9326      	str	r3, [sp, #152]	; 0x98
 80090d6:	9427      	str	r4, [sp, #156]	; 0x9c
 80090d8:	dc77      	bgt.n	80091ca <_svfprintf_r+0x9c2>
 80090da:	3d10      	subs	r5, #16
 80090dc:	3608      	adds	r6, #8
 80090de:	2d10      	cmp	r5, #16
 80090e0:	f340 8082 	ble.w	80091e8 <_svfprintf_r+0x9e0>
 80090e4:	3301      	adds	r3, #1
 80090e6:	f64d 72e4 	movw	r2, #57316	; 0xdfe4
 80090ea:	3410      	adds	r4, #16
 80090ec:	f6c0 0200 	movt	r2, #2048	; 0x800
 80090f0:	2b07      	cmp	r3, #7
 80090f2:	e886 0084 	stmia.w	r6, {r2, r7}
 80090f6:	9427      	str	r4, [sp, #156]	; 0x9c
 80090f8:	9326      	str	r3, [sp, #152]	; 0x98
 80090fa:	dde0      	ble.n	80090be <_svfprintf_r+0x8b6>
 80090fc:	4640      	mov	r0, r8
 80090fe:	4659      	mov	r1, fp
 8009100:	aa25      	add	r2, sp, #148	; 0x94
 8009102:	f004 fbdd 	bl	800d8c0 <__ssprint_r>
 8009106:	2800      	cmp	r0, #0
 8009108:	f47f ad41 	bne.w	8008b8e <_svfprintf_r+0x386>
 800910c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800910e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009110:	ae32      	add	r6, sp, #200	; 0xc8
 8009112:	e7d5      	b.n	80090c0 <_svfprintf_r+0x8b8>
 8009114:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009116:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009118:	3401      	adds	r4, #1
 800911a:	3501      	adds	r5, #1
 800911c:	2901      	cmp	r1, #1
 800911e:	f340 8479 	ble.w	8009a14 <_svfprintf_r+0x120c>
 8009122:	2301      	movs	r3, #1
 8009124:	2d07      	cmp	r5, #7
 8009126:	6037      	str	r7, [r6, #0]
 8009128:	6073      	str	r3, [r6, #4]
 800912a:	9427      	str	r4, [sp, #156]	; 0x9c
 800912c:	9526      	str	r5, [sp, #152]	; 0x98
 800912e:	f300 8487 	bgt.w	8009a40 <_svfprintf_r+0x1238>
 8009132:	3608      	adds	r6, #8
 8009134:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009136:	3501      	adds	r5, #1
 8009138:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800913a:	1864      	adds	r4, r4, r1
 800913c:	2d07      	cmp	r5, #7
 800913e:	6032      	str	r2, [r6, #0]
 8009140:	6071      	str	r1, [r6, #4]
 8009142:	9427      	str	r4, [sp, #156]	; 0x9c
 8009144:	9526      	str	r5, [sp, #152]	; 0x98
 8009146:	f300 8488 	bgt.w	8009a5a <_svfprintf_r+0x1252>
 800914a:	3608      	adds	r6, #8
 800914c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8009150:	2200      	movs	r2, #0
 8009152:	2300      	movs	r3, #0
 8009154:	f7f7 fb78 	bl	8000848 <__aeabi_dcmpeq>
 8009158:	2800      	cmp	r0, #0
 800915a:	f040 82d9 	bne.w	8009710 <_svfprintf_r+0xf08>
 800915e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009160:	3701      	adds	r7, #1
 8009162:	3801      	subs	r0, #1
 8009164:	1824      	adds	r4, r4, r0
 8009166:	3501      	adds	r5, #1
 8009168:	6037      	str	r7, [r6, #0]
 800916a:	2d07      	cmp	r5, #7
 800916c:	6070      	str	r0, [r6, #4]
 800916e:	9427      	str	r4, [sp, #156]	; 0x9c
 8009170:	9526      	str	r5, [sp, #152]	; 0x98
 8009172:	f300 8189 	bgt.w	8009488 <_svfprintf_r+0xc80>
 8009176:	3608      	adds	r6, #8
 8009178:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800917a:	3501      	adds	r5, #1
 800917c:	19e4      	adds	r4, r4, r7
 800917e:	ab21      	add	r3, sp, #132	; 0x84
 8009180:	2d07      	cmp	r5, #7
 8009182:	e886 0088 	stmia.w	r6, {r3, r7}
 8009186:	9427      	str	r4, [sp, #156]	; 0x9c
 8009188:	9526      	str	r5, [sp, #152]	; 0x98
 800918a:	f77f af58 	ble.w	800903e <_svfprintf_r+0x836>
 800918e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009190:	4659      	mov	r1, fp
 8009192:	aa25      	add	r2, sp, #148	; 0x94
 8009194:	f004 fb94 	bl	800d8c0 <__ssprint_r>
 8009198:	2800      	cmp	r0, #0
 800919a:	f47f acf8 	bne.w	8008b8e <_svfprintf_r+0x386>
 800919e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091a0:	ae32      	add	r6, sp, #200	; 0xc8
 80091a2:	077b      	lsls	r3, r7, #29
 80091a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80091a6:	f53f af4f 	bmi.w	8009048 <_svfprintf_r+0x840>
 80091aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80091ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80091ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80091b0:	42b8      	cmp	r0, r7
 80091b2:	bfac      	ite	ge
 80091b4:	1836      	addge	r6, r6, r0
 80091b6:	19f6      	addlt	r6, r6, r7
 80091b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80091ba:	2c00      	cmp	r4, #0
 80091bc:	f040 8170 	bne.w	80094a0 <_svfprintf_r+0xc98>
 80091c0:	2600      	movs	r6, #0
 80091c2:	9626      	str	r6, [sp, #152]	; 0x98
 80091c4:	ae32      	add	r6, sp, #200	; 0xc8
 80091c6:	f7ff bb49 	b.w	800885c <_svfprintf_r+0x54>
 80091ca:	4640      	mov	r0, r8
 80091cc:	4659      	mov	r1, fp
 80091ce:	aa25      	add	r2, sp, #148	; 0x94
 80091d0:	f004 fb76 	bl	800d8c0 <__ssprint_r>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	f47f acda 	bne.w	8008b8e <_svfprintf_r+0x386>
 80091da:	3d10      	subs	r5, #16
 80091dc:	2d10      	cmp	r5, #16
 80091de:	ae32      	add	r6, sp, #200	; 0xc8
 80091e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80091e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091e4:	f73f af7e 	bgt.w	80090e4 <_svfprintf_r+0x8dc>
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091ec:	192c      	adds	r4, r5, r4
 80091ee:	2a07      	cmp	r2, #7
 80091f0:	6037      	str	r7, [r6, #0]
 80091f2:	6075      	str	r5, [r6, #4]
 80091f4:	9427      	str	r4, [sp, #156]	; 0x9c
 80091f6:	9226      	str	r2, [sp, #152]	; 0x98
 80091f8:	ddd7      	ble.n	80091aa <_svfprintf_r+0x9a2>
 80091fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80091fc:	4659      	mov	r1, fp
 80091fe:	aa25      	add	r2, sp, #148	; 0x94
 8009200:	f004 fb5e 	bl	800d8c0 <__ssprint_r>
 8009204:	2800      	cmp	r0, #0
 8009206:	f47f acc2 	bne.w	8008b8e <_svfprintf_r+0x386>
 800920a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800920c:	e7cd      	b.n	80091aa <_svfprintf_r+0x9a2>
 800920e:	2b01      	cmp	r3, #1
 8009210:	f000 81ab 	beq.w	800956a <_svfprintf_r+0xd62>
 8009214:	2b02      	cmp	r3, #2
 8009216:	f10d 0ec7 	add.w	lr, sp, #199	; 0xc7
 800921a:	f000 818c 	beq.w	8009536 <_svfprintf_r+0xd2e>
 800921e:	2307      	movs	r3, #7
 8009220:	08e7      	lsrs	r7, r4, #3
 8009222:	ea04 0003 	and.w	r0, r4, r3
 8009226:	08e9      	lsrs	r1, r5, #3
 8009228:	ea47 7445 	orr.w	r4, r7, r5, lsl #29
 800922c:	3030      	adds	r0, #48	; 0x30
 800922e:	460d      	mov	r5, r1
 8009230:	b2c2      	uxtb	r2, r0
 8009232:	ea54 0105 	orrs.w	r1, r4, r5
 8009236:	4677      	mov	r7, lr
 8009238:	f88e 2000 	strb.w	r2, [lr]
 800923c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8009240:	d1ee      	bne.n	8009220 <_svfprintf_r+0xa18>
 8009242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009244:	463b      	mov	r3, r7
 8009246:	07c1      	lsls	r1, r0, #31
 8009248:	d506      	bpl.n	8009258 <_svfprintf_r+0xa50>
 800924a:	2a30      	cmp	r2, #48	; 0x30
 800924c:	f000 8196 	beq.w	800957c <_svfprintf_r+0xd74>
 8009250:	2430      	movs	r4, #48	; 0x30
 8009252:	4677      	mov	r7, lr
 8009254:	f803 4c01 	strb.w	r4, [r3, #-1]
 8009258:	9908      	ldr	r1, [sp, #32]
 800925a:	1bca      	subs	r2, r1, r7
 800925c:	920e      	str	r2, [sp, #56]	; 0x38
 800925e:	f7ff bbf9 	b.w	8008a54 <_svfprintf_r+0x24c>
 8009262:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009266:	f77f af55 	ble.w	8009114 <_svfprintf_r+0x90c>
 800926a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800926e:	2200      	movs	r2, #0
 8009270:	2300      	movs	r3, #0
 8009272:	f7f7 fae9 	bl	8000848 <__aeabi_dcmpeq>
 8009276:	2800      	cmp	r0, #0
 8009278:	f000 81b2 	beq.w	80095e0 <_svfprintf_r+0xdd8>
 800927c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800927e:	492c      	ldr	r1, [pc, #176]	; (8009330 <_svfprintf_r+0xb28>)
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	3401      	adds	r4, #1
 8009284:	2201      	movs	r2, #1
 8009286:	2b07      	cmp	r3, #7
 8009288:	6031      	str	r1, [r6, #0]
 800928a:	6072      	str	r2, [r6, #4]
 800928c:	9427      	str	r4, [sp, #156]	; 0x9c
 800928e:	9326      	str	r3, [sp, #152]	; 0x98
 8009290:	f300 844a 	bgt.w	8009b28 <_svfprintf_r+0x1320>
 8009294:	3608      	adds	r6, #8
 8009296:	981e      	ldr	r0, [sp, #120]	; 0x78
 8009298:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800929a:	42b8      	cmp	r0, r7
 800929c:	db03      	blt.n	80092a6 <_svfprintf_r+0xa9e>
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	07df      	lsls	r7, r3, #31
 80092a2:	f57f aecd 	bpl.w	8009040 <_svfprintf_r+0x838>
 80092a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092a8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80092aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092ac:	6037      	str	r7, [r6, #0]
 80092ae:	1c50      	adds	r0, r2, #1
 80092b0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80092b2:	1864      	adds	r4, r4, r1
 80092b4:	2807      	cmp	r0, #7
 80092b6:	6077      	str	r7, [r6, #4]
 80092b8:	9427      	str	r4, [sp, #156]	; 0x9c
 80092ba:	9026      	str	r0, [sp, #152]	; 0x98
 80092bc:	f300 8575 	bgt.w	8009daa <_svfprintf_r+0x15a2>
 80092c0:	3608      	adds	r6, #8
 80092c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80092c4:	3d01      	subs	r5, #1
 80092c6:	2d00      	cmp	r5, #0
 80092c8:	f77f aeba 	ble.w	8009040 <_svfprintf_r+0x838>
 80092cc:	2d10      	cmp	r5, #16
 80092ce:	f340 8286 	ble.w	80097de <_svfprintf_r+0xfd6>
 80092d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092d6:	2710      	movs	r7, #16
 80092d8:	f1a3 0e12 	sub.w	lr, r3, #18
 80092dc:	4815      	ldr	r0, [pc, #84]	; (8009334 <_svfprintf_r+0xb2c>)
 80092de:	1c53      	adds	r3, r2, #1
 80092e0:	19e4      	adds	r4, r4, r7
 80092e2:	2b07      	cmp	r3, #7
 80092e4:	f8c6 9000 	str.w	r9, [r6]
 80092e8:	6077      	str	r7, [r6, #4]
 80092ea:	900a      	str	r0, [sp, #40]	; 0x28
 80092ec:	9427      	str	r4, [sp, #156]	; 0x9c
 80092ee:	9326      	str	r3, [sp, #152]	; 0x98
 80092f0:	f3ce 1800 	ubfx	r8, lr, #4, #1
 80092f4:	f300 8617 	bgt.w	8009f26 <_svfprintf_r+0x171e>
 80092f8:	3608      	adds	r6, #8
 80092fa:	3d10      	subs	r5, #16
 80092fc:	2d10      	cmp	r5, #16
 80092fe:	f340 8271 	ble.w	80097e4 <_svfprintf_r+0xfdc>
 8009302:	f1b8 0f00 	cmp.w	r8, #0
 8009306:	d00e      	beq.n	8009326 <_svfprintf_r+0xb1e>
 8009308:	3301      	adds	r3, #1
 800930a:	3410      	adds	r4, #16
 800930c:	2b07      	cmp	r3, #7
 800930e:	f8c6 9000 	str.w	r9, [r6]
 8009312:	6077      	str	r7, [r6, #4]
 8009314:	9427      	str	r4, [sp, #156]	; 0x9c
 8009316:	9326      	str	r3, [sp, #152]	; 0x98
 8009318:	f300 862b 	bgt.w	8009f72 <_svfprintf_r+0x176a>
 800931c:	3608      	adds	r6, #8
 800931e:	3d10      	subs	r5, #16
 8009320:	2d10      	cmp	r5, #16
 8009322:	f340 825f 	ble.w	80097e4 <_svfprintf_r+0xfdc>
 8009326:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800932a:	e016      	b.n	800935a <_svfprintf_r+0xb52>
 800932c:	0800dfe4 	.word	0x0800dfe4
 8009330:	0800dfd0 	.word	0x0800dfd0
 8009334:	0800dfd4 	.word	0x0800dfd4
 8009338:	3608      	adds	r6, #8
 800933a:	1c4b      	adds	r3, r1, #1
 800933c:	3410      	adds	r4, #16
 800933e:	3d10      	subs	r5, #16
 8009340:	2b07      	cmp	r3, #7
 8009342:	f8c6 9000 	str.w	r9, [r6]
 8009346:	6077      	str	r7, [r6, #4]
 8009348:	9326      	str	r3, [sp, #152]	; 0x98
 800934a:	9427      	str	r4, [sp, #156]	; 0x9c
 800934c:	f300 811e 	bgt.w	800958c <_svfprintf_r+0xd84>
 8009350:	3608      	adds	r6, #8
 8009352:	3d10      	subs	r5, #16
 8009354:	2d10      	cmp	r5, #16
 8009356:	f340 8245 	ble.w	80097e4 <_svfprintf_r+0xfdc>
 800935a:	1c59      	adds	r1, r3, #1
 800935c:	3410      	adds	r4, #16
 800935e:	2907      	cmp	r1, #7
 8009360:	f8c6 9000 	str.w	r9, [r6]
 8009364:	6077      	str	r7, [r6, #4]
 8009366:	9427      	str	r4, [sp, #156]	; 0x9c
 8009368:	9126      	str	r1, [sp, #152]	; 0x98
 800936a:	dde5      	ble.n	8009338 <_svfprintf_r+0xb30>
 800936c:	4640      	mov	r0, r8
 800936e:	4659      	mov	r1, fp
 8009370:	aa25      	add	r2, sp, #148	; 0x94
 8009372:	f004 faa5 	bl	800d8c0 <__ssprint_r>
 8009376:	2800      	cmp	r0, #0
 8009378:	f47f ac09 	bne.w	8008b8e <_svfprintf_r+0x386>
 800937c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800937e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009380:	ae32      	add	r6, sp, #200	; 0xc8
 8009382:	e7da      	b.n	800933a <_svfprintf_r+0xb32>
 8009384:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009386:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009388:	1a45      	subs	r5, r0, r1
 800938a:	2d00      	cmp	r5, #0
 800938c:	f77f adcc 	ble.w	8008f28 <_svfprintf_r+0x720>
 8009390:	2d10      	cmp	r5, #16
 8009392:	f340 8688 	ble.w	800a0a6 <_svfprintf_r+0x189e>
 8009396:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009398:	2310      	movs	r3, #16
 800939a:	3201      	adds	r2, #1
 800939c:	488f      	ldr	r0, [pc, #572]	; (80095dc <_svfprintf_r+0xdd4>)
 800939e:	f1a5 0111 	sub.w	r1, r5, #17
 80093a2:	18e4      	adds	r4, r4, r3
 80093a4:	2a07      	cmp	r2, #7
 80093a6:	f8c6 9000 	str.w	r9, [r6]
 80093aa:	6073      	str	r3, [r6, #4]
 80093ac:	900a      	str	r0, [sp, #40]	; 0x28
 80093ae:	9427      	str	r4, [sp, #156]	; 0x9c
 80093b0:	9226      	str	r2, [sp, #152]	; 0x98
 80093b2:	f3c1 1c00 	ubfx	ip, r1, #4, #1
 80093b6:	f300 831b 	bgt.w	80099f0 <_svfprintf_r+0x11e8>
 80093ba:	3608      	adds	r6, #8
 80093bc:	3d10      	subs	r5, #16
 80093be:	2d10      	cmp	r5, #16
 80093c0:	dd4a      	ble.n	8009458 <_svfprintf_r+0xc50>
 80093c2:	f1bc 0f00 	cmp.w	ip, #0
 80093c6:	d00d      	beq.n	80093e4 <_svfprintf_r+0xbdc>
 80093c8:	3201      	adds	r2, #1
 80093ca:	3410      	adds	r4, #16
 80093cc:	2a07      	cmp	r2, #7
 80093ce:	f8c6 9000 	str.w	r9, [r6]
 80093d2:	6073      	str	r3, [r6, #4]
 80093d4:	9427      	str	r4, [sp, #156]	; 0x9c
 80093d6:	9226      	str	r2, [sp, #152]	; 0x98
 80093d8:	f300 8324 	bgt.w	8009a24 <_svfprintf_r+0x121c>
 80093dc:	3608      	adds	r6, #8
 80093de:	3d10      	subs	r5, #16
 80093e0:	2d10      	cmp	r5, #16
 80093e2:	dd39      	ble.n	8009458 <_svfprintf_r+0xc50>
 80093e4:	4621      	mov	r1, r4
 80093e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80093e8:	e00e      	b.n	8009408 <_svfprintf_r+0xc00>
 80093ea:	3608      	adds	r6, #8
 80093ec:	3201      	adds	r2, #1
 80093ee:	3110      	adds	r1, #16
 80093f0:	3d10      	subs	r5, #16
 80093f2:	2a07      	cmp	r2, #7
 80093f4:	f8c6 9000 	str.w	r9, [r6]
 80093f8:	6073      	str	r3, [r6, #4]
 80093fa:	9226      	str	r2, [sp, #152]	; 0x98
 80093fc:	9127      	str	r1, [sp, #156]	; 0x9c
 80093fe:	dc1a      	bgt.n	8009436 <_svfprintf_r+0xc2e>
 8009400:	3d10      	subs	r5, #16
 8009402:	3608      	adds	r6, #8
 8009404:	2d10      	cmp	r5, #16
 8009406:	dd26      	ble.n	8009456 <_svfprintf_r+0xc4e>
 8009408:	3201      	adds	r2, #1
 800940a:	3110      	adds	r1, #16
 800940c:	2a07      	cmp	r2, #7
 800940e:	f8c6 9000 	str.w	r9, [r6]
 8009412:	6073      	str	r3, [r6, #4]
 8009414:	9127      	str	r1, [sp, #156]	; 0x9c
 8009416:	9226      	str	r2, [sp, #152]	; 0x98
 8009418:	dde7      	ble.n	80093ea <_svfprintf_r+0xbe2>
 800941a:	4620      	mov	r0, r4
 800941c:	4659      	mov	r1, fp
 800941e:	aa25      	add	r2, sp, #148	; 0x94
 8009420:	9306      	str	r3, [sp, #24]
 8009422:	f004 fa4d 	bl	800d8c0 <__ssprint_r>
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	2800      	cmp	r0, #0
 800942a:	f47f abb0 	bne.w	8008b8e <_svfprintf_r+0x386>
 800942e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009430:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009432:	ae32      	add	r6, sp, #200	; 0xc8
 8009434:	e7da      	b.n	80093ec <_svfprintf_r+0xbe4>
 8009436:	4620      	mov	r0, r4
 8009438:	4659      	mov	r1, fp
 800943a:	aa25      	add	r2, sp, #148	; 0x94
 800943c:	9306      	str	r3, [sp, #24]
 800943e:	f004 fa3f 	bl	800d8c0 <__ssprint_r>
 8009442:	9b06      	ldr	r3, [sp, #24]
 8009444:	2800      	cmp	r0, #0
 8009446:	f47f aba2 	bne.w	8008b8e <_svfprintf_r+0x386>
 800944a:	3d10      	subs	r5, #16
 800944c:	2d10      	cmp	r5, #16
 800944e:	ae32      	add	r6, sp, #200	; 0xc8
 8009450:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009452:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009454:	dcd8      	bgt.n	8009408 <_svfprintf_r+0xc00>
 8009456:	460c      	mov	r4, r1
 8009458:	1c50      	adds	r0, r2, #1
 800945a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800945c:	1964      	adds	r4, r4, r5
 800945e:	2807      	cmp	r0, #7
 8009460:	e886 0028 	stmia.w	r6, {r3, r5}
 8009464:	9427      	str	r4, [sp, #156]	; 0x9c
 8009466:	9026      	str	r0, [sp, #152]	; 0x98
 8009468:	f300 8309 	bgt.w	8009a7e <_svfprintf_r+0x1276>
 800946c:	3608      	adds	r6, #8
 800946e:	e55b      	b.n	8008f28 <_svfprintf_r+0x720>
 8009470:	485a      	ldr	r0, [pc, #360]	; (80095dc <_svfprintf_r+0xdd4>)
 8009472:	900a      	str	r0, [sp, #40]	; 0x28
 8009474:	3501      	adds	r5, #1
 8009476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009478:	19e4      	adds	r4, r4, r7
 800947a:	2d07      	cmp	r5, #7
 800947c:	e886 0088 	stmia.w	r6, {r3, r7}
 8009480:	9427      	str	r4, [sp, #156]	; 0x9c
 8009482:	9526      	str	r5, [sp, #152]	; 0x98
 8009484:	f77f ae77 	ble.w	8009176 <_svfprintf_r+0x96e>
 8009488:	980c      	ldr	r0, [sp, #48]	; 0x30
 800948a:	4659      	mov	r1, fp
 800948c:	aa25      	add	r2, sp, #148	; 0x94
 800948e:	f004 fa17 	bl	800d8c0 <__ssprint_r>
 8009492:	2800      	cmp	r0, #0
 8009494:	f47f ab7b 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009498:	ae32      	add	r6, sp, #200	; 0xc8
 800949a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800949c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800949e:	e66b      	b.n	8009178 <_svfprintf_r+0x970>
 80094a0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094a2:	4659      	mov	r1, fp
 80094a4:	aa25      	add	r2, sp, #148	; 0x94
 80094a6:	f004 fa0b 	bl	800d8c0 <__ssprint_r>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f43f ae88 	beq.w	80091c0 <_svfprintf_r+0x9b8>
 80094b0:	f7ff bb6d 	b.w	8008b8e <_svfprintf_r+0x386>
 80094b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094b6:	4659      	mov	r1, fp
 80094b8:	aa25      	add	r2, sp, #148	; 0x94
 80094ba:	9306      	str	r3, [sp, #24]
 80094bc:	f8cd c01c 	str.w	ip, [sp, #28]
 80094c0:	f004 f9fe 	bl	800d8c0 <__ssprint_r>
 80094c4:	9b06      	ldr	r3, [sp, #24]
 80094c6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f47f ab5f 	bne.w	8008b8e <_svfprintf_r+0x386>
 80094d0:	ae32      	add	r6, sp, #200	; 0xc8
 80094d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80094d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094d6:	e542      	b.n	8008f5e <_svfprintf_r+0x756>
 80094d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094da:	4659      	mov	r1, fp
 80094dc:	aa25      	add	r2, sp, #148	; 0x94
 80094de:	9306      	str	r3, [sp, #24]
 80094e0:	f004 f9ee 	bl	800d8c0 <__ssprint_r>
 80094e4:	9b06      	ldr	r3, [sp, #24]
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f47f ab51 	bne.w	8008b8e <_svfprintf_r+0x386>
 80094ec:	ae32      	add	r6, sp, #200	; 0xc8
 80094ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80094f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094f2:	e545      	b.n	8008f80 <_svfprintf_r+0x778>
 80094f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094f6:	4659      	mov	r1, fp
 80094f8:	aa25      	add	r2, sp, #148	; 0x94
 80094fa:	f004 f9e1 	bl	800d8c0 <__ssprint_r>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f47f ab45 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009504:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009506:	ae32      	add	r6, sp, #200	; 0xc8
 8009508:	e589      	b.n	800901e <_svfprintf_r+0x816>
 800950a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800950c:	4659      	mov	r1, fp
 800950e:	aa25      	add	r2, sp, #148	; 0x94
 8009510:	f004 f9d6 	bl	800d8c0 <__ssprint_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	f47f ab3a 	bne.w	8008b8e <_svfprintf_r+0x386>
 800951a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800951c:	ae32      	add	r6, sp, #200	; 0xc8
 800951e:	e4f0      	b.n	8008f02 <_svfprintf_r+0x6fa>
 8009520:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009522:	4659      	mov	r1, fp
 8009524:	aa25      	add	r2, sp, #148	; 0x94
 8009526:	f004 f9cb 	bl	800d8c0 <__ssprint_r>
 800952a:	2800      	cmp	r0, #0
 800952c:	f47f ab2f 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009530:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009532:	ae32      	add	r6, sp, #200	; 0xc8
 8009534:	e4f4      	b.n	8008f20 <_svfprintf_r+0x718>
 8009536:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009538:	960b      	str	r6, [sp, #44]	; 0x2c
 800953a:	260f      	movs	r6, #15
 800953c:	ea04 0306 	and.w	r3, r4, r6
 8009540:	0927      	lsrs	r7, r4, #4
 8009542:	0928      	lsrs	r0, r5, #4
 8009544:	18ca      	adds	r2, r1, r3
 8009546:	ea47 7405 	orr.w	r4, r7, r5, lsl #28
 800954a:	7816      	ldrb	r6, [r2, #0]
 800954c:	4605      	mov	r5, r0
 800954e:	ea54 0005 	orrs.w	r0, r4, r5
 8009552:	4677      	mov	r7, lr
 8009554:	f88e 6000 	strb.w	r6, [lr]
 8009558:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800955c:	d1ed      	bne.n	800953a <_svfprintf_r+0xd32>
 800955e:	9908      	ldr	r1, [sp, #32]
 8009560:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009562:	1bcb      	subs	r3, r1, r7
 8009564:	930e      	str	r3, [sp, #56]	; 0x38
 8009566:	f7ff ba75 	b.w	8008a54 <_svfprintf_r+0x24c>
 800956a:	2d00      	cmp	r5, #0
 800956c:	bf08      	it	eq
 800956e:	2c0a      	cmpeq	r4, #10
 8009570:	f080 814f 	bcs.w	8009812 <_svfprintf_r+0x100a>
 8009574:	af42      	add	r7, sp, #264	; 0x108
 8009576:	3430      	adds	r4, #48	; 0x30
 8009578:	f807 4d41 	strb.w	r4, [r7, #-65]!
 800957c:	9c08      	ldr	r4, [sp, #32]
 800957e:	1be2      	subs	r2, r4, r7
 8009580:	920e      	str	r2, [sp, #56]	; 0x38
 8009582:	f7ff ba67 	b.w	8008a54 <_svfprintf_r+0x24c>
 8009586:	2302      	movs	r3, #2
 8009588:	f7ff bb2c 	b.w	8008be4 <_svfprintf_r+0x3dc>
 800958c:	4640      	mov	r0, r8
 800958e:	4659      	mov	r1, fp
 8009590:	aa25      	add	r2, sp, #148	; 0x94
 8009592:	f004 f995 	bl	800d8c0 <__ssprint_r>
 8009596:	2800      	cmp	r0, #0
 8009598:	f47f aaf9 	bne.w	8008b8e <_svfprintf_r+0x386>
 800959c:	ae32      	add	r6, sp, #200	; 0xc8
 800959e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80095a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095a2:	e6d6      	b.n	8009352 <_svfprintf_r+0xb4a>
 80095a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095a6:	4659      	mov	r1, fp
 80095a8:	aa25      	add	r2, sp, #148	; 0x94
 80095aa:	9306      	str	r3, [sp, #24]
 80095ac:	f004 f988 	bl	800d8c0 <__ssprint_r>
 80095b0:	9b06      	ldr	r3, [sp, #24]
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f47f aaeb 	bne.w	8008b8e <_svfprintf_r+0x386>
 80095b8:	ae32      	add	r6, sp, #200	; 0xc8
 80095ba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80095bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095be:	f7ff ba86 	b.w	8008ace <_svfprintf_r+0x2c6>
 80095c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095c4:	4659      	mov	r1, fp
 80095c6:	aa25      	add	r2, sp, #148	; 0x94
 80095c8:	f004 f97a 	bl	800d8c0 <__ssprint_r>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f47f aade 	bne.w	8008b8e <_svfprintf_r+0x386>
 80095d2:	ae32      	add	r6, sp, #200	; 0xc8
 80095d4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80095d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095d8:	f7ff ba8c 	b.w	8008af4 <_svfprintf_r+0x2ec>
 80095dc:	0800dfd4 	.word	0x0800dfd4
 80095e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	f340 82b2 	ble.w	8009b4c <_svfprintf_r+0x1344>
 80095e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80095ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 80095ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095ee:	428d      	cmp	r5, r1
 80095f0:	bfa8      	it	ge
 80095f2:	460d      	movge	r5, r1
 80095f4:	18fa      	adds	r2, r7, r3
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	920a      	str	r2, [sp, #40]	; 0x28
 80095fa:	dd0a      	ble.n	8009612 <_svfprintf_r+0xe0a>
 80095fc:	9826      	ldr	r0, [sp, #152]	; 0x98
 80095fe:	1964      	adds	r4, r4, r5
 8009600:	1c41      	adds	r1, r0, #1
 8009602:	2907      	cmp	r1, #7
 8009604:	6037      	str	r7, [r6, #0]
 8009606:	6075      	str	r5, [r6, #4]
 8009608:	9427      	str	r4, [sp, #156]	; 0x9c
 800960a:	9126      	str	r1, [sp, #152]	; 0x98
 800960c:	f300 847f 	bgt.w	8009f0e <_svfprintf_r+0x1706>
 8009610:	3608      	adds	r6, #8
 8009612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009614:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8009618:	1b5d      	subs	r5, r3, r5
 800961a:	2d00      	cmp	r5, #0
 800961c:	f340 8156 	ble.w	80098cc <_svfprintf_r+0x10c4>
 8009620:	2d10      	cmp	r5, #16
 8009622:	f340 826d 	ble.w	8009b00 <_svfprintf_r+0x12f8>
 8009626:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009628:	f04f 0810 	mov.w	r8, #16
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	4aa1      	ldr	r2, [pc, #644]	; (80098b4 <_svfprintf_r+0x10ac>)
 8009630:	f1a5 0111 	sub.w	r1, r5, #17
 8009634:	4444      	add	r4, r8
 8009636:	2b07      	cmp	r3, #7
 8009638:	f8c6 9000 	str.w	r9, [r6]
 800963c:	f8c6 8004 	str.w	r8, [r6, #4]
 8009640:	920e      	str	r2, [sp, #56]	; 0x38
 8009642:	9427      	str	r4, [sp, #156]	; 0x9c
 8009644:	9326      	str	r3, [sp, #152]	; 0x98
 8009646:	f3c1 1c00 	ubfx	ip, r1, #4, #1
 800964a:	f300 844f 	bgt.w	8009eec <_svfprintf_r+0x16e4>
 800964e:	3608      	adds	r6, #8
 8009650:	3d10      	subs	r5, #16
 8009652:	2d10      	cmp	r5, #16
 8009654:	f340 8257 	ble.w	8009b06 <_svfprintf_r+0x12fe>
 8009658:	f1bc 0f00 	cmp.w	ip, #0
 800965c:	d00f      	beq.n	800967e <_svfprintf_r+0xe76>
 800965e:	3301      	adds	r3, #1
 8009660:	3410      	adds	r4, #16
 8009662:	2b07      	cmp	r3, #7
 8009664:	f8c6 9000 	str.w	r9, [r6]
 8009668:	f8c6 8004 	str.w	r8, [r6, #4]
 800966c:	9427      	str	r4, [sp, #156]	; 0x9c
 800966e:	9326      	str	r3, [sp, #152]	; 0x98
 8009670:	f300 848c 	bgt.w	8009f8c <_svfprintf_r+0x1784>
 8009674:	3608      	adds	r6, #8
 8009676:	3d10      	subs	r5, #16
 8009678:	2d10      	cmp	r5, #16
 800967a:	f340 8244 	ble.w	8009b06 <_svfprintf_r+0x12fe>
 800967e:	4621      	mov	r1, r4
 8009680:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009682:	e012      	b.n	80096aa <_svfprintf_r+0xea2>
 8009684:	f106 0008 	add.w	r0, r6, #8
 8009688:	3301      	adds	r3, #1
 800968a:	3110      	adds	r1, #16
 800968c:	3d10      	subs	r5, #16
 800968e:	2b07      	cmp	r3, #7
 8009690:	f8c0 9000 	str.w	r9, [r0]
 8009694:	f8c0 8004 	str.w	r8, [r0, #4]
 8009698:	9326      	str	r3, [sp, #152]	; 0x98
 800969a:	9127      	str	r1, [sp, #156]	; 0x9c
 800969c:	dc1b      	bgt.n	80096d6 <_svfprintf_r+0xece>
 800969e:	f100 0608 	add.w	r6, r0, #8
 80096a2:	3d10      	subs	r5, #16
 80096a4:	2d10      	cmp	r5, #16
 80096a6:	f340 840d 	ble.w	8009ec4 <_svfprintf_r+0x16bc>
 80096aa:	3301      	adds	r3, #1
 80096ac:	3110      	adds	r1, #16
 80096ae:	2b07      	cmp	r3, #7
 80096b0:	f8c6 9000 	str.w	r9, [r6]
 80096b4:	f8c6 8004 	str.w	r8, [r6, #4]
 80096b8:	9127      	str	r1, [sp, #156]	; 0x9c
 80096ba:	9326      	str	r3, [sp, #152]	; 0x98
 80096bc:	dde2      	ble.n	8009684 <_svfprintf_r+0xe7c>
 80096be:	4620      	mov	r0, r4
 80096c0:	4659      	mov	r1, fp
 80096c2:	aa25      	add	r2, sp, #148	; 0x94
 80096c4:	f004 f8fc 	bl	800d8c0 <__ssprint_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	f47f aa60 	bne.w	8008b8e <_svfprintf_r+0x386>
 80096ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80096d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096d2:	a832      	add	r0, sp, #200	; 0xc8
 80096d4:	e7d8      	b.n	8009688 <_svfprintf_r+0xe80>
 80096d6:	4620      	mov	r0, r4
 80096d8:	4659      	mov	r1, fp
 80096da:	aa25      	add	r2, sp, #148	; 0x94
 80096dc:	f004 f8f0 	bl	800d8c0 <__ssprint_r>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	f47f aa54 	bne.w	8008b8e <_svfprintf_r+0x386>
 80096e6:	ae32      	add	r6, sp, #200	; 0xc8
 80096e8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80096ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096ec:	e7d9      	b.n	80096a2 <_svfprintf_r+0xe9a>
 80096ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80096f0:	af32      	add	r7, sp, #200	; 0xc8
 80096f2:	940e      	str	r4, [sp, #56]	; 0x38
 80096f4:	f7ff b9ae 	b.w	8008a54 <_svfprintf_r+0x24c>
 80096f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096fa:	4659      	mov	r1, fp
 80096fc:	aa25      	add	r2, sp, #148	; 0x94
 80096fe:	f004 f8df 	bl	800d8c0 <__ssprint_r>
 8009702:	2800      	cmp	r0, #0
 8009704:	f47f aa43 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009708:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800970a:	ae32      	add	r6, sp, #200	; 0xc8
 800970c:	f7ff bbe8 	b.w	8008ee0 <_svfprintf_r+0x6d8>
 8009710:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009712:	3f01      	subs	r7, #1
 8009714:	2f00      	cmp	r7, #0
 8009716:	f77f ad2f 	ble.w	8009178 <_svfprintf_r+0x970>
 800971a:	2f10      	cmp	r7, #16
 800971c:	f77f aea8 	ble.w	8009470 <_svfprintf_r+0xc68>
 8009720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009722:	f04f 0810 	mov.w	r8, #16
 8009726:	3501      	adds	r5, #1
 8009728:	4962      	ldr	r1, [pc, #392]	; (80098b4 <_svfprintf_r+0x10ac>)
 800972a:	3b12      	subs	r3, #18
 800972c:	4444      	add	r4, r8
 800972e:	2d07      	cmp	r5, #7
 8009730:	f8c6 9000 	str.w	r9, [r6]
 8009734:	f8c6 8004 	str.w	r8, [r6, #4]
 8009738:	910a      	str	r1, [sp, #40]	; 0x28
 800973a:	9427      	str	r4, [sp, #156]	; 0x9c
 800973c:	9526      	str	r5, [sp, #152]	; 0x98
 800973e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009742:	f300 83b1 	bgt.w	8009ea8 <_svfprintf_r+0x16a0>
 8009746:	3608      	adds	r6, #8
 8009748:	3f10      	subs	r7, #16
 800974a:	2f10      	cmp	r7, #16
 800974c:	f77f ae92 	ble.w	8009474 <_svfprintf_r+0xc6c>
 8009750:	b17b      	cbz	r3, 8009772 <_svfprintf_r+0xf6a>
 8009752:	3501      	adds	r5, #1
 8009754:	3410      	adds	r4, #16
 8009756:	2d07      	cmp	r5, #7
 8009758:	f8c6 9000 	str.w	r9, [r6]
 800975c:	f8c6 8004 	str.w	r8, [r6, #4]
 8009760:	9427      	str	r4, [sp, #156]	; 0x9c
 8009762:	9526      	str	r5, [sp, #152]	; 0x98
 8009764:	f300 83b6 	bgt.w	8009ed4 <_svfprintf_r+0x16cc>
 8009768:	3608      	adds	r6, #8
 800976a:	3f10      	subs	r7, #16
 800976c:	2f10      	cmp	r7, #16
 800976e:	f77f ae81 	ble.w	8009474 <_svfprintf_r+0xc6c>
 8009772:	4622      	mov	r2, r4
 8009774:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009776:	e010      	b.n	800979a <_svfprintf_r+0xf92>
 8009778:	3608      	adds	r6, #8
 800977a:	3501      	adds	r5, #1
 800977c:	3210      	adds	r2, #16
 800977e:	3f10      	subs	r7, #16
 8009780:	2d07      	cmp	r5, #7
 8009782:	f8c6 9000 	str.w	r9, [r6]
 8009786:	f8c6 8004 	str.w	r8, [r6, #4]
 800978a:	9227      	str	r2, [sp, #156]	; 0x9c
 800978c:	9526      	str	r5, [sp, #152]	; 0x98
 800978e:	dc1a      	bgt.n	80097c6 <_svfprintf_r+0xfbe>
 8009790:	3608      	adds	r6, #8
 8009792:	3f10      	subs	r7, #16
 8009794:	2f10      	cmp	r7, #16
 8009796:	f340 835f 	ble.w	8009e58 <_svfprintf_r+0x1650>
 800979a:	3501      	adds	r5, #1
 800979c:	3210      	adds	r2, #16
 800979e:	2d07      	cmp	r5, #7
 80097a0:	f8c6 9000 	str.w	r9, [r6]
 80097a4:	f8c6 8004 	str.w	r8, [r6, #4]
 80097a8:	9227      	str	r2, [sp, #156]	; 0x9c
 80097aa:	9526      	str	r5, [sp, #152]	; 0x98
 80097ac:	dde4      	ble.n	8009778 <_svfprintf_r+0xf70>
 80097ae:	4620      	mov	r0, r4
 80097b0:	4659      	mov	r1, fp
 80097b2:	aa25      	add	r2, sp, #148	; 0x94
 80097b4:	f004 f884 	bl	800d8c0 <__ssprint_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f47f a9e8 	bne.w	8008b8e <_svfprintf_r+0x386>
 80097be:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80097c0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80097c2:	ae32      	add	r6, sp, #200	; 0xc8
 80097c4:	e7d9      	b.n	800977a <_svfprintf_r+0xf72>
 80097c6:	4620      	mov	r0, r4
 80097c8:	4659      	mov	r1, fp
 80097ca:	aa25      	add	r2, sp, #148	; 0x94
 80097cc:	f004 f878 	bl	800d8c0 <__ssprint_r>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f47f a9dc 	bne.w	8008b8e <_svfprintf_r+0x386>
 80097d6:	ae32      	add	r6, sp, #200	; 0xc8
 80097d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80097da:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80097dc:	e7d9      	b.n	8009792 <_svfprintf_r+0xf8a>
 80097de:	4935      	ldr	r1, [pc, #212]	; (80098b4 <_svfprintf_r+0x10ac>)
 80097e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097e2:	910a      	str	r1, [sp, #40]	; 0x28
 80097e4:	3301      	adds	r3, #1
 80097e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80097e8:	1964      	adds	r4, r4, r5
 80097ea:	2b07      	cmp	r3, #7
 80097ec:	6037      	str	r7, [r6, #0]
 80097ee:	6075      	str	r5, [r6, #4]
 80097f0:	9427      	str	r4, [sp, #156]	; 0x9c
 80097f2:	9326      	str	r3, [sp, #152]	; 0x98
 80097f4:	f77f ac23 	ble.w	800903e <_svfprintf_r+0x836>
 80097f8:	e4c9      	b.n	800918e <_svfprintf_r+0x986>
 80097fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80097fc:	4659      	mov	r1, fp
 80097fe:	aa25      	add	r2, sp, #148	; 0x94
 8009800:	f004 f85e 	bl	800d8c0 <__ssprint_r>
 8009804:	2800      	cmp	r0, #0
 8009806:	f47f a9c2 	bne.w	8008b8e <_svfprintf_r+0x386>
 800980a:	ae32      	add	r6, sp, #200	; 0xc8
 800980c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800980e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009810:	e439      	b.n	8009086 <_svfprintf_r+0x87e>
 8009812:	f10d 0cc7 	add.w	ip, sp, #199	; 0xc7
 8009816:	960b      	str	r6, [sp, #44]	; 0x2c
 8009818:	4666      	mov	r6, ip
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	220a      	movs	r2, #10
 8009820:	2300      	movs	r3, #0
 8009822:	f7f7 f8db 	bl	80009dc <__aeabi_uldivmod>
 8009826:	3230      	adds	r2, #48	; 0x30
 8009828:	7032      	strb	r2, [r6, #0]
 800982a:	4620      	mov	r0, r4
 800982c:	4629      	mov	r1, r5
 800982e:	220a      	movs	r2, #10
 8009830:	2300      	movs	r3, #0
 8009832:	f7f7 f8d3 	bl	80009dc <__aeabi_uldivmod>
 8009836:	4604      	mov	r4, r0
 8009838:	460d      	mov	r5, r1
 800983a:	4637      	mov	r7, r6
 800983c:	3e01      	subs	r6, #1
 800983e:	ea54 0005 	orrs.w	r0, r4, r5
 8009842:	d1ea      	bne.n	800981a <_svfprintf_r+0x1012>
 8009844:	9908      	ldr	r1, [sp, #32]
 8009846:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009848:	1bcb      	subs	r3, r1, r7
 800984a:	930e      	str	r3, [sp, #56]	; 0x38
 800984c:	f7ff b902 	b.w	8008a54 <_svfprintf_r+0x24c>
 8009850:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009852:	4659      	mov	r1, fp
 8009854:	aa25      	add	r2, sp, #148	; 0x94
 8009856:	f004 f833 	bl	800d8c0 <__ssprint_r>
 800985a:	2800      	cmp	r0, #0
 800985c:	f47f a997 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009860:	ae32      	add	r6, sp, #200	; 0xc8
 8009862:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009864:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009866:	e423      	b.n	80090b0 <_svfprintf_r+0x8a8>
 8009868:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	1d29      	adds	r1, r5, #4
 800986e:	17dd      	asrs	r5, r3, #31
 8009870:	461a      	mov	r2, r3
 8009872:	461c      	mov	r4, r3
 8009874:	462b      	mov	r3, r5
 8009876:	2a00      	cmp	r2, #0
 8009878:	f173 0000 	sbcs.w	r0, r3, #0
 800987c:	9110      	str	r1, [sp, #64]	; 0x40
 800987e:	f6bf a8cb 	bge.w	8008a18 <_svfprintf_r+0x210>
 8009882:	222d      	movs	r2, #45	; 0x2d
 8009884:	4264      	negs	r4, r4
 8009886:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800988a:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800988e:	2301      	movs	r3, #1
 8009890:	f7ff b8c3 	b.w	8008a1a <_svfprintf_r+0x212>
 8009894:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009896:	1d0d      	adds	r5, r1, #4
 8009898:	680c      	ldr	r4, [r1, #0]
 800989a:	9510      	str	r5, [sp, #64]	; 0x40
 800989c:	2500      	movs	r5, #0
 800989e:	f7ff b9a1 	b.w	8008be4 <_svfprintf_r+0x3dc>
 80098a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80098a4:	6825      	ldr	r5, [r4, #0]
 80098a6:	1d20      	adds	r0, r4, #4
 80098a8:	9010      	str	r0, [sp, #64]	; 0x40
 80098aa:	462c      	mov	r4, r5
 80098ac:	2500      	movs	r5, #0
 80098ae:	f7ff ba22 	b.w	8008cf6 <_svfprintf_r+0x4ee>
 80098b2:	bf00      	nop
 80098b4:	0800dfd4 	.word	0x0800dfd4
 80098b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098ba:	4659      	mov	r1, fp
 80098bc:	aa25      	add	r2, sp, #148	; 0x94
 80098be:	f003 ffff 	bl	800d8c0 <__ssprint_r>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f47f a963 	bne.w	8008b8e <_svfprintf_r+0x386>
 80098c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80098ca:	ae32      	add	r6, sp, #200	; 0xc8
 80098cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80098d0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80098d2:	4283      	cmp	r3, r0
 80098d4:	440f      	add	r7, r1
 80098d6:	db70      	blt.n	80099ba <_svfprintf_r+0x11b2>
 80098d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098da:	07d1      	lsls	r1, r2, #31
 80098dc:	d46d      	bmi.n	80099ba <_svfprintf_r+0x11b2>
 80098de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80098e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098e2:	1bed      	subs	r5, r5, r7
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	42ab      	cmp	r3, r5
 80098e8:	bfb8      	it	lt
 80098ea:	461d      	movlt	r5, r3
 80098ec:	2d00      	cmp	r5, #0
 80098ee:	dd0a      	ble.n	8009906 <_svfprintf_r+0x10fe>
 80098f0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80098f2:	1964      	adds	r4, r4, r5
 80098f4:	1c48      	adds	r0, r1, #1
 80098f6:	2807      	cmp	r0, #7
 80098f8:	6037      	str	r7, [r6, #0]
 80098fa:	6075      	str	r5, [r6, #4]
 80098fc:	9427      	str	r4, [sp, #156]	; 0x9c
 80098fe:	9026      	str	r0, [sp, #152]	; 0x98
 8009900:	f300 835d 	bgt.w	8009fbe <_svfprintf_r+0x17b6>
 8009904:	3608      	adds	r6, #8
 8009906:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800990a:	1b5d      	subs	r5, r3, r5
 800990c:	2d00      	cmp	r5, #0
 800990e:	f77f ab97 	ble.w	8009040 <_svfprintf_r+0x838>
 8009912:	2d10      	cmp	r5, #16
 8009914:	f77f af63 	ble.w	80097de <_svfprintf_r+0xfd6>
 8009918:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800991a:	2710      	movs	r7, #16
 800991c:	1c53      	adds	r3, r2, #1
 800991e:	4988      	ldr	r1, [pc, #544]	; (8009b40 <_svfprintf_r+0x1338>)
 8009920:	f1a5 0811 	sub.w	r8, r5, #17
 8009924:	19e4      	adds	r4, r4, r7
 8009926:	2b07      	cmp	r3, #7
 8009928:	f8c6 9000 	str.w	r9, [r6]
 800992c:	6077      	str	r7, [r6, #4]
 800992e:	910a      	str	r1, [sp, #40]	; 0x28
 8009930:	9427      	str	r4, [sp, #156]	; 0x9c
 8009932:	9326      	str	r3, [sp, #152]	; 0x98
 8009934:	f3c8 1800 	ubfx	r8, r8, #4, #1
 8009938:	f300 8335 	bgt.w	8009fa6 <_svfprintf_r+0x179e>
 800993c:	3608      	adds	r6, #8
 800993e:	3d10      	subs	r5, #16
 8009940:	2d10      	cmp	r5, #16
 8009942:	f77f af4f 	ble.w	80097e4 <_svfprintf_r+0xfdc>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	d00e      	beq.n	800996a <_svfprintf_r+0x1162>
 800994c:	3301      	adds	r3, #1
 800994e:	3410      	adds	r4, #16
 8009950:	2b07      	cmp	r3, #7
 8009952:	f8c6 9000 	str.w	r9, [r6]
 8009956:	6077      	str	r7, [r6, #4]
 8009958:	9427      	str	r4, [sp, #156]	; 0x9c
 800995a:	9326      	str	r3, [sp, #152]	; 0x98
 800995c:	f300 834e 	bgt.w	8009ffc <_svfprintf_r+0x17f4>
 8009960:	3608      	adds	r6, #8
 8009962:	3d10      	subs	r5, #16
 8009964:	2d10      	cmp	r5, #16
 8009966:	f77f af3d 	ble.w	80097e4 <_svfprintf_r+0xfdc>
 800996a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800996e:	e00f      	b.n	8009990 <_svfprintf_r+0x1188>
 8009970:	3608      	adds	r6, #8
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	3410      	adds	r4, #16
 8009976:	3d10      	subs	r5, #16
 8009978:	2b07      	cmp	r3, #7
 800997a:	f8c6 9000 	str.w	r9, [r6]
 800997e:	6077      	str	r7, [r6, #4]
 8009980:	9326      	str	r3, [sp, #152]	; 0x98
 8009982:	9427      	str	r4, [sp, #156]	; 0x9c
 8009984:	dc28      	bgt.n	80099d8 <_svfprintf_r+0x11d0>
 8009986:	3608      	adds	r6, #8
 8009988:	3d10      	subs	r5, #16
 800998a:	2d10      	cmp	r5, #16
 800998c:	f77f af2a 	ble.w	80097e4 <_svfprintf_r+0xfdc>
 8009990:	1c58      	adds	r0, r3, #1
 8009992:	3410      	adds	r4, #16
 8009994:	2807      	cmp	r0, #7
 8009996:	f8c6 9000 	str.w	r9, [r6]
 800999a:	6077      	str	r7, [r6, #4]
 800999c:	9427      	str	r4, [sp, #156]	; 0x9c
 800999e:	9026      	str	r0, [sp, #152]	; 0x98
 80099a0:	dde6      	ble.n	8009970 <_svfprintf_r+0x1168>
 80099a2:	4640      	mov	r0, r8
 80099a4:	4659      	mov	r1, fp
 80099a6:	aa25      	add	r2, sp, #148	; 0x94
 80099a8:	f003 ff8a 	bl	800d8c0 <__ssprint_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f47f a8ee 	bne.w	8008b8e <_svfprintf_r+0x386>
 80099b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80099b4:	9826      	ldr	r0, [sp, #152]	; 0x98
 80099b6:	ae32      	add	r6, sp, #200	; 0xc8
 80099b8:	e7db      	b.n	8009972 <_svfprintf_r+0x116a>
 80099ba:	9826      	ldr	r0, [sp, #152]	; 0x98
 80099bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099be:	1c42      	adds	r2, r0, #1
 80099c0:	1864      	adds	r4, r4, r1
 80099c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80099c4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80099c6:	2a07      	cmp	r2, #7
 80099c8:	6031      	str	r1, [r6, #0]
 80099ca:	6070      	str	r0, [r6, #4]
 80099cc:	9427      	str	r4, [sp, #156]	; 0x9c
 80099ce:	9226      	str	r2, [sp, #152]	; 0x98
 80099d0:	f300 82b6 	bgt.w	8009f40 <_svfprintf_r+0x1738>
 80099d4:	3608      	adds	r6, #8
 80099d6:	e782      	b.n	80098de <_svfprintf_r+0x10d6>
 80099d8:	4640      	mov	r0, r8
 80099da:	4659      	mov	r1, fp
 80099dc:	aa25      	add	r2, sp, #148	; 0x94
 80099de:	f003 ff6f 	bl	800d8c0 <__ssprint_r>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f47f a8d3 	bne.w	8008b8e <_svfprintf_r+0x386>
 80099e8:	ae32      	add	r6, sp, #200	; 0xc8
 80099ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80099ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099ee:	e7cb      	b.n	8009988 <_svfprintf_r+0x1180>
 80099f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80099f2:	4659      	mov	r1, fp
 80099f4:	aa25      	add	r2, sp, #148	; 0x94
 80099f6:	9306      	str	r3, [sp, #24]
 80099f8:	f8cd c01c 	str.w	ip, [sp, #28]
 80099fc:	f003 ff60 	bl	800d8c0 <__ssprint_r>
 8009a00:	9b06      	ldr	r3, [sp, #24]
 8009a02:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f47f a8c1 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009a0c:	ae32      	add	r6, sp, #200	; 0xc8
 8009a0e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009a10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a12:	e4d3      	b.n	80093bc <_svfprintf_r+0xbb4>
 8009a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a16:	07d2      	lsls	r2, r2, #31
 8009a18:	f53f ab83 	bmi.w	8009122 <_svfprintf_r+0x91a>
 8009a1c:	6037      	str	r7, [r6, #0]
 8009a1e:	2001      	movs	r0, #1
 8009a20:	f7ff bba3 	b.w	800916a <_svfprintf_r+0x962>
 8009a24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a26:	4659      	mov	r1, fp
 8009a28:	aa25      	add	r2, sp, #148	; 0x94
 8009a2a:	9306      	str	r3, [sp, #24]
 8009a2c:	f003 ff48 	bl	800d8c0 <__ssprint_r>
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	2800      	cmp	r0, #0
 8009a34:	f47f a8ab 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009a38:	ae32      	add	r6, sp, #200	; 0xc8
 8009a3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009a3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009a3e:	e4ce      	b.n	80093de <_svfprintf_r+0xbd6>
 8009a40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a42:	4659      	mov	r1, fp
 8009a44:	aa25      	add	r2, sp, #148	; 0x94
 8009a46:	f003 ff3b 	bl	800d8c0 <__ssprint_r>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f47f a89f 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009a50:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009a52:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009a54:	ae32      	add	r6, sp, #200	; 0xc8
 8009a56:	f7ff bb6d 	b.w	8009134 <_svfprintf_r+0x92c>
 8009a5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a5c:	4659      	mov	r1, fp
 8009a5e:	aa25      	add	r2, sp, #148	; 0x94
 8009a60:	f003 ff2e 	bl	800d8c0 <__ssprint_r>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	f47f a892 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009a6a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009a6c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009a6e:	ae32      	add	r6, sp, #200	; 0xc8
 8009a70:	f7ff bb6c 	b.w	800914c <_svfprintf_r+0x944>
 8009a74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009a76:	970e      	str	r7, [sp, #56]	; 0x38
 8009a78:	af32      	add	r7, sp, #200	; 0xc8
 8009a7a:	f7fe bfeb 	b.w	8008a54 <_svfprintf_r+0x24c>
 8009a7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a80:	4659      	mov	r1, fp
 8009a82:	aa25      	add	r2, sp, #148	; 0x94
 8009a84:	f003 ff1c 	bl	800d8c0 <__ssprint_r>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f47f a880 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009a8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009a90:	ae32      	add	r6, sp, #200	; 0xc8
 8009a92:	f7ff ba49 	b.w	8008f28 <_svfprintf_r+0x720>
 8009a96:	f7fd faf5 	bl	8007084 <__fpclassifyd>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f040 80e4 	bne.w	8009c68 <_svfprintf_r+0x1460>
 8009aa0:	2703      	movs	r7, #3
 8009aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aa4:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <_svfprintf_r+0x133c>)
 8009aa6:	970b      	str	r7, [sp, #44]	; 0x2c
 8009aa8:	4f27      	ldr	r7, [pc, #156]	; (8009b48 <_svfprintf_r+0x1340>)
 8009aaa:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8009aae:	2403      	movs	r4, #3
 8009ab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ab4:	bfd8      	it	le
 8009ab6:	461f      	movle	r7, r3
 8009ab8:	9012      	str	r0, [sp, #72]	; 0x48
 8009aba:	9109      	str	r1, [sp, #36]	; 0x24
 8009abc:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8009ac0:	940e      	str	r4, [sp, #56]	; 0x38
 8009ac2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ac4:	f7fe bfd1 	b.w	8008a6a <_svfprintf_r+0x262>
 8009ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aca:	064b      	lsls	r3, r1, #25
 8009acc:	f140 81b2 	bpl.w	8009e34 <_svfprintf_r+0x162c>
 8009ad0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	1d11      	adds	r1, r2, #4
 8009ad6:	8814      	ldrh	r4, [r2, #0]
 8009ad8:	2500      	movs	r5, #0
 8009ada:	9110      	str	r1, [sp, #64]	; 0x40
 8009adc:	f7ff b882 	b.w	8008be4 <_svfprintf_r+0x3dc>
 8009ae0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ae2:	06f8      	lsls	r0, r7, #27
 8009ae4:	f140 81ab 	bpl.w	8009e3e <_svfprintf_r+0x1636>
 8009ae8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009aea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aec:	6821      	ldr	r1, [r4, #0]
 8009aee:	1d27      	adds	r7, r4, #4
 8009af0:	9710      	str	r7, [sp, #64]	; 0x40
 8009af2:	600a      	str	r2, [r1, #0]
 8009af4:	f7fe beb2 	b.w	800885c <_svfprintf_r+0x54>
 8009af8:	f89a 8000 	ldrb.w	r8, [sl]
 8009afc:	f7fe bee5 	b.w	80088ca <_svfprintf_r+0xc2>
 8009b00:	4a0f      	ldr	r2, [pc, #60]	; (8009b40 <_svfprintf_r+0x1338>)
 8009b02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b04:	920e      	str	r2, [sp, #56]	; 0x38
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009b0a:	1964      	adds	r4, r4, r5
 8009b0c:	2a07      	cmp	r2, #7
 8009b0e:	e886 0022 	stmia.w	r6, {r1, r5}
 8009b12:	9427      	str	r4, [sp, #156]	; 0x9c
 8009b14:	9226      	str	r2, [sp, #152]	; 0x98
 8009b16:	f73f aecf 	bgt.w	80098b8 <_svfprintf_r+0x10b0>
 8009b1a:	3608      	adds	r6, #8
 8009b1c:	e6d6      	b.n	80098cc <_svfprintf_r+0x10c4>
 8009b1e:	4908      	ldr	r1, [pc, #32]	; (8009b40 <_svfprintf_r+0x1338>)
 8009b20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b22:	910a      	str	r1, [sp, #40]	; 0x28
 8009b24:	f7ff ba70 	b.w	8009008 <_svfprintf_r+0x800>
 8009b28:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b2a:	4659      	mov	r1, fp
 8009b2c:	aa25      	add	r2, sp, #148	; 0x94
 8009b2e:	f003 fec7 	bl	800d8c0 <__ssprint_r>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f47f a82b 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009b38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009b3a:	ae32      	add	r6, sp, #200	; 0xc8
 8009b3c:	f7ff bbab 	b.w	8009296 <_svfprintf_r+0xa8e>
 8009b40:	0800dfd4 	.word	0x0800dfd4
 8009b44:	0800df98 	.word	0x0800df98
 8009b48:	0800df9c 	.word	0x0800df9c
 8009b4c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009b4e:	4bb7      	ldr	r3, [pc, #732]	; (8009e2c <_svfprintf_r+0x1624>)
 8009b50:	1c48      	adds	r0, r1, #1
 8009b52:	3401      	adds	r4, #1
 8009b54:	2101      	movs	r1, #1
 8009b56:	2807      	cmp	r0, #7
 8009b58:	6033      	str	r3, [r6, #0]
 8009b5a:	6071      	str	r1, [r6, #4]
 8009b5c:	9427      	str	r4, [sp, #156]	; 0x9c
 8009b5e:	9026      	str	r0, [sp, #152]	; 0x98
 8009b60:	f300 8149 	bgt.w	8009df6 <_svfprintf_r+0x15ee>
 8009b64:	3608      	adds	r6, #8
 8009b66:	b92a      	cbnz	r2, 8009b74 <_svfprintf_r+0x136c>
 8009b68:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009b6a:	b918      	cbnz	r0, 8009b74 <_svfprintf_r+0x136c>
 8009b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6e:	07d8      	lsls	r0, r3, #31
 8009b70:	f57f aa66 	bpl.w	8009040 <_svfprintf_r+0x838>
 8009b74:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009b76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	1864      	adds	r4, r4, r1
 8009b7c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009b7e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009b80:	2b07      	cmp	r3, #7
 8009b82:	6031      	str	r1, [r6, #0]
 8009b84:	6070      	str	r0, [r6, #4]
 8009b86:	9427      	str	r4, [sp, #156]	; 0x9c
 8009b88:	9326      	str	r3, [sp, #152]	; 0x98
 8009b8a:	f300 82c7 	bgt.w	800a11c <_svfprintf_r+0x1914>
 8009b8e:	3608      	adds	r6, #8
 8009b90:	f1c2 0800 	rsb	r8, r2, #0
 8009b94:	f1b8 0f00 	cmp.w	r8, #0
 8009b98:	f340 817a 	ble.w	8009e90 <_svfprintf_r+0x1688>
 8009b9c:	f1b8 0f10 	cmp.w	r8, #16
 8009ba0:	f340 81da 	ble.w	8009f58 <_svfprintf_r+0x1750>
 8009ba4:	2510      	movs	r5, #16
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	f1a8 0211 	sub.w	r2, r8, #17
 8009bac:	48a0      	ldr	r0, [pc, #640]	; (8009e30 <_svfprintf_r+0x1628>)
 8009bae:	1964      	adds	r4, r4, r5
 8009bb0:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8009bb4:	2b07      	cmp	r3, #7
 8009bb6:	f8c6 9000 	str.w	r9, [r6]
 8009bba:	6075      	str	r5, [r6, #4]
 8009bbc:	900a      	str	r0, [sp, #40]	; 0x28
 8009bbe:	9427      	str	r4, [sp, #156]	; 0x9c
 8009bc0:	9326      	str	r3, [sp, #152]	; 0x98
 8009bc2:	910e      	str	r1, [sp, #56]	; 0x38
 8009bc4:	f300 82da 	bgt.w	800a17c <_svfprintf_r+0x1974>
 8009bc8:	3608      	adds	r6, #8
 8009bca:	f1a8 0810 	sub.w	r8, r8, #16
 8009bce:	f1b8 0f10 	cmp.w	r8, #16
 8009bd2:	f340 81c3 	ble.w	8009f5c <_svfprintf_r+0x1754>
 8009bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bd8:	b182      	cbz	r2, 8009bfc <_svfprintf_r+0x13f4>
 8009bda:	3301      	adds	r3, #1
 8009bdc:	3410      	adds	r4, #16
 8009bde:	2b07      	cmp	r3, #7
 8009be0:	f8c6 9000 	str.w	r9, [r6]
 8009be4:	6075      	str	r5, [r6, #4]
 8009be6:	9427      	str	r4, [sp, #156]	; 0x9c
 8009be8:	9326      	str	r3, [sp, #152]	; 0x98
 8009bea:	f300 830f 	bgt.w	800a20c <_svfprintf_r+0x1a04>
 8009bee:	3608      	adds	r6, #8
 8009bf0:	f1a8 0810 	sub.w	r8, r8, #16
 8009bf4:	f1b8 0f10 	cmp.w	r8, #16
 8009bf8:	f340 81b0 	ble.w	8009f5c <_svfprintf_r+0x1754>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009c00:	e013      	b.n	8009c2a <_svfprintf_r+0x1422>
 8009c02:	3608      	adds	r6, #8
 8009c04:	3301      	adds	r3, #1
 8009c06:	3010      	adds	r0, #16
 8009c08:	2b07      	cmp	r3, #7
 8009c0a:	f8c6 9000 	str.w	r9, [r6]
 8009c0e:	6075      	str	r5, [r6, #4]
 8009c10:	f1a8 0810 	sub.w	r8, r8, #16
 8009c14:	9027      	str	r0, [sp, #156]	; 0x9c
 8009c16:	9326      	str	r3, [sp, #152]	; 0x98
 8009c18:	f300 80fc 	bgt.w	8009e14 <_svfprintf_r+0x160c>
 8009c1c:	3608      	adds	r6, #8
 8009c1e:	f1a8 0810 	sub.w	r8, r8, #16
 8009c22:	f1b8 0f10 	cmp.w	r8, #16
 8009c26:	f340 8294 	ble.w	800a152 <_svfprintf_r+0x194a>
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	3010      	adds	r0, #16
 8009c2e:	2b07      	cmp	r3, #7
 8009c30:	f8c6 9000 	str.w	r9, [r6]
 8009c34:	6075      	str	r5, [r6, #4]
 8009c36:	9027      	str	r0, [sp, #156]	; 0x9c
 8009c38:	9326      	str	r3, [sp, #152]	; 0x98
 8009c3a:	dde2      	ble.n	8009c02 <_svfprintf_r+0x13fa>
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	4659      	mov	r1, fp
 8009c40:	aa25      	add	r2, sp, #148	; 0x94
 8009c42:	f003 fe3d 	bl	800d8c0 <__ssprint_r>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f47e afa1 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009c4c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8009c4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c50:	ae32      	add	r6, sp, #200	; 0xc8
 8009c52:	e7d7      	b.n	8009c04 <_svfprintf_r+0x13fc>
 8009c54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009c56:	f10a 0a01 	add.w	sl, sl, #1
 8009c5a:	f044 0720 	orr.w	r7, r4, #32
 8009c5e:	9709      	str	r7, [sp, #36]	; 0x24
 8009c60:	f892 8001 	ldrb.w	r8, [r2, #1]
 8009c64:	f7fe be31 	b.w	80088ca <_svfprintf_r+0xc2>
 8009c68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c6a:	1c47      	adds	r7, r0, #1
 8009c6c:	f000 80cf 	beq.w	8009e0e <_svfprintf_r+0x1606>
 8009c70:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009c74:	f000 824c 	beq.w	800a110 <_svfprintf_r+0x1908>
 8009c78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c7c:	f000 8248 	beq.w	800a110 <_svfprintf_r+0x1908>
 8009c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c82:	2c00      	cmp	r4, #0
 8009c84:	f440 7780 	orr.w	r7, r0, #256	; 0x100
 8009c88:	9713      	str	r7, [sp, #76]	; 0x4c
 8009c8a:	f2c0 826b 	blt.w	800a164 <_svfprintf_r+0x195c>
 8009c8e:	2100      	movs	r1, #0
 8009c90:	9112      	str	r1, [sp, #72]	; 0x48
 8009c92:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009c96:	f000 820b 	beq.w	800a0b0 <_svfprintf_r+0x18a8>
 8009c9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c9e:	f000 8207 	beq.w	800a0b0 <_svfprintf_r+0x18a8>
 8009ca2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009ca6:	f000 8262 	beq.w	800a16e <_svfprintf_r+0x1966>
 8009caa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cae:	f000 825e 	beq.w	800a16e <_svfprintf_r+0x1966>
 8009cb2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	e88d 1002 	stmia.w	sp, {r1, ip}
 8009cbc:	a81e      	add	r0, sp, #120	; 0x78
 8009cbe:	af1f      	add	r7, sp, #124	; 0x7c
 8009cc0:	a920      	add	r1, sp, #128	; 0x80
 8009cc2:	9002      	str	r0, [sp, #8]
 8009cc4:	9703      	str	r7, [sp, #12]
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	4623      	mov	r3, r4
 8009cca:	9104      	str	r1, [sp, #16]
 8009ccc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cce:	f8cd c01c 	str.w	ip, [sp, #28]
 8009cd2:	f000 fcbd 	bl	800a650 <_dtoa_r>
 8009cd6:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009cda:	4607      	mov	r7, r0
 8009cdc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009ce0:	d002      	beq.n	8009ce8 <_svfprintf_r+0x14e0>
 8009ce2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ce6:	d103      	bne.n	8009cf0 <_svfprintf_r+0x14e8>
 8009ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cea:	07d0      	lsls	r0, r2, #31
 8009cec:	f140 8243 	bpl.w	800a176 <_svfprintf_r+0x196e>
 8009cf0:	eb07 030c 	add.w	r3, r7, ip
 8009cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cfa:	f000 81ee 	beq.w	800a0da <_svfprintf_r+0x18d2>
 8009cfe:	4628      	mov	r0, r5
 8009d00:	4621      	mov	r1, r4
 8009d02:	2200      	movs	r2, #0
 8009d04:	2300      	movs	r3, #0
 8009d06:	f7f6 fd9f 	bl	8000848 <__aeabi_dcmpeq>
 8009d0a:	bb00      	cbnz	r0, 8009d4e <_svfprintf_r+0x1546>
 8009d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009d10:	4294      	cmp	r4, r2
 8009d12:	f240 82d8 	bls.w	800a2c6 <_svfprintf_r+0x1abe>
 8009d16:	4613      	mov	r3, r2
 8009d18:	2130      	movs	r1, #48	; 0x30
 8009d1a:	43d0      	mvns	r0, r2
 8009d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8009d20:	1820      	adds	r0, r4, r0
 8009d22:	42a3      	cmp	r3, r4
 8009d24:	9320      	str	r3, [sp, #128]	; 0x80
 8009d26:	f000 0001 	and.w	r0, r0, #1
 8009d2a:	d00f      	beq.n	8009d4c <_svfprintf_r+0x1544>
 8009d2c:	b128      	cbz	r0, 8009d3a <_svfprintf_r+0x1532>
 8009d2e:	7051      	strb	r1, [r2, #1]
 8009d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d32:	3301      	adds	r3, #1
 8009d34:	4293      	cmp	r3, r2
 8009d36:	9320      	str	r3, [sp, #128]	; 0x80
 8009d38:	d008      	beq.n	8009d4c <_svfprintf_r+0x1544>
 8009d3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f800 1b01 	strb.w	r1, [r0], #1
 8009d42:	7059      	strb	r1, [r3, #1]
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	42a3      	cmp	r3, r4
 8009d48:	9320      	str	r3, [sp, #128]	; 0x80
 8009d4a:	d1f7      	bne.n	8009d3c <_svfprintf_r+0x1534>
 8009d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d50:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009d54:	ebc7 0301 	rsb	r3, r7, r1
 8009d58:	9311      	str	r3, [sp, #68]	; 0x44
 8009d5a:	f000 8166 	beq.w	800a02a <_svfprintf_r+0x1822>
 8009d5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d62:	f000 8162 	beq.w	800a02a <_svfprintf_r+0x1822>
 8009d66:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009d6a:	f040 82b8 	bne.w	800a2de <_svfprintf_r+0x1ad6>
 8009d6e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	f340 8288 	ble.w	800a288 <_svfprintf_r+0x1a80>
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	f040 8253 	bne.w	800a224 <_svfprintf_r+0x1a1c>
 8009d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d80:	07c8      	lsls	r0, r1, #31
 8009d82:	f100 824f 	bmi.w	800a224 <_svfprintf_r+0x1a1c>
 8009d86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8c:	920e      	str	r2, [sp, #56]	; 0x38
 8009d8e:	9215      	str	r2, [sp, #84]	; 0x54
 8009d90:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d92:	2900      	cmp	r1, #0
 8009d94:	f000 8143 	beq.w	800a01e <_svfprintf_r+0x1816>
 8009d98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009d9a:	222d      	movs	r2, #45	; 0x2d
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 8009da2:	9009      	str	r0, [sp, #36]	; 0x24
 8009da4:	9112      	str	r1, [sp, #72]	; 0x48
 8009da6:	f7fe be61 	b.w	8008a6c <_svfprintf_r+0x264>
 8009daa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009dac:	4659      	mov	r1, fp
 8009dae:	aa25      	add	r2, sp, #148	; 0x94
 8009db0:	f003 fd86 	bl	800d8c0 <__ssprint_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f47e aeea 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009dba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009dbc:	ae32      	add	r6, sp, #200	; 0xc8
 8009dbe:	f7ff ba80 	b.w	80092c2 <_svfprintf_r+0xaba>
 8009dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc4:	9510      	str	r5, [sp, #64]	; 0x40
 8009dc6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009dca:	920b      	str	r2, [sp, #44]	; 0x2c
 8009dcc:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8009dd0:	9415      	str	r4, [sp, #84]	; 0x54
 8009dd2:	f7fe be4a 	b.w	8008a6a <_svfprintf_r+0x262>
 8009dd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009dd8:	2140      	movs	r1, #64	; 0x40
 8009dda:	f7fc fddf 	bl	800699c <_malloc_r>
 8009dde:	f8cb 0000 	str.w	r0, [fp]
 8009de2:	f8cb 0010 	str.w	r0, [fp, #16]
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f000 8272 	beq.w	800a2d0 <_svfprintf_r+0x1ac8>
 8009dec:	2640      	movs	r6, #64	; 0x40
 8009dee:	f8cb 6014 	str.w	r6, [fp, #20]
 8009df2:	f7fe bd26 	b.w	8008842 <_svfprintf_r+0x3a>
 8009df6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009df8:	4659      	mov	r1, fp
 8009dfa:	aa25      	add	r2, sp, #148	; 0x94
 8009dfc:	f003 fd60 	bl	800d8c0 <__ssprint_r>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f47e aec4 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009e06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009e08:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009e0a:	ae32      	add	r6, sp, #200	; 0xc8
 8009e0c:	e6ab      	b.n	8009b66 <_svfprintf_r+0x135e>
 8009e0e:	2206      	movs	r2, #6
 8009e10:	920a      	str	r2, [sp, #40]	; 0x28
 8009e12:	e735      	b.n	8009c80 <_svfprintf_r+0x1478>
 8009e14:	4620      	mov	r0, r4
 8009e16:	4659      	mov	r1, fp
 8009e18:	aa25      	add	r2, sp, #148	; 0x94
 8009e1a:	f003 fd51 	bl	800d8c0 <__ssprint_r>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f47e aeb5 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009e24:	ae32      	add	r6, sp, #200	; 0xc8
 8009e26:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8009e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e2a:	e6f8      	b.n	8009c1e <_svfprintf_r+0x1416>
 8009e2c:	0800dfd0 	.word	0x0800dfd0
 8009e30:	0800dfd4 	.word	0x0800dfd4
 8009e34:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e36:	6805      	ldr	r5, [r0, #0]
 8009e38:	4607      	mov	r7, r0
 8009e3a:	f7fe bdb6 	b.w	80089aa <_svfprintf_r+0x1a2>
 8009e3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009e46:	1d10      	adds	r0, r2, #4
 8009e48:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009e4c:	9010      	str	r0, [sp, #64]	; 0x40
 8009e4e:	bf14      	ite	ne
 8009e50:	801f      	strhne	r7, [r3, #0]
 8009e52:	601f      	streq	r7, [r3, #0]
 8009e54:	f7fe bd02 	b.w	800885c <_svfprintf_r+0x54>
 8009e58:	4614      	mov	r4, r2
 8009e5a:	f7ff bb0b 	b.w	8009474 <_svfprintf_r+0xc6c>
 8009e5e:	f7fb fba3 	bl	80055a8 <strlen>
 8009e62:	9412      	str	r4, [sp, #72]	; 0x48
 8009e64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009e66:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8009e6a:	900e      	str	r0, [sp, #56]	; 0x38
 8009e6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e6e:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8009e72:	9510      	str	r5, [sp, #64]	; 0x40
 8009e74:	9415      	str	r4, [sp, #84]	; 0x54
 8009e76:	f7fe bdf8 	b.w	8008a6a <_svfprintf_r+0x262>
 8009e7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	aa25      	add	r2, sp, #148	; 0x94
 8009e80:	f003 fd1e 	bl	800d8c0 <__ssprint_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f47e ae82 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009e8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009e8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e8e:	ae32      	add	r6, sp, #200	; 0xc8
 8009e90:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	1864      	adds	r4, r4, r1
 8009e96:	2a07      	cmp	r2, #7
 8009e98:	6037      	str	r7, [r6, #0]
 8009e9a:	6071      	str	r1, [r6, #4]
 8009e9c:	9427      	str	r4, [sp, #156]	; 0x9c
 8009e9e:	9226      	str	r2, [sp, #152]	; 0x98
 8009ea0:	f77f a8cd 	ble.w	800903e <_svfprintf_r+0x836>
 8009ea4:	f7ff b973 	b.w	800918e <_svfprintf_r+0x986>
 8009ea8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009eaa:	4659      	mov	r1, fp
 8009eac:	aa25      	add	r2, sp, #148	; 0x94
 8009eae:	9306      	str	r3, [sp, #24]
 8009eb0:	f003 fd06 	bl	800d8c0 <__ssprint_r>
 8009eb4:	9b06      	ldr	r3, [sp, #24]
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f47e ae69 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009ebc:	ae32      	add	r6, sp, #200	; 0xc8
 8009ebe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009ec0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009ec2:	e441      	b.n	8009748 <_svfprintf_r+0xf40>
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	e61e      	b.n	8009b06 <_svfprintf_r+0x12fe>
 8009ec8:	4ca3      	ldr	r4, [pc, #652]	; (800a158 <_svfprintf_r+0x1950>)
 8009eca:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009ecc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009ece:	941b      	str	r4, [sp, #108]	; 0x6c
 8009ed0:	f7fe bff9 	b.w	8008ec6 <_svfprintf_r+0x6be>
 8009ed4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ed6:	4659      	mov	r1, fp
 8009ed8:	aa25      	add	r2, sp, #148	; 0x94
 8009eda:	f003 fcf1 	bl	800d8c0 <__ssprint_r>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f47e ae55 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009ee4:	ae32      	add	r6, sp, #200	; 0xc8
 8009ee6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009ee8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009eea:	e43e      	b.n	800976a <_svfprintf_r+0xf62>
 8009eec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009eee:	4659      	mov	r1, fp
 8009ef0:	aa25      	add	r2, sp, #148	; 0x94
 8009ef2:	f8cd c01c 	str.w	ip, [sp, #28]
 8009ef6:	f003 fce3 	bl	800d8c0 <__ssprint_r>
 8009efa:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8009efe:	2800      	cmp	r0, #0
 8009f00:	f47e ae45 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009f04:	ae32      	add	r6, sp, #200	; 0xc8
 8009f06:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009f08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f0a:	f7ff bba1 	b.w	8009650 <_svfprintf_r+0xe48>
 8009f0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f10:	4659      	mov	r1, fp
 8009f12:	aa25      	add	r2, sp, #148	; 0x94
 8009f14:	f003 fcd4 	bl	800d8c0 <__ssprint_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	f47e ae38 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009f1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009f20:	ae32      	add	r6, sp, #200	; 0xc8
 8009f22:	f7ff bb76 	b.w	8009612 <_svfprintf_r+0xe0a>
 8009f26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f28:	4659      	mov	r1, fp
 8009f2a:	aa25      	add	r2, sp, #148	; 0x94
 8009f2c:	f003 fcc8 	bl	800d8c0 <__ssprint_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f47e ae2c 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009f36:	ae32      	add	r6, sp, #200	; 0xc8
 8009f38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f3c:	f7ff b9dd 	b.w	80092fa <_svfprintf_r+0xaf2>
 8009f40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f42:	4659      	mov	r1, fp
 8009f44:	aa25      	add	r2, sp, #148	; 0x94
 8009f46:	f003 fcbb 	bl	800d8c0 <__ssprint_r>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	f47e ae1f 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009f50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f52:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009f54:	ae32      	add	r6, sp, #200	; 0xc8
 8009f56:	e4c2      	b.n	80098de <_svfprintf_r+0x10d6>
 8009f58:	4980      	ldr	r1, [pc, #512]	; (800a15c <_svfprintf_r+0x1954>)
 8009f5a:	910a      	str	r1, [sp, #40]	; 0x28
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f60:	4444      	add	r4, r8
 8009f62:	2b07      	cmp	r3, #7
 8009f64:	e886 0102 	stmia.w	r6, {r1, r8}
 8009f68:	9427      	str	r4, [sp, #156]	; 0x9c
 8009f6a:	9326      	str	r3, [sp, #152]	; 0x98
 8009f6c:	dc85      	bgt.n	8009e7a <_svfprintf_r+0x1672>
 8009f6e:	3608      	adds	r6, #8
 8009f70:	e78e      	b.n	8009e90 <_svfprintf_r+0x1688>
 8009f72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f74:	4659      	mov	r1, fp
 8009f76:	aa25      	add	r2, sp, #148	; 0x94
 8009f78:	f003 fca2 	bl	800d8c0 <__ssprint_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f47e ae06 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009f82:	ae32      	add	r6, sp, #200	; 0xc8
 8009f84:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009f86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f88:	f7ff b9c9 	b.w	800931e <_svfprintf_r+0xb16>
 8009f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f8e:	4659      	mov	r1, fp
 8009f90:	aa25      	add	r2, sp, #148	; 0x94
 8009f92:	f003 fc95 	bl	800d8c0 <__ssprint_r>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f47e adf9 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009f9c:	ae32      	add	r6, sp, #200	; 0xc8
 8009f9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009fa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fa2:	f7ff bb68 	b.w	8009676 <_svfprintf_r+0xe6e>
 8009fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009fa8:	4659      	mov	r1, fp
 8009faa:	aa25      	add	r2, sp, #148	; 0x94
 8009fac:	f003 fc88 	bl	800d8c0 <__ssprint_r>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f47e adec 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009fb6:	ae32      	add	r6, sp, #200	; 0xc8
 8009fb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fbc:	e4bf      	b.n	800993e <_svfprintf_r+0x1136>
 8009fbe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009fc0:	4659      	mov	r1, fp
 8009fc2:	aa25      	add	r2, sp, #148	; 0x94
 8009fc4:	f003 fc7c 	bl	800d8c0 <__ssprint_r>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f47e ade0 	bne.w	8008b8e <_svfprintf_r+0x386>
 8009fce:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009fd0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009fd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8009fd4:	1bf3      	subs	r3, r6, r7
 8009fd6:	ae32      	add	r6, sp, #200	; 0xc8
 8009fd8:	e495      	b.n	8009906 <_svfprintf_r+0x10fe>
 8009fda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009fdc:	9510      	str	r5, [sp, #64]	; 0x40
 8009fde:	2f06      	cmp	r7, #6
 8009fe0:	bf28      	it	cs
 8009fe2:	2706      	movcs	r7, #6
 8009fe4:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
 8009fe8:	970e      	str	r7, [sp, #56]	; 0x38
 8009fea:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fec:	4f5c      	ldr	r7, [pc, #368]	; (800a160 <_svfprintf_r+0x1958>)
 8009fee:	f7fe be69 	b.w	8008cc4 <_svfprintf_r+0x4bc>
 8009ff2:	4a59      	ldr	r2, [pc, #356]	; (800a158 <_svfprintf_r+0x1950>)
 8009ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff8:	f7ff b8f6 	b.w	80091e8 <_svfprintf_r+0x9e0>
 8009ffc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ffe:	4659      	mov	r1, fp
 800a000:	aa25      	add	r2, sp, #148	; 0x94
 800a002:	f003 fc5d 	bl	800d8c0 <__ssprint_r>
 800a006:	2800      	cmp	r0, #0
 800a008:	f47e adc1 	bne.w	8008b8e <_svfprintf_r+0x386>
 800a00c:	ae32      	add	r6, sp, #200	; 0xc8
 800a00e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800a010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a012:	e4a6      	b.n	8009962 <_svfprintf_r+0x115a>
 800a014:	232d      	movs	r3, #45	; 0x2d
 800a016:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 800a01a:	f7fe be05 	b.w	8008c28 <_svfprintf_r+0x420>
 800a01e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a020:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800a024:	9409      	str	r4, [sp, #36]	; 0x24
 800a026:	f7fe bd20 	b.w	8008a6a <_svfprintf_r+0x262>
 800a02a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a02c:	1cd1      	adds	r1, r2, #3
 800a02e:	4610      	mov	r0, r2
 800a030:	db02      	blt.n	800a038 <_svfprintf_r+0x1830>
 800a032:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a034:	4294      	cmp	r4, r2
 800a036:	da28      	bge.n	800a08a <_svfprintf_r+0x1882>
 800a038:	f1a8 0802 	sub.w	r8, r8, #2
 800a03c:	1e43      	subs	r3, r0, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	931e      	str	r3, [sp, #120]	; 0x78
 800a042:	f88d 8084 	strb.w	r8, [sp, #132]	; 0x84
 800a046:	f2c0 8132 	blt.w	800a2ae <_svfprintf_r+0x1aa6>
 800a04a:	222b      	movs	r2, #43	; 0x2b
 800a04c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 800a050:	2b09      	cmp	r3, #9
 800a052:	f300 809f 	bgt.w	800a194 <_svfprintf_r+0x198c>
 800a056:	3330      	adds	r3, #48	; 0x30
 800a058:	2030      	movs	r0, #48	; 0x30
 800a05a:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
 800a05e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800a062:	a922      	add	r1, sp, #136	; 0x88
 800a064:	aa21      	add	r2, sp, #132	; 0x84
 800a066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a068:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a06a:	1a88      	subs	r0, r1, r2
 800a06c:	1819      	adds	r1, r3, r0
 800a06e:	2c01      	cmp	r4, #1
 800a070:	901a      	str	r0, [sp, #104]	; 0x68
 800a072:	910e      	str	r1, [sp, #56]	; 0x38
 800a074:	f340 8110 	ble.w	800a298 <_svfprintf_r+0x1a90>
 800a078:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a07a:	2300      	movs	r3, #0
 800a07c:	1c62      	adds	r2, r4, #1
 800a07e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800a082:	920e      	str	r2, [sp, #56]	; 0x38
 800a084:	900b      	str	r0, [sp, #44]	; 0x2c
 800a086:	9315      	str	r3, [sp, #84]	; 0x54
 800a088:	e682      	b.n	8009d90 <_svfprintf_r+0x1588>
 800a08a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a08c:	428a      	cmp	r2, r1
 800a08e:	db52      	blt.n	800a136 <_svfprintf_r+0x192e>
 800a090:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a092:	07cb      	lsls	r3, r1, #31
 800a094:	f100 80df 	bmi.w	800a256 <_svfprintf_r+0x1a4e>
 800a098:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a09c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a09e:	920e      	str	r2, [sp, #56]	; 0x38
 800a0a0:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a0a4:	e673      	b.n	8009d8e <_svfprintf_r+0x1586>
 800a0a6:	4b2d      	ldr	r3, [pc, #180]	; (800a15c <_svfprintf_r+0x1954>)
 800a0a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a0aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ac:	f7ff b9d4 	b.w	8009458 <_svfprintf_r+0xc50>
 800a0b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a0b2:	2003      	movs	r0, #3
 800a0b4:	9000      	str	r0, [sp, #0]
 800a0b6:	9701      	str	r7, [sp, #4]
 800a0b8:	a91e      	add	r1, sp, #120	; 0x78
 800a0ba:	a81f      	add	r0, sp, #124	; 0x7c
 800a0bc:	af20      	add	r7, sp, #128	; 0x80
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	9003      	str	r0, [sp, #12]
 800a0c4:	9704      	str	r7, [sp, #16]
 800a0c6:	9102      	str	r1, [sp, #8]
 800a0c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a0ca:	f000 fac1 	bl	800a650 <_dtoa_r>
 800a0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0d0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800a0d4:	1883      	adds	r3, r0, r2
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0da:	7839      	ldrb	r1, [r7, #0]
 800a0dc:	2930      	cmp	r1, #48	; 0x30
 800a0de:	f000 80a9 	beq.w	800a234 <_svfprintf_r+0x1a2c>
 800a0e2:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a0e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0e6:	1813      	adds	r3, r2, r0
 800a0e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ea:	e608      	b.n	8009cfe <_svfprintf_r+0x14f6>
 800a0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0f0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800a0f4:	9012      	str	r0, [sp, #72]	; 0x48
 800a0f6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0f8:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800a0fc:	9510      	str	r5, [sp, #64]	; 0x40
 800a0fe:	920e      	str	r2, [sp, #56]	; 0x38
 800a100:	9015      	str	r0, [sp, #84]	; 0x54
 800a102:	f7fe bcb2 	b.w	8008a6a <_svfprintf_r+0x262>
 800a106:	2200      	movs	r2, #0
 800a108:	46a2      	mov	sl, r4
 800a10a:	920a      	str	r2, [sp, #40]	; 0x28
 800a10c:	f7fe bbdf 	b.w	80088ce <_svfprintf_r+0xc6>
 800a110:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a112:	2f00      	cmp	r7, #0
 800a114:	bf08      	it	eq
 800a116:	2701      	moveq	r7, #1
 800a118:	970a      	str	r7, [sp, #40]	; 0x28
 800a11a:	e5b1      	b.n	8009c80 <_svfprintf_r+0x1478>
 800a11c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a11e:	4659      	mov	r1, fp
 800a120:	aa25      	add	r2, sp, #148	; 0x94
 800a122:	f003 fbcd 	bl	800d8c0 <__ssprint_r>
 800a126:	2800      	cmp	r0, #0
 800a128:	f47e ad31 	bne.w	8008b8e <_svfprintf_r+0x386>
 800a12c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a12e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800a130:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a132:	ae32      	add	r6, sp, #200	; 0xc8
 800a134:	e52c      	b.n	8009b90 <_svfprintf_r+0x1388>
 800a136:	2a00      	cmp	r2, #0
 800a138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a13a:	bfd4      	ite	le
 800a13c:	f1c2 0002 	rsble	r0, r2, #2
 800a140:	2001      	movgt	r0, #1
 800a142:	18c0      	adds	r0, r0, r3
 800a144:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 800a148:	900e      	str	r0, [sp, #56]	; 0x38
 800a14a:	940b      	str	r4, [sp, #44]	; 0x2c
 800a14c:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a150:	e61d      	b.n	8009d8e <_svfprintf_r+0x1586>
 800a152:	4604      	mov	r4, r0
 800a154:	e702      	b.n	8009f5c <_svfprintf_r+0x1754>
 800a156:	bf00      	nop
 800a158:	0800dfe4 	.word	0x0800dfe4
 800a15c:	0800dfd4 	.word	0x0800dfd4
 800a160:	0800dfc8 	.word	0x0800dfc8
 800a164:	222d      	movs	r2, #45	; 0x2d
 800a166:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800a16a:	9212      	str	r2, [sp, #72]	; 0x48
 800a16c:	e591      	b.n	8009c92 <_svfprintf_r+0x148a>
 800a16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a170:	f103 0c01 	add.w	ip, r3, #1
 800a174:	e59f      	b.n	8009cb6 <_svfprintf_r+0x14ae>
 800a176:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800a178:	940b      	str	r4, [sp, #44]	; 0x2c
 800a17a:	e5e8      	b.n	8009d4e <_svfprintf_r+0x1546>
 800a17c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a17e:	4659      	mov	r1, fp
 800a180:	aa25      	add	r2, sp, #148	; 0x94
 800a182:	f003 fb9d 	bl	800d8c0 <__ssprint_r>
 800a186:	2800      	cmp	r0, #0
 800a188:	f47e ad01 	bne.w	8008b8e <_svfprintf_r+0x386>
 800a18c:	ae32      	add	r6, sp, #200	; 0xc8
 800a18e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800a190:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a192:	e51a      	b.n	8009bca <_svfprintf_r+0x13c2>
 800a194:	f246 6567 	movw	r5, #26215	; 0x6667
 800a198:	f10d 0092 	add.w	r0, sp, #146	; 0x92
 800a19c:	f2c6 6566 	movt	r5, #26214	; 0x6666
 800a1a0:	fb85 2403 	smull	r2, r4, r5, r3
 800a1a4:	17da      	asrs	r2, r3, #31
 800a1a6:	ebc2 01a4 	rsb	r1, r2, r4, asr #2
 800a1aa:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800a1ae:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a1b8:	7010      	strb	r0, [r2, #0]
 800a1ba:	1e50      	subs	r0, r2, #1
 800a1bc:	2909      	cmp	r1, #9
 800a1be:	460b      	mov	r3, r1
 800a1c0:	dcee      	bgt.n	800a1a0 <_svfprintf_r+0x1998>
 800a1c2:	3330      	adds	r3, #48	; 0x30
 800a1c4:	f10d 0593 	add.w	r5, sp, #147	; 0x93
 800a1c8:	b2d9      	uxtb	r1, r3
 800a1ca:	4285      	cmp	r5, r0
 800a1cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1d0:	d97b      	bls.n	800a2ca <_svfprintf_r+0x1ac2>
 800a1d2:	1aac      	subs	r4, r5, r2
 800a1d4:	07e4      	lsls	r4, r4, #31
 800a1d6:	f10d 0085 	add.w	r0, sp, #133	; 0x85
 800a1da:	4613      	mov	r3, r2
 800a1dc:	d50d      	bpl.n	800a1fa <_svfprintf_r+0x19f2>
 800a1de:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 800a1e8:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a1ec:	e005      	b.n	800a1fa <_svfprintf_r+0x19f2>
 800a1ee:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a1f2:	1c48      	adds	r0, r1, #1
 800a1f4:	704c      	strb	r4, [r1, #1]
 800a1f6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a1fa:	7041      	strb	r1, [r0, #1]
 800a1fc:	1c41      	adds	r1, r0, #1
 800a1fe:	42ab      	cmp	r3, r5
 800a200:	d1f5      	bne.n	800a1ee <_svfprintf_r+0x19e6>
 800a202:	ac42      	add	r4, sp, #264	; 0x108
 800a204:	ebc2 0144 	rsb	r1, r2, r4, lsl #1
 800a208:	39f6      	subs	r1, #246	; 0xf6
 800a20a:	e72b      	b.n	800a064 <_svfprintf_r+0x185c>
 800a20c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a20e:	4659      	mov	r1, fp
 800a210:	aa25      	add	r2, sp, #148	; 0x94
 800a212:	f003 fb55 	bl	800d8c0 <__ssprint_r>
 800a216:	2800      	cmp	r0, #0
 800a218:	f47e acb9 	bne.w	8008b8e <_svfprintf_r+0x386>
 800a21c:	ae32      	add	r6, sp, #200	; 0xc8
 800a21e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800a220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a222:	e4e5      	b.n	8009bf0 <_svfprintf_r+0x13e8>
 800a224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a226:	1c60      	adds	r0, r4, #1
 800a228:	1811      	adds	r1, r2, r0
 800a22a:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800a22e:	910e      	str	r1, [sp, #56]	; 0x38
 800a230:	930b      	str	r3, [sp, #44]	; 0x2c
 800a232:	e5ac      	b.n	8009d8e <_svfprintf_r+0x1586>
 800a234:	4628      	mov	r0, r5
 800a236:	4621      	mov	r1, r4
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	f8cd c01c 	str.w	ip, [sp, #28]
 800a240:	f7f6 fb02 	bl	8000848 <__aeabi_dcmpeq>
 800a244:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a248:	2800      	cmp	r0, #0
 800a24a:	f47f af4a 	bne.w	800a0e2 <_svfprintf_r+0x18da>
 800a24e:	f1cc 0001 	rsb	r0, ip, #1
 800a252:	901e      	str	r0, [sp, #120]	; 0x78
 800a254:	e746      	b.n	800a0e4 <_svfprintf_r+0x18dc>
 800a256:	1c50      	adds	r0, r2, #1
 800a258:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 800a25c:	900e      	str	r0, [sp, #56]	; 0x38
 800a25e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a260:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a264:	e593      	b.n	8009d8e <_svfprintf_r+0x1586>
 800a266:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	1d1f      	adds	r7, r3, #4
 800a26e:	2a00      	cmp	r2, #0
 800a270:	f89a 8001 	ldrb.w	r8, [sl, #1]
 800a274:	920a      	str	r2, [sp, #40]	; 0x28
 800a276:	9710      	str	r7, [sp, #64]	; 0x40
 800a278:	46a2      	mov	sl, r4
 800a27a:	f6be ab26 	bge.w	80088ca <_svfprintf_r+0xc2>
 800a27e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a282:	940a      	str	r4, [sp, #40]	; 0x28
 800a284:	f7fe bb21 	b.w	80088ca <_svfprintf_r+0xc2>
 800a288:	b9b4      	cbnz	r4, 800a2b8 <_svfprintf_r+0x1ab0>
 800a28a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a28c:	07c1      	lsls	r1, r0, #31
 800a28e:	d413      	bmi.n	800a2b8 <_svfprintf_r+0x1ab0>
 800a290:	2101      	movs	r1, #1
 800a292:	910b      	str	r1, [sp, #44]	; 0x2c
 800a294:	910e      	str	r1, [sp, #56]	; 0x38
 800a296:	e57a      	b.n	8009d8e <_svfprintf_r+0x1586>
 800a298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a29a:	f012 0001 	ands.w	r0, r2, #1
 800a29e:	f47f aeeb 	bne.w	800a078 <_svfprintf_r+0x1870>
 800a2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a4:	9015      	str	r0, [sp, #84]	; 0x54
 800a2a6:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800a2aa:	910b      	str	r1, [sp, #44]	; 0x2c
 800a2ac:	e570      	b.n	8009d90 <_svfprintf_r+0x1588>
 800a2ae:	212d      	movs	r1, #45	; 0x2d
 800a2b0:	425b      	negs	r3, r3
 800a2b2:	f88d 1085 	strb.w	r1, [sp, #133]	; 0x85
 800a2b6:	e6cb      	b.n	800a050 <_svfprintf_r+0x1848>
 800a2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ba:	1c9c      	adds	r4, r3, #2
 800a2bc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 800a2c0:	940e      	str	r4, [sp, #56]	; 0x38
 800a2c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2c4:	e563      	b.n	8009d8e <_svfprintf_r+0x1586>
 800a2c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2c8:	e541      	b.n	8009d4e <_svfprintf_r+0x1546>
 800a2ca:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 800a2ce:	e6c9      	b.n	800a064 <_svfprintf_r+0x185c>
 800a2d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a2d2:	200c      	movs	r0, #12
 800a2d4:	6020      	str	r0, [r4, #0]
 800a2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2da:	f7fe bc63 	b.w	8008ba4 <_svfprintf_r+0x39c>
 800a2de:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a2e0:	e6ac      	b.n	800a03c <_svfprintf_r+0x1834>
 800a2e2:	bf00      	nop

0800a2e4 <__submore>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800a2ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	d014      	beq.n	800a31e <__submore+0x3a>
 800a2f4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800a2f6:	0077      	lsls	r7, r6, #1
 800a2f8:	463a      	mov	r2, r7
 800a2fa:	f003 f8eb 	bl	800d4d4 <_realloc_r>
 800a2fe:	4605      	mov	r5, r0
 800a300:	b348      	cbz	r0, 800a356 <__submore+0x72>
 800a302:	eb00 0806 	add.w	r8, r0, r6
 800a306:	4640      	mov	r0, r8
 800a308:	4629      	mov	r1, r5
 800a30a:	4632      	mov	r2, r6
 800a30c:	f002 f95a 	bl	800c5c4 <memcpy>
 800a310:	f8c4 8000 	str.w	r8, [r4]
 800a314:	6325      	str	r5, [r4, #48]	; 0x30
 800a316:	6367      	str	r7, [r4, #52]	; 0x34
 800a318:	2000      	movs	r0, #0
 800a31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a31e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a322:	f7fc fb3b 	bl	800699c <_malloc_r>
 800a326:	4603      	mov	r3, r0
 800a328:	b1a8      	cbz	r0, 800a356 <__submore+0x72>
 800a32a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800a32e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a332:	6320      	str	r0, [r4, #48]	; 0x30
 800a334:	6361      	str	r1, [r4, #52]	; 0x34
 800a336:	f880 23ff 	strb.w	r2, [r0, #1023]	; 0x3ff
 800a33a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800a33e:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
 800a342:	f883 03fe 	strb.w	r0, [r3, #1022]	; 0x3fe
 800a346:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 800a34a:	2000      	movs	r0, #0
 800a34c:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
 800a350:	6022      	str	r2, [r4, #0]
 800a352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35e:	bf00      	nop

0800a360 <quorem>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	6903      	ldr	r3, [r0, #16]
 800a366:	690c      	ldr	r4, [r1, #16]
 800a368:	b083      	sub	sp, #12
 800a36a:	429c      	cmp	r4, r3
 800a36c:	4606      	mov	r6, r0
 800a36e:	f300 816b 	bgt.w	800a648 <quorem+0x2e8>
 800a372:	1ce0      	adds	r0, r4, #3
 800a374:	0082      	lsls	r2, r0, #2
 800a376:	188f      	adds	r7, r1, r2
 800a378:	18b5      	adds	r5, r6, r2
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6868      	ldr	r0, [r5, #4]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	fbb0 f5f2 	udiv	r5, r0, r2
 800a384:	f101 0314 	add.w	r3, r1, #20
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	3c01      	subs	r4, #1
 800a38c:	3704      	adds	r7, #4
 800a38e:	f106 0814 	add.w	r8, r6, #20
 800a392:	2d00      	cmp	r5, #0
 800a394:	f000 80bf 	beq.w	800a516 <quorem+0x1b6>
 800a398:	694b      	ldr	r3, [r1, #20]
 800a39a:	f8d8 2000 	ldr.w	r2, [r8]
 800a39e:	b298      	uxth	r0, r3
 800a3a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a3a4:	fb05 f000 	mul.w	r0, r5, r0
 800a3a8:	fb05 f30c 	mul.w	r3, r5, ip
 800a3ac:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
 800a3b0:	fa1f fe8c 	uxth.w	lr, ip
 800a3b4:	b293      	uxth	r3, r2
 800a3b6:	b280      	uxth	r0, r0
 800a3b8:	1a1b      	subs	r3, r3, r0
 800a3ba:	ebce 4212 	rsb	r2, lr, r2, lsr #16
 800a3be:	9801      	ldr	r0, [sp, #4]
 800a3c0:	eb02 4e23 	add.w	lr, r2, r3, asr #16
 800a3c4:	fa1f f983 	uxth.w	r9, r3
 800a3c8:	f101 0218 	add.w	r2, r1, #24
 800a3cc:	ea49 490e 	orr.w	r9, r9, lr, lsl #16
 800a3d0:	1a38      	subs	r0, r7, r0
 800a3d2:	f106 0318 	add.w	r3, r6, #24
 800a3d6:	4297      	cmp	r7, r2
 800a3d8:	f843 9c04 	str.w	r9, [r3, #-4]
 800a3dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800a3e0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a3e4:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a3e8:	d372      	bcc.n	800a4d0 <quorem+0x170>
 800a3ea:	b328      	cbz	r0, 800a438 <quorem+0xd8>
 800a3ec:	6810      	ldr	r0, [r2, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	b282      	uxth	r2, r0
 800a3f2:	0c00      	lsrs	r0, r0, #16
 800a3f4:	fb05 c202 	mla	r2, r5, r2, ip
 800a3f8:	fb05 f000 	mul.w	r0, r5, r0
 800a3fc:	fa1f fc83 	uxth.w	ip, r3
 800a400:	eb00 4012 	add.w	r0, r0, r2, lsr #16
 800a404:	44f4      	add	ip, lr
 800a406:	b292      	uxth	r2, r2
 800a408:	fa1f fe80 	uxth.w	lr, r0
 800a40c:	ebc2 0c0c 	rsb	ip, r2, ip
 800a410:	ebce 4313 	rsb	r3, lr, r3, lsr #16
 800a414:	eb03 4e2c 	add.w	lr, r3, ip, asr #16
 800a418:	fa1f f28c 	uxth.w	r2, ip
 800a41c:	ea42 4c0e 	orr.w	ip, r2, lr, lsl #16
 800a420:	f101 021c 	add.w	r2, r1, #28
 800a424:	f106 031c 	add.w	r3, r6, #28
 800a428:	4297      	cmp	r7, r2
 800a42a:	f843 cc04 	str.w	ip, [r3, #-4]
 800a42e:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a432:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800a436:	d34b      	bcc.n	800a4d0 <quorem+0x170>
 800a438:	4610      	mov	r0, r2
 800a43a:	f850 bb04 	ldr.w	fp, [r0], #4
 800a43e:	f8d3 9000 	ldr.w	r9, [r3]
 800a442:	fa1f fa8b 	uxth.w	sl, fp
 800a446:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 800a44a:	fb05 cc0a 	mla	ip, r5, sl, ip
 800a44e:	fb05 fb0b 	mul.w	fp, r5, fp
 800a452:	fa1f fa89 	uxth.w	sl, r9
 800a456:	eb0b 4b1c 	add.w	fp, fp, ip, lsr #16
 800a45a:	44d6      	add	lr, sl
 800a45c:	fa1f fc8c 	uxth.w	ip, ip
 800a460:	fa1f fa8b 	uxth.w	sl, fp
 800a464:	ebcc 0e0e 	rsb	lr, ip, lr
 800a468:	ebca 4919 	rsb	r9, sl, r9, lsr #16
 800a46c:	eb09 4a2e 	add.w	sl, r9, lr, asr #16
 800a470:	fa1f fc8e 	uxth.w	ip, lr
 800a474:	4699      	mov	r9, r3
 800a476:	ea4c 4e0a 	orr.w	lr, ip, sl, lsl #16
 800a47a:	f849 eb04 	str.w	lr, [r9], #4
 800a47e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	fa1f f38c 	uxth.w	r3, ip
 800a488:	fb05 fe03 	mul.w	lr, r5, r3
 800a48c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a490:	fb05 f30c 	mul.w	r3, r5, ip
 800a494:	eb0e 4b1b 	add.w	fp, lr, fp, lsr #16
 800a498:	eb03 4c1b 	add.w	ip, r3, fp, lsr #16
 800a49c:	b293      	uxth	r3, r2
 800a49e:	fa1f fe8c 	uxth.w	lr, ip
 800a4a2:	eb03 432a 	add.w	r3, r3, sl, asr #16
 800a4a6:	fa1f fb8b 	uxth.w	fp, fp
 800a4aa:	ebcb 0303 	rsb	r3, fp, r3
 800a4ae:	ebce 4212 	rsb	r2, lr, r2, lsr #16
 800a4b2:	eb02 4e23 	add.w	lr, r2, r3, asr #16
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	464b      	mov	r3, r9
 800a4ba:	ea42 490e 	orr.w	r9, r2, lr, lsl #16
 800a4be:	1d02      	adds	r2, r0, #4
 800a4c0:	4297      	cmp	r7, r2
 800a4c2:	f843 9b04 	str.w	r9, [r3], #4
 800a4c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a4ca:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a4ce:	d2b3      	bcs.n	800a438 <quorem+0xd8>
 800a4d0:	1d20      	adds	r0, r4, #4
 800a4d2:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	b9ea      	cbnz	r2, 800a516 <quorem+0x1b6>
 800a4da:	1d18      	adds	r0, r3, #4
 800a4dc:	4598      	cmp	r8, r3
 800a4de:	d219      	bcs.n	800a514 <quorem+0x1b4>
 800a4e0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a4e4:	b9b2      	cbnz	r2, 800a514 <quorem+0x1b4>
 800a4e6:	3b04      	subs	r3, #4
 800a4e8:	ebc8 0003 	rsb	r0, r8, r3
 800a4ec:	1cc2      	adds	r2, r0, #3
 800a4ee:	0750      	lsls	r0, r2, #29
 800a4f0:	d50d      	bpl.n	800a50e <quorem+0x1ae>
 800a4f2:	3c01      	subs	r4, #1
 800a4f4:	4598      	cmp	r8, r3
 800a4f6:	d20d      	bcs.n	800a514 <quorem+0x1b4>
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	3b04      	subs	r3, #4
 800a4fc:	b13a      	cbz	r2, 800a50e <quorem+0x1ae>
 800a4fe:	e009      	b.n	800a514 <quorem+0x1b4>
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	3b04      	subs	r3, #4
 800a504:	b930      	cbnz	r0, 800a514 <quorem+0x1b4>
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	3c01      	subs	r4, #1
 800a50a:	3b04      	subs	r3, #4
 800a50c:	b912      	cbnz	r2, 800a514 <quorem+0x1b4>
 800a50e:	3c01      	subs	r4, #1
 800a510:	4598      	cmp	r8, r3
 800a512:	d3f5      	bcc.n	800a500 <quorem+0x1a0>
 800a514:	6134      	str	r4, [r6, #16]
 800a516:	4630      	mov	r0, r6
 800a518:	f002 fd0e 	bl	800cf38 <__mcmp>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f2c0 8082 	blt.w	800a626 <quorem+0x2c6>
 800a522:	9a01      	ldr	r2, [sp, #4]
 800a524:	f8d8 1000 	ldr.w	r1, [r8]
 800a528:	f852 0b04 	ldr.w	r0, [r2], #4
 800a52c:	fa1f fc81 	uxth.w	ip, r1
 800a530:	b283      	uxth	r3, r0
 800a532:	0c00      	lsrs	r0, r0, #16
 800a534:	ebc3 030c 	rsb	r3, r3, ip
 800a538:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
 800a53c:	eb01 4023 	add.w	r0, r1, r3, asr #16
 800a540:	fa1f fe83 	uxth.w	lr, r3
 800a544:	9b01      	ldr	r3, [sp, #4]
 800a546:	ea4e 4c00 	orr.w	ip, lr, r0, lsl #16
 800a54a:	1af9      	subs	r1, r7, r3
 800a54c:	3501      	adds	r5, #1
 800a54e:	4643      	mov	r3, r8
 800a550:	1400      	asrs	r0, r0, #16
 800a552:	4297      	cmp	r7, r2
 800a554:	f843 cb04 	str.w	ip, [r3], #4
 800a558:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800a55c:	d34b      	bcc.n	800a5f6 <quorem+0x296>
 800a55e:	b1b9      	cbz	r1, 800a590 <quorem+0x230>
 800a560:	f852 eb04 	ldr.w	lr, [r2], #4
 800a564:	6819      	ldr	r1, [r3, #0]
 800a566:	fa1f f98e 	uxth.w	r9, lr
 800a56a:	fa1f fa81 	uxth.w	sl, r1
 800a56e:	ebc9 090a 	rsb	r9, r9, sl
 800a572:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
 800a576:	4448      	add	r0, r9
 800a578:	ebcc 4111 	rsb	r1, ip, r1, lsr #16
 800a57c:	eb01 4120 	add.w	r1, r1, r0, asr #16
 800a580:	b280      	uxth	r0, r0
 800a582:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800a586:	f843 0b04 	str.w	r0, [r3], #4
 800a58a:	1408      	asrs	r0, r1, #16
 800a58c:	4297      	cmp	r7, r2
 800a58e:	d332      	bcc.n	800a5f6 <quorem+0x296>
 800a590:	4682      	mov	sl, r0
 800a592:	4611      	mov	r1, r2
 800a594:	f851 0b04 	ldr.w	r0, [r1], #4
 800a598:	f8d3 e000 	ldr.w	lr, [r3]
 800a59c:	fa1f f980 	uxth.w	r9, r0
 800a5a0:	fa1f fb8e 	uxth.w	fp, lr
 800a5a4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800a5a8:	ebc9 0b0b 	rsb	fp, r9, fp
 800a5ac:	eb0b 000a 	add.w	r0, fp, sl
 800a5b0:	ebcc 4a1e 	rsb	sl, ip, lr, lsr #16
 800a5b4:	eb0a 4920 	add.w	r9, sl, r0, asr #16
 800a5b8:	b280      	uxth	r0, r0
 800a5ba:	469e      	mov	lr, r3
 800a5bc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800a5c0:	f84e 0b04 	str.w	r0, [lr], #4
 800a5c4:	6850      	ldr	r0, [r2, #4]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	b283      	uxth	r3, r0
 800a5ca:	fa1f fc82 	uxth.w	ip, r2
 800a5ce:	0c00      	lsrs	r0, r0, #16
 800a5d0:	ebc3 030c 	rsb	r3, r3, ip
 800a5d4:	eb03 4329 	add.w	r3, r3, r9, asr #16
 800a5d8:	ebc0 4212 	rsb	r2, r0, r2, lsr #16
 800a5dc:	eb02 4023 	add.w	r0, r2, r3, asr #16
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	ea42 4a00 	orr.w	sl, r2, r0, lsl #16
 800a5e6:	1d0a      	adds	r2, r1, #4
 800a5e8:	4673      	mov	r3, lr
 800a5ea:	4297      	cmp	r7, r2
 800a5ec:	f843 ab04 	str.w	sl, [r3], #4
 800a5f0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800a5f4:	d2cd      	bcs.n	800a592 <quorem+0x232>
 800a5f6:	1d21      	adds	r1, r4, #4
 800a5f8:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 800a5fc:	6858      	ldr	r0, [r3, #4]
 800a5fe:	b990      	cbnz	r0, 800a626 <quorem+0x2c6>
 800a600:	1d1a      	adds	r2, r3, #4
 800a602:	4598      	cmp	r8, r3
 800a604:	d20e      	bcs.n	800a624 <quorem+0x2c4>
 800a606:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800a60a:	b959      	cbnz	r1, 800a624 <quorem+0x2c4>
 800a60c:	3b04      	subs	r3, #4
 800a60e:	ebc8 0003 	rsb	r0, r8, r3
 800a612:	1cc2      	adds	r2, r0, #3
 800a614:	0752      	lsls	r2, r2, #29
 800a616:	d513      	bpl.n	800a640 <quorem+0x2e0>
 800a618:	3c01      	subs	r4, #1
 800a61a:	4598      	cmp	r8, r3
 800a61c:	d202      	bcs.n	800a624 <quorem+0x2c4>
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	3b04      	subs	r3, #4
 800a622:	b168      	cbz	r0, 800a640 <quorem+0x2e0>
 800a624:	6134      	str	r4, [r6, #16]
 800a626:	4628      	mov	r0, r5
 800a628:	b003      	add	sp, #12
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	3b04      	subs	r3, #4
 800a632:	2a00      	cmp	r2, #0
 800a634:	d1f6      	bne.n	800a624 <quorem+0x2c4>
 800a636:	6819      	ldr	r1, [r3, #0]
 800a638:	3c01      	subs	r4, #1
 800a63a:	3b04      	subs	r3, #4
 800a63c:	2900      	cmp	r1, #0
 800a63e:	d1f1      	bne.n	800a624 <quorem+0x2c4>
 800a640:	3c01      	subs	r4, #1
 800a642:	4598      	cmp	r8, r3
 800a644:	d3f3      	bcc.n	800a62e <quorem+0x2ce>
 800a646:	e7ed      	b.n	800a624 <quorem+0x2c4>
 800a648:	2000      	movs	r0, #0
 800a64a:	e7ed      	b.n	800a628 <quorem+0x2c8>
 800a64c:	0000      	movs	r0, r0
	...

0800a650 <_dtoa_r>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a656:	b09f      	sub	sp, #124	; 0x7c
 800a658:	4681      	mov	r9, r0
 800a65a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800a65c:	4692      	mov	sl, r2
 800a65e:	469b      	mov	fp, r3
 800a660:	b151      	cbz	r1, 800a678 <_dtoa_r+0x28>
 800a662:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a664:	2201      	movs	r2, #1
 800a666:	fa02 f203 	lsl.w	r2, r2, r3
 800a66a:	604b      	str	r3, [r1, #4]
 800a66c:	608a      	str	r2, [r1, #8]
 800a66e:	f002 f87d 	bl	800c76c <_Bfree>
 800a672:	2000      	movs	r0, #0
 800a674:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a678:	f1bb 0800 	subs.w	r8, fp, #0
 800a67c:	db39      	blt.n	800a6f2 <_dtoa_r+0xa2>
 800a67e:	2100      	movs	r1, #0
 800a680:	6021      	str	r1, [r4, #0]
 800a682:	2400      	movs	r4, #0
 800a684:	4622      	mov	r2, r4
 800a686:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
 800a68a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800a68e:	ea08 0304 	and.w	r3, r8, r4
 800a692:	4293      	cmp	r3, r2
 800a694:	d016      	beq.n	800a6c4 <_dtoa_r+0x74>
 800a696:	4650      	mov	r0, sl
 800a698:	4659      	mov	r1, fp
 800a69a:	2200      	movs	r2, #0
 800a69c:	2300      	movs	r3, #0
 800a69e:	f7f6 f8d3 	bl	8000848 <__aeabi_dcmpeq>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d02b      	beq.n	800a6fe <_dtoa_r+0xae>
 800a6a6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800a6a8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	6029      	str	r1, [r5, #0]
 800a6ae:	2c00      	cmp	r4, #0
 800a6b0:	f000 80cf 	beq.w	800a852 <_dtoa_r+0x202>
 800a6b4:	4aa2      	ldr	r2, [pc, #648]	; (800a940 <_dtoa_r+0x2f0>)
 800a6b6:	6022      	str	r2, [r4, #0]
 800a6b8:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 800a6bc:	4640      	mov	r0, r8
 800a6be:	b01f      	add	sp, #124	; 0x7c
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800a6c6:	f242 750f 	movw	r5, #9999	; 0x270f
 800a6ca:	6025      	str	r5, [r4, #0]
 800a6cc:	f1ba 0f00 	cmp.w	sl, #0
 800a6d0:	f000 80a6 	beq.w	800a820 <_dtoa_r+0x1d0>
 800a6d4:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800a948 <_dtoa_r+0x2f8>
 800a6d8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800a6da:	2d00      	cmp	r5, #0
 800a6dc:	d0ee      	beq.n	800a6bc <_dtoa_r+0x6c>
 800a6de:	f898 4003 	ldrb.w	r4, [r8, #3]
 800a6e2:	2c00      	cmp	r4, #0
 800a6e4:	f000 8208 	beq.w	800aaf8 <_dtoa_r+0x4a8>
 800a6e8:	f108 0108 	add.w	r1, r8, #8
 800a6ec:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800a6ee:	6021      	str	r1, [r4, #0]
 800a6f0:	e7e4      	b.n	800a6bc <_dtoa_r+0x6c>
 800a6f2:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 800a6f6:	2501      	movs	r5, #1
 800a6f8:	6025      	str	r5, [r4, #0]
 800a6fa:	46c3      	mov	fp, r8
 800a6fc:	e7c1      	b.n	800a682 <_dtoa_r+0x32>
 800a6fe:	ae1d      	add	r6, sp, #116	; 0x74
 800a700:	af1c      	add	r7, sp, #112	; 0x70
 800a702:	4652      	mov	r2, sl
 800a704:	9600      	str	r6, [sp, #0]
 800a706:	9701      	str	r7, [sp, #4]
 800a708:	4648      	mov	r0, r9
 800a70a:	465b      	mov	r3, fp
 800a70c:	f002 fdce 	bl	800d2ac <__d2b>
 800a710:	f3c8 520a 	ubfx	r2, r8, #20, #11
 800a714:	900b      	str	r0, [sp, #44]	; 0x2c
 800a716:	2a00      	cmp	r2, #0
 800a718:	f040 808c 	bne.w	800a834 <_dtoa_r+0x1e4>
 800a71c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a71e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a720:	f46f 6182 	mvn.w	r1, #1040	; 0x410
 800a724:	183e      	adds	r6, r7, r0
 800a726:	428e      	cmp	r6, r1
 800a728:	f2c0 8318 	blt.w	800ad5c <_dtoa_r+0x70c>
 800a72c:	f64f 450e 	movw	r5, #64526	; 0xfc0e
 800a730:	f6cf 75ff 	movt	r5, #65535	; 0xffff
 800a734:	1ba8      	subs	r0, r5, r6
 800a736:	f206 4212 	addw	r2, r6, #1042	; 0x412
 800a73a:	fa08 f100 	lsl.w	r1, r8, r0
 800a73e:	fa2a f302 	lsr.w	r3, sl, r2
 800a742:	ea41 0003 	orr.w	r0, r1, r3
 800a746:	f7f5 fda1 	bl	800028c <__aeabi_ui2d>
 800a74a:	2401      	movs	r4, #1
 800a74c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a750:	3e01      	subs	r6, #1
 800a752:	940c      	str	r4, [sp, #48]	; 0x30
 800a754:	2300      	movs	r3, #0
 800a756:	2200      	movs	r2, #0
 800a758:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800a75c:	f7f5 fc58 	bl	8000010 <__aeabi_dsub>
 800a760:	a371      	add	r3, pc, #452	; (adr r3, 800a928 <_dtoa_r+0x2d8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fe07 	bl	8000378 <__aeabi_dmul>
 800a76a:	a371      	add	r3, pc, #452	; (adr r3, 800a930 <_dtoa_r+0x2e0>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 fc50 	bl	8000014 <__adddf3>
 800a774:	4604      	mov	r4, r0
 800a776:	4630      	mov	r0, r6
 800a778:	460d      	mov	r5, r1
 800a77a:	f7f5 fd97 	bl	80002ac <__aeabi_i2d>
 800a77e:	a36e      	add	r3, pc, #440	; (adr r3, 800a938 <_dtoa_r+0x2e8>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f5 fdf8 	bl	8000378 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4620      	mov	r0, r4
 800a78e:	4629      	mov	r1, r5
 800a790:	f7f5 fc40 	bl	8000014 <__adddf3>
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	f7f6 f888 	bl	80008ac <__aeabi_d2iz>
 800a79c:	4629      	mov	r1, r5
 800a79e:	9007      	str	r0, [sp, #28]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f7f6 f859 	bl	800085c <__aeabi_dcmplt>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	f040 82ac 	bne.w	800ad08 <_dtoa_r+0x6b8>
 800a7b0:	9c07      	ldr	r4, [sp, #28]
 800a7b2:	2c16      	cmp	r4, #22
 800a7b4:	f200 82a5 	bhi.w	800ad02 <_dtoa_r+0x6b2>
 800a7b8:	4d62      	ldr	r5, [pc, #392]	; (800a944 <_dtoa_r+0x2f4>)
 800a7ba:	4652      	mov	r2, sl
 800a7bc:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800a7c0:	465b      	mov	r3, fp
 800a7c2:	c803      	ldmia	r0, {r0, r1}
 800a7c4:	f7f6 f868 	bl	8000898 <__aeabi_dcmpgt>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f000 82cf 	beq.w	800ad6c <_dtoa_r+0x71c>
 800a7ce:	9a07      	ldr	r2, [sp, #28]
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	1e51      	subs	r1, r2, #1
 800a7d4:	9107      	str	r1, [sp, #28]
 800a7d6:	9410      	str	r4, [sp, #64]	; 0x40
 800a7d8:	1bbe      	subs	r6, r7, r6
 800a7da:	3e01      	subs	r6, #1
 800a7dc:	f100 82ab 	bmi.w	800ad36 <_dtoa_r+0x6e6>
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	9608      	str	r6, [sp, #32]
 800a7e4:	950a      	str	r5, [sp, #40]	; 0x28
 800a7e6:	9807      	ldr	r0, [sp, #28]
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	f2c0 829b 	blt.w	800ad24 <_dtoa_r+0x6d4>
 800a7ee:	9a08      	ldr	r2, [sp, #32]
 800a7f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7f2:	1811      	adds	r1, r2, r0
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	9108      	str	r1, [sp, #32]
 800a7f8:	900e      	str	r0, [sp, #56]	; 0x38
 800a7fa:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800a7fc:	2c09      	cmp	r4, #9
 800a7fe:	d82b      	bhi.n	800a858 <_dtoa_r+0x208>
 800a800:	2c05      	cmp	r4, #5
 800a802:	f341 801e 	ble.w	800b842 <_dtoa_r+0x11f2>
 800a806:	1f23      	subs	r3, r4, #4
 800a808:	9328      	str	r3, [sp, #160]	; 0xa0
 800a80a:	2500      	movs	r5, #0
 800a80c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a80e:	1e91      	subs	r1, r2, #2
 800a810:	2903      	cmp	r1, #3
 800a812:	d823      	bhi.n	800a85c <_dtoa_r+0x20c>
 800a814:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a818:	05130525 	.word	0x05130525
 800a81c:	0522032b 	.word	0x0522032b
 800a820:	4b49      	ldr	r3, [pc, #292]	; (800a948 <_dtoa_r+0x2f8>)
 800a822:	484a      	ldr	r0, [pc, #296]	; (800a94c <_dtoa_r+0x2fc>)
 800a824:	f3c8 0813 	ubfx	r8, r8, #0, #20
 800a828:	f1b8 0f00 	cmp.w	r8, #0
 800a82c:	bf0c      	ite	eq
 800a82e:	4680      	moveq	r8, r0
 800a830:	4698      	movne	r8, r3
 800a832:	e751      	b.n	800a6d8 <_dtoa_r+0x88>
 800a834:	f02b 477f 	bic.w	r7, fp, #4278190080	; 0xff000000
 800a838:	f427 0470 	bic.w	r4, r7, #15728640	; 0xf00000
 800a83c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a840:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a844:	2200      	movs	r2, #0
 800a846:	4650      	mov	r0, sl
 800a848:	f445 1140 	orr.w	r1, r5, #3145728	; 0x300000
 800a84c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a84e:	920c      	str	r2, [sp, #48]	; 0x30
 800a850:	e780      	b.n	800a754 <_dtoa_r+0x104>
 800a852:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800a950 <_dtoa_r+0x300>
 800a856:	e731      	b.n	800a6bc <_dtoa_r+0x6c>
 800a858:	2500      	movs	r5, #0
 800a85a:	9528      	str	r5, [sp, #160]	; 0xa0
 800a85c:	2400      	movs	r4, #0
 800a85e:	4621      	mov	r1, r4
 800a860:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800a864:	4648      	mov	r0, r9
 800a866:	f001 ff5b 	bl	800c720 <_Balloc>
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a86e:	2101      	movs	r1, #1
 800a870:	4680      	mov	r8, r0
 800a872:	9309      	str	r3, [sp, #36]	; 0x24
 800a874:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a878:	9311      	str	r3, [sp, #68]	; 0x44
 800a87a:	9429      	str	r4, [sp, #164]	; 0xa4
 800a87c:	910d      	str	r1, [sp, #52]	; 0x34
 800a87e:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a880:	2800      	cmp	r0, #0
 800a882:	f2c0 813c 	blt.w	800aafe <_dtoa_r+0x4ae>
 800a886:	9a07      	ldr	r2, [sp, #28]
 800a888:	2a0e      	cmp	r2, #14
 800a88a:	f300 8138 	bgt.w	800aafe <_dtoa_r+0x4ae>
 800a88e:	4d2d      	ldr	r5, [pc, #180]	; (800a944 <_dtoa_r+0x2f4>)
 800a890:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800a892:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 800a896:	2b00      	cmp	r3, #0
 800a898:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a89c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a8a0:	f2c0 84e2 	blt.w	800b268 <_dtoa_r+0xc18>
 800a8a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	4659      	mov	r1, fp
 800a8ac:	f7f5 fe8e 	bl	80005cc <__aeabi_ddiv>
 800a8b0:	f7f5 fffc 	bl	80008ac <__aeabi_d2iz>
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	f7f5 fcf9 	bl	80002ac <__aeabi_i2d>
 800a8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8be:	f7f5 fd5b 	bl	8000378 <__aeabi_dmul>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4650      	mov	r0, sl
 800a8c8:	4659      	mov	r1, fp
 800a8ca:	f7f5 fba1 	bl	8000010 <__aeabi_dsub>
 800a8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d0:	f106 0230 	add.w	r2, r6, #48	; 0x30
 800a8d4:	46c2      	mov	sl, r8
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	4604      	mov	r4, r0
 800a8da:	460d      	mov	r5, r1
 800a8dc:	f80a 2b01 	strb.w	r2, [sl], #1
 800a8e0:	f000 8095 	beq.w	800aa0e <_dtoa_r+0x3be>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a8ec:	f7f5 fd44 	bl	8000378 <__aeabi_dmul>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	f7f5 ffa6 	bl	8000848 <__aeabi_dcmpeq>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f040 80be 	bne.w	800aa7e <_dtoa_r+0x42e>
 800a902:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a904:	f108 0702 	add.w	r7, r8, #2
 800a908:	eb08 0b06 	add.w	fp, r8, r6
 800a90c:	ebc7 000b 	rsb	r0, r7, fp
 800a910:	07c2      	lsls	r2, r0, #31
 800a912:	f100 80c6 	bmi.w	800aaa2 <_dtoa_r+0x452>
 800a916:	f8cd 8018 	str.w	r8, [sp, #24]
 800a91a:	f8cd 9020 	str.w	r9, [sp, #32]
 800a91e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a922:	e04c      	b.n	800a9be <_dtoa_r+0x36e>
 800a924:	f3af 8000 	nop.w
 800a928:	636f4361 	.word	0x636f4361
 800a92c:	3fd287a7 	.word	0x3fd287a7
 800a930:	8b60c8b3 	.word	0x8b60c8b3
 800a934:	3fc68a28 	.word	0x3fc68a28
 800a938:	509f79fb 	.word	0x509f79fb
 800a93c:	3fd34413 	.word	0x3fd34413
 800a940:	0800dfd1 	.word	0x0800dfd1
 800a944:	0800e030 	.word	0x0800e030
 800a948:	0800e000 	.word	0x0800e000
 800a94c:	0800dff4 	.word	0x0800dff4
 800a950:	0800dfd0 	.word	0x0800dfd0
 800a954:	f7f5 fd10 	bl	8000378 <__aeabi_dmul>
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	4604      	mov	r4, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	f7f5 ff72 	bl	8000848 <__aeabi_dcmpeq>
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	2800      	cmp	r0, #0
 800a96a:	f040 8575 	bne.w	800b458 <_dtoa_r+0xe08>
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fe2b 	bl	80005cc <__aeabi_ddiv>
 800a976:	f7f5 ff99 	bl	80008ac <__aeabi_d2iz>
 800a97a:	4606      	mov	r6, r0
 800a97c:	f7f5 fc96 	bl	80002ac <__aeabi_i2d>
 800a980:	4642      	mov	r2, r8
 800a982:	464b      	mov	r3, r9
 800a984:	f7f5 fcf8 	bl	8000378 <__aeabi_dmul>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fb3e 	bl	8000010 <__aeabi_dsub>
 800a994:	3630      	adds	r6, #48	; 0x30
 800a996:	2300      	movs	r3, #0
 800a998:	2200      	movs	r2, #0
 800a99a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a99e:	f807 6c01 	strb.w	r6, [r7, #-1]
 800a9a2:	f7f5 fce9 	bl	8000378 <__aeabi_dmul>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	46ba      	mov	sl, r7
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	f107 0701 	add.w	r7, r7, #1
 800a9b4:	f7f5 ff48 	bl	8000848 <__aeabi_dcmpeq>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f040 854d 	bne.w	800b458 <_dtoa_r+0xe08>
 800a9be:	4642      	mov	r2, r8
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7f5 fe01 	bl	80005cc <__aeabi_ddiv>
 800a9ca:	f7f5 ff6f 	bl	80008ac <__aeabi_d2iz>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	f7f5 fc6c 	bl	80002ac <__aeabi_i2d>
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	f7f5 fcce 	bl	8000378 <__aeabi_dmul>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	f7f5 fb14 	bl	8000010 <__aeabi_dsub>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f106 0c30 	add.w	ip, r6, #48	; 0x30
 800a9f0:	455f      	cmp	r7, fp
 800a9f2:	f807 cc01 	strb.w	ip, [r7, #-1]
 800a9f6:	46ba      	mov	sl, r7
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	460d      	mov	r5, r1
 800a9fc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800aa00:	f107 0701 	add.w	r7, r7, #1
 800aa04:	d1a6      	bne.n	800a954 <_dtoa_r+0x304>
 800aa06:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aa0a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa0e:	4622      	mov	r2, r4
 800aa10:	462b      	mov	r3, r5
 800aa12:	4620      	mov	r0, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	f7f5 fafd 	bl	8000014 <__adddf3>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	4622      	mov	r2, r4
 800aa20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa24:	462b      	mov	r3, r5
 800aa26:	f7f5 ff19 	bl	800085c <__aeabi_dcmplt>
 800aa2a:	b940      	cbnz	r0, 800aa3e <_dtoa_r+0x3ee>
 800aa2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	f7f5 ff08 	bl	8000848 <__aeabi_dcmpeq>
 800aa38:	b308      	cbz	r0, 800aa7e <_dtoa_r+0x42e>
 800aa3a:	07f0      	lsls	r0, r6, #31
 800aa3c:	d51f      	bpl.n	800aa7e <_dtoa_r+0x42e>
 800aa3e:	f81a 7c01 	ldrb.w	r7, [sl, #-1]
 800aa42:	ea6f 0108 	mvn.w	r1, r8
 800aa46:	eb0a 0201 	add.w	r2, sl, r1
 800aa4a:	07d1      	lsls	r1, r2, #31
 800aa4c:	d506      	bpl.n	800aa5c <_dtoa_r+0x40c>
 800aa4e:	2f39      	cmp	r7, #57	; 0x39
 800aa50:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800aa54:	d110      	bne.n	800aa78 <_dtoa_r+0x428>
 800aa56:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 800aa5a:	469a      	mov	sl, r3
 800aa5c:	2f39      	cmp	r7, #57	; 0x39
 800aa5e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800aa62:	d109      	bne.n	800aa78 <_dtoa_r+0x428>
 800aa64:	4598      	cmp	r8, r3
 800aa66:	f000 8505 	beq.w	800b474 <_dtoa_r+0xe24>
 800aa6a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 800aa6e:	469a      	mov	sl, r3
 800aa70:	2f39      	cmp	r7, #57	; 0x39
 800aa72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aa76:	d0ee      	beq.n	800aa56 <_dtoa_r+0x406>
 800aa78:	1c78      	adds	r0, r7, #1
 800aa7a:	b2c4      	uxtb	r4, r0
 800aa7c:	701c      	strb	r4, [r3, #0]
 800aa7e:	4648      	mov	r0, r9
 800aa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa82:	f001 fe73 	bl	800c76c <_Bfree>
 800aa86:	2400      	movs	r4, #0
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	f88a 4000 	strb.w	r4, [sl]
 800aa8e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800aa90:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800aa92:	1c58      	adds	r0, r3, #1
 800aa94:	6028      	str	r0, [r5, #0]
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	f43f ae10 	beq.w	800a6bc <_dtoa_r+0x6c>
 800aa9c:	f8c4 a000 	str.w	sl, [r4]
 800aaa0:	e60c      	b.n	800a6bc <_dtoa_r+0x6c>
 800aaa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f7f5 fd8f 	bl	80005cc <__aeabi_ddiv>
 800aaae:	f7f5 fefd 	bl	80008ac <__aeabi_d2iz>
 800aab2:	4606      	mov	r6, r0
 800aab4:	f7f5 fbfa 	bl	80002ac <__aeabi_i2d>
 800aab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aabc:	f7f5 fc5c 	bl	8000378 <__aeabi_dmul>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4620      	mov	r0, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 faa2 	bl	8000010 <__aeabi_dsub>
 800aacc:	3630      	adds	r6, #48	; 0x30
 800aace:	2300      	movs	r3, #0
 800aad0:	2200      	movs	r2, #0
 800aad2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800aad6:	f807 6c01 	strb.w	r6, [r7, #-1]
 800aada:	f7f5 fc4d 	bl	8000378 <__aeabi_dmul>
 800aade:	2200      	movs	r2, #0
 800aae0:	2300      	movs	r3, #0
 800aae2:	46ba      	mov	sl, r7
 800aae4:	4604      	mov	r4, r0
 800aae6:	460d      	mov	r5, r1
 800aae8:	f108 0703 	add.w	r7, r8, #3
 800aaec:	f7f5 feac 	bl	8000848 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	f43f af10 	beq.w	800a916 <_dtoa_r+0x2c6>
 800aaf6:	e7c2      	b.n	800aa7e <_dtoa_r+0x42e>
 800aaf8:	f108 0103 	add.w	r1, r8, #3
 800aafc:	e5f6      	b.n	800a6ec <_dtoa_r+0x9c>
 800aafe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	f000 811d 	beq.w	800ad40 <_dtoa_r+0x6f0>
 800ab06:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800ab08:	2c01      	cmp	r4, #1
 800ab0a:	f340 83dc 	ble.w	800b2c6 <_dtoa_r+0xc76>
 800ab0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab12:	1e48      	subs	r0, r1, #1
 800ab14:	4282      	cmp	r2, r0
 800ab16:	f2c0 84b8 	blt.w	800b48a <_dtoa_r+0xe3a>
 800ab1a:	1a15      	subs	r5, r2, r0
 800ab1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab1e:	2900      	cmp	r1, #0
 800ab20:	f2c0 8607 	blt.w	800b732 <_dtoa_r+0x10e2>
 800ab24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab2a:	4648      	mov	r0, r9
 800ab2c:	19d3      	adds	r3, r2, r7
 800ab2e:	9a08      	ldr	r2, [sp, #32]
 800ab30:	2101      	movs	r1, #1
 800ab32:	19d7      	adds	r7, r2, r7
 800ab34:	930a      	str	r3, [sp, #40]	; 0x28
 800ab36:	9708      	str	r7, [sp, #32]
 800ab38:	f001 ff8c 	bl	800ca54 <__i2b>
 800ab3c:	900c      	str	r0, [sp, #48]	; 0x30
 800ab3e:	b164      	cbz	r4, 800ab5a <_dtoa_r+0x50a>
 800ab40:	9808      	ldr	r0, [sp, #32]
 800ab42:	2800      	cmp	r0, #0
 800ab44:	dd09      	ble.n	800ab5a <_dtoa_r+0x50a>
 800ab46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab48:	4603      	mov	r3, r0
 800ab4a:	42a3      	cmp	r3, r4
 800ab4c:	bfa8      	it	ge
 800ab4e:	4623      	movge	r3, r4
 800ab50:	1aca      	subs	r2, r1, r3
 800ab52:	1ac7      	subs	r7, r0, r3
 800ab54:	920a      	str	r2, [sp, #40]	; 0x28
 800ab56:	1ae4      	subs	r4, r4, r3
 800ab58:	9708      	str	r7, [sp, #32]
 800ab5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	dd1a      	ble.n	800ab96 <_dtoa_r+0x546>
 800ab60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 847e 	beq.w	800b464 <_dtoa_r+0xe14>
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	dd10      	ble.n	800ab8e <_dtoa_r+0x53e>
 800ab6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4648      	mov	r0, r9
 800ab72:	f002 f8e1 	bl	800cd38 <__pow5mult>
 800ab76:	900c      	str	r0, [sp, #48]	; 0x30
 800ab78:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab7c:	4648      	mov	r0, r9
 800ab7e:	f001 ff73 	bl	800ca68 <__multiply>
 800ab82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab84:	4606      	mov	r6, r0
 800ab86:	4648      	mov	r0, r9
 800ab88:	f001 fdf0 	bl	800c76c <_Bfree>
 800ab8c:	960b      	str	r6, [sp, #44]	; 0x2c
 800ab8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab90:	1b4a      	subs	r2, r1, r5
 800ab92:	f040 8392 	bne.w	800b2ba <_dtoa_r+0xc6a>
 800ab96:	2101      	movs	r1, #1
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f001 ff5b 	bl	800ca54 <__i2b>
 800ab9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aba0:	4607      	mov	r7, r0
 800aba2:	2d00      	cmp	r5, #0
 800aba4:	dd05      	ble.n	800abb2 <_dtoa_r+0x562>
 800aba6:	4639      	mov	r1, r7
 800aba8:	4648      	mov	r0, r9
 800abaa:	462a      	mov	r2, r5
 800abac:	f002 f8c4 	bl	800cd38 <__pow5mult>
 800abb0:	4607      	mov	r7, r0
 800abb2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800abb4:	2a01      	cmp	r2, #1
 800abb6:	f340 8141 	ble.w	800ae3c <_dtoa_r+0x7ec>
 800abba:	2500      	movs	r5, #0
 800abbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800abbe:	2900      	cmp	r1, #0
 800abc0:	f040 83f5 	bne.w	800b3ae <_dtoa_r+0xd5e>
 800abc4:	2201      	movs	r2, #1
 800abc6:	9908      	ldr	r1, [sp, #32]
 800abc8:	1852      	adds	r2, r2, r1
 800abca:	f012 001f 	ands.w	r0, r2, #31
 800abce:	f000 80bc 	beq.w	800ad4a <_dtoa_r+0x6fa>
 800abd2:	f1c0 0220 	rsb	r2, r0, #32
 800abd6:	2a04      	cmp	r2, #4
 800abd8:	f340 862d 	ble.w	800b836 <_dtoa_r+0x11e6>
 800abdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abde:	f1c0 001c 	rsb	r0, r0, #28
 800abe2:	1813      	adds	r3, r2, r0
 800abe4:	1809      	adds	r1, r1, r0
 800abe6:	930a      	str	r3, [sp, #40]	; 0x28
 800abe8:	1824      	adds	r4, r4, r0
 800abea:	9108      	str	r1, [sp, #32]
 800abec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abee:	2a00      	cmp	r2, #0
 800abf0:	dd04      	ble.n	800abfc <_dtoa_r+0x5ac>
 800abf2:	4648      	mov	r0, r9
 800abf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abf6:	f002 f8e9 	bl	800cdcc <__lshift>
 800abfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800abfc:	9a08      	ldr	r2, [sp, #32]
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	dd04      	ble.n	800ac0c <_dtoa_r+0x5bc>
 800ac02:	4639      	mov	r1, r7
 800ac04:	4648      	mov	r0, r9
 800ac06:	f002 f8e1 	bl	800cdcc <__lshift>
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	f040 83b5 	bne.w	800b37e <_dtoa_r+0xd2e>
 800ac14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac16:	2900      	cmp	r1, #0
 800ac18:	f340 83d2 	ble.w	800b3c0 <_dtoa_r+0xd70>
 800ac1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f040 80a6 	bne.w	800ad70 <_dtoa_r+0x720>
 800ac24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ac26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ac28:	07e3      	lsls	r3, r4, #31
 800ac2a:	f140 8389 	bpl.w	800b340 <_dtoa_r+0xcf0>
 800ac2e:	46a2      	mov	sl, r4
 800ac30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ac32:	e010      	b.n	800ac56 <_dtoa_r+0x606>
 800ac34:	f001 fda4 	bl	800c780 <__multadd>
 800ac38:	4639      	mov	r1, r7
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	f7ff fb90 	bl	800a360 <quorem>
 800ac40:	3030      	adds	r0, #48	; 0x30
 800ac42:	f808 0004 	strb.w	r0, [r8, r4]
 800ac46:	4631      	mov	r1, r6
 800ac48:	4648      	mov	r0, r9
 800ac4a:	220a      	movs	r2, #10
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f001 fd97 	bl	800c780 <__multadd>
 800ac52:	1c65      	adds	r5, r4, #1
 800ac54:	4606      	mov	r6, r0
 800ac56:	4639      	mov	r1, r7
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff fb81 	bl	800a360 <quorem>
 800ac5e:	1c6c      	adds	r4, r5, #1
 800ac60:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800ac64:	220a      	movs	r2, #10
 800ac66:	2300      	movs	r3, #0
 800ac68:	45a2      	cmp	sl, r4
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4648      	mov	r0, r9
 800ac6e:	f808 b005 	strb.w	fp, [r8, r5]
 800ac72:	dcdf      	bgt.n	800ac34 <_dtoa_r+0x5e4>
 800ac74:	960b      	str	r6, [sp, #44]	; 0x2c
 800ac76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac78:	2500      	movs	r5, #0
 800ac7a:	2901      	cmp	r1, #1
 800ac7c:	bfac      	ite	ge
 800ac7e:	eb08 0a01 	addge.w	sl, r8, r1
 800ac82:	f108 0a01 	addlt.w	sl, r8, #1
 800ac86:	2201      	movs	r2, #1
 800ac88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac8a:	4648      	mov	r0, r9
 800ac8c:	f002 f89e 	bl	800cdcc <__lshift>
 800ac90:	4639      	mov	r1, r7
 800ac92:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac94:	f002 f950 	bl	800cf38 <__mcmp>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	f340 842b 	ble.w	800b4f4 <_dtoa_r+0xea4>
 800ac9e:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
 800aca2:	ea6f 0308 	mvn.w	r3, r8
 800aca6:	eb0a 0103 	add.w	r1, sl, r3
 800acaa:	07cc      	lsls	r4, r1, #31
 800acac:	d506      	bpl.n	800acbc <_dtoa_r+0x66c>
 800acae:	2a39      	cmp	r2, #57	; 0x39
 800acb0:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 800acb4:	d110      	bne.n	800acd8 <_dtoa_r+0x688>
 800acb6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800acba:	46a2      	mov	sl, r4
 800acbc:	2a39      	cmp	r2, #57	; 0x39
 800acbe:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 800acc2:	d109      	bne.n	800acd8 <_dtoa_r+0x688>
 800acc4:	45a0      	cmp	r8, r4
 800acc6:	f000 8353 	beq.w	800b370 <_dtoa_r+0xd20>
 800acca:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800acce:	46a2      	mov	sl, r4
 800acd0:	2a39      	cmp	r2, #57	; 0x39
 800acd2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800acd6:	d0ee      	beq.n	800acb6 <_dtoa_r+0x666>
 800acd8:	1c50      	adds	r0, r2, #1
 800acda:	7020      	strb	r0, [r4, #0]
 800acdc:	4648      	mov	r0, r9
 800acde:	4639      	mov	r1, r7
 800ace0:	f001 fd44 	bl	800c76c <_Bfree>
 800ace4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	f43f aec9 	beq.w	800aa7e <_dtoa_r+0x42e>
 800acec:	2d00      	cmp	r5, #0
 800acee:	f000 82de 	beq.w	800b2ae <_dtoa_r+0xc5e>
 800acf2:	4295      	cmp	r5, r2
 800acf4:	f000 82db 	beq.w	800b2ae <_dtoa_r+0xc5e>
 800acf8:	4648      	mov	r0, r9
 800acfa:	4629      	mov	r1, r5
 800acfc:	f001 fd36 	bl	800c76c <_Bfree>
 800ad00:	e2d5      	b.n	800b2ae <_dtoa_r+0xc5e>
 800ad02:	2301      	movs	r3, #1
 800ad04:	9310      	str	r3, [sp, #64]	; 0x40
 800ad06:	e567      	b.n	800a7d8 <_dtoa_r+0x188>
 800ad08:	9807      	ldr	r0, [sp, #28]
 800ad0a:	f7f5 facf 	bl	80002ac <__aeabi_i2d>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	462b      	mov	r3, r5
 800ad12:	f7f5 fd99 	bl	8000848 <__aeabi_dcmpeq>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f47f ad4a 	bne.w	800a7b0 <_dtoa_r+0x160>
 800ad1c:	9807      	ldr	r0, [sp, #28]
 800ad1e:	1e41      	subs	r1, r0, #1
 800ad20:	9107      	str	r1, [sp, #28]
 800ad22:	e545      	b.n	800a7b0 <_dtoa_r+0x160>
 800ad24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad26:	9907      	ldr	r1, [sp, #28]
 800ad28:	2500      	movs	r5, #0
 800ad2a:	1a54      	subs	r4, r2, r1
 800ad2c:	424b      	negs	r3, r1
 800ad2e:	940a      	str	r4, [sp, #40]	; 0x28
 800ad30:	930e      	str	r3, [sp, #56]	; 0x38
 800ad32:	950f      	str	r5, [sp, #60]	; 0x3c
 800ad34:	e561      	b.n	800a7fa <_dtoa_r+0x1aa>
 800ad36:	4276      	negs	r6, r6
 800ad38:	2300      	movs	r3, #0
 800ad3a:	960a      	str	r6, [sp, #40]	; 0x28
 800ad3c:	9308      	str	r3, [sp, #32]
 800ad3e:	e552      	b.n	800a7e6 <_dtoa_r+0x196>
 800ad40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ad44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad46:	930c      	str	r3, [sp, #48]	; 0x30
 800ad48:	e6f9      	b.n	800ab3e <_dtoa_r+0x4ee>
 800ad4a:	231c      	movs	r3, #28
 800ad4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad4e:	9a08      	ldr	r2, [sp, #32]
 800ad50:	18c8      	adds	r0, r1, r3
 800ad52:	18e4      	adds	r4, r4, r3
 800ad54:	18d3      	adds	r3, r2, r3
 800ad56:	900a      	str	r0, [sp, #40]	; 0x28
 800ad58:	9308      	str	r3, [sp, #32]
 800ad5a:	e747      	b.n	800abec <_dtoa_r+0x59c>
 800ad5c:	f64f 33ee 	movw	r3, #64494	; 0xfbee
 800ad60:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800ad64:	1b9c      	subs	r4, r3, r6
 800ad66:	fa0a f004 	lsl.w	r0, sl, r4
 800ad6a:	e4ec      	b.n	800a746 <_dtoa_r+0xf6>
 800ad6c:	9010      	str	r0, [sp, #64]	; 0x40
 800ad6e:	e533      	b.n	800a7d8 <_dtoa_r+0x188>
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	dd05      	ble.n	800ad80 <_dtoa_r+0x730>
 800ad74:	4648      	mov	r0, r9
 800ad76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad78:	4622      	mov	r2, r4
 800ad7a:	f002 f827 	bl	800cdcc <__lshift>
 800ad7e:	900c      	str	r0, [sp, #48]	; 0x30
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	f040 83f0 	bne.w	800b566 <_dtoa_r+0xf16>
 800ad86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad8a:	f108 0401 	add.w	r4, r8, #1
 800ad8e:	eb08 0100 	add.w	r1, r8, r0
 800ad92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad94:	f00a 0201 	and.w	r2, sl, #1
 800ad98:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800ad9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ada0:	9109      	str	r1, [sp, #36]	; 0x24
 800ada2:	920a      	str	r2, [sp, #40]	; 0x28
 800ada4:	4639      	mov	r1, r7
 800ada6:	4640      	mov	r0, r8
 800ada8:	f7ff fada 	bl	800a360 <quorem>
 800adac:	4629      	mov	r1, r5
 800adae:	4682      	mov	sl, r0
 800adb0:	4640      	mov	r0, r8
 800adb2:	f002 f8c1 	bl	800cf38 <__mcmp>
 800adb6:	4632      	mov	r2, r6
 800adb8:	9006      	str	r0, [sp, #24]
 800adba:	4639      	mov	r1, r7
 800adbc:	4648      	mov	r0, r9
 800adbe:	f002 f8e9 	bl	800cf94 <__mdiff>
 800adc2:	68c3      	ldr	r3, [r0, #12]
 800adc4:	4602      	mov	r2, r0
 800adc6:	1e60      	subs	r0, r4, #1
 800adc8:	9008      	str	r0, [sp, #32]
 800adca:	f10a 0b30 	add.w	fp, sl, #48	; 0x30
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 8282 	beq.w	800b2d8 <_dtoa_r+0xc88>
 800add4:	4648      	mov	r0, r9
 800add6:	4611      	mov	r1, r2
 800add8:	f001 fcc8 	bl	800c76c <_Bfree>
 800addc:	2301      	movs	r3, #1
 800adde:	9906      	ldr	r1, [sp, #24]
 800ade0:	2900      	cmp	r1, #0
 800ade2:	f2c0 8366 	blt.w	800b4b2 <_dtoa_r+0xe62>
 800ade6:	d105      	bne.n	800adf4 <_dtoa_r+0x7a4>
 800ade8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800adea:	b91a      	cbnz	r2, 800adf4 <_dtoa_r+0x7a4>
 800adec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adee:	2800      	cmp	r0, #0
 800adf0:	f000 835f 	beq.w	800b4b2 <_dtoa_r+0xe62>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f300 83ce 	bgt.w	800b596 <_dtoa_r+0xf46>
 800adfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfc:	f804 bc01 	strb.w	fp, [r4, #-1]
 800ae00:	429c      	cmp	r4, r3
 800ae02:	46a2      	mov	sl, r4
 800ae04:	f000 83d7 	beq.w	800b5b6 <_dtoa_r+0xf66>
 800ae08:	4641      	mov	r1, r8
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4648      	mov	r0, r9
 800ae10:	f001 fcb6 	bl	800c780 <__multadd>
 800ae14:	42b5      	cmp	r5, r6
 800ae16:	4680      	mov	r8, r0
 800ae18:	f000 8288 	beq.w	800b32c <_dtoa_r+0xcdc>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	220a      	movs	r2, #10
 800ae20:	2300      	movs	r3, #0
 800ae22:	4648      	mov	r0, r9
 800ae24:	f001 fcac 	bl	800c780 <__multadd>
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	220a      	movs	r2, #10
 800ae2e:	4648      	mov	r0, r9
 800ae30:	2300      	movs	r3, #0
 800ae32:	f001 fca5 	bl	800c780 <__multadd>
 800ae36:	3401      	adds	r4, #1
 800ae38:	4606      	mov	r6, r0
 800ae3a:	e7b3      	b.n	800ada4 <_dtoa_r+0x754>
 800ae3c:	f1ba 0f00 	cmp.w	sl, #0
 800ae40:	f47f aebb 	bne.w	800abba <_dtoa_r+0x56a>
 800ae44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae48:	4658      	mov	r0, fp
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f040 8476 	bne.w	800b73c <_dtoa_r+0x10ec>
 800ae50:	2500      	movs	r5, #0
 800ae52:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
 800ae56:	4005      	ands	r5, r0
 800ae58:	2d00      	cmp	r5, #0
 800ae5a:	f43f aeaf 	beq.w	800abbc <_dtoa_r+0x56c>
 800ae5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae60:	9808      	ldr	r0, [sp, #32]
 800ae62:	1c4a      	adds	r2, r1, #1
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	920a      	str	r2, [sp, #40]	; 0x28
 800ae68:	9308      	str	r3, [sp, #32]
 800ae6a:	2501      	movs	r5, #1
 800ae6c:	e6a6      	b.n	800abbc <_dtoa_r+0x56c>
 800ae6e:	2001      	movs	r0, #1
 800ae70:	900d      	str	r0, [sp, #52]	; 0x34
 800ae72:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ae74:	2a00      	cmp	r2, #0
 800ae76:	f340 8317 	ble.w	800b4a8 <_dtoa_r+0xe58>
 800ae7a:	4614      	mov	r4, r2
 800ae7c:	9211      	str	r2, [sp, #68]	; 0x44
 800ae7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae80:	2100      	movs	r1, #0
 800ae82:	2c17      	cmp	r4, #23
 800ae84:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ae88:	d90a      	bls.n	800aea0 <_dtoa_r+0x850>
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	f103 0014 	add.w	r0, r3, #20
 800ae94:	4611      	mov	r1, r2
 800ae96:	3201      	adds	r2, #1
 800ae98:	42a0      	cmp	r0, r4
 800ae9a:	d9f8      	bls.n	800ae8e <_dtoa_r+0x83e>
 800ae9c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800aea0:	4648      	mov	r0, r9
 800aea2:	f001 fc3d 	bl	800c720 <_Balloc>
 800aea6:	2c0e      	cmp	r4, #14
 800aea8:	4680      	mov	r8, r0
 800aeaa:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800aeae:	f63f ace6 	bhi.w	800a87e <_dtoa_r+0x22e>
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	f43f ace3 	beq.w	800a87e <_dtoa_r+0x22e>
 800aeb8:	9f07      	ldr	r7, [sp, #28]
 800aeba:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 800aebe:	2f00      	cmp	r7, #0
 800aec0:	f340 832e 	ble.w	800b520 <_dtoa_r+0xed0>
 800aec4:	4899      	ldr	r0, [pc, #612]	; (800b12c <_dtoa_r+0xadc>)
 800aec6:	f007 060f 	and.w	r6, r7, #15
 800aeca:	eb00 01c6 	add.w	r1, r0, r6, lsl #3
 800aece:	113e      	asrs	r6, r7, #4
 800aed0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aed4:	06f1      	lsls	r1, r6, #27
 800aed6:	f140 82e1 	bpl.w	800b49c <_dtoa_r+0xe4c>
 800aeda:	4f95      	ldr	r7, [pc, #596]	; (800b130 <_dtoa_r+0xae0>)
 800aedc:	4650      	mov	r0, sl
 800aede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aee2:	4659      	mov	r1, fp
 800aee4:	f7f5 fb72 	bl	80005cc <__aeabi_ddiv>
 800aee8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800aeec:	f006 060f 	and.w	r6, r6, #15
 800aef0:	2703      	movs	r7, #3
 800aef2:	b186      	cbz	r6, 800af16 <_dtoa_r+0x8c6>
 800aef4:	f8df a238 	ldr.w	sl, [pc, #568]	; 800b130 <_dtoa_r+0xae0>
 800aef8:	4620      	mov	r0, r4
 800aefa:	4629      	mov	r1, r5
 800aefc:	07f2      	lsls	r2, r6, #31
 800aefe:	d504      	bpl.n	800af0a <_dtoa_r+0x8ba>
 800af00:	e9da 2300 	ldrd	r2, r3, [sl]
 800af04:	f7f5 fa38 	bl	8000378 <__aeabi_dmul>
 800af08:	3701      	adds	r7, #1
 800af0a:	1076      	asrs	r6, r6, #1
 800af0c:	f10a 0a08 	add.w	sl, sl, #8
 800af10:	d1f4      	bne.n	800aefc <_dtoa_r+0x8ac>
 800af12:	4604      	mov	r4, r0
 800af14:	460d      	mov	r5, r1
 800af16:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800af1a:	4622      	mov	r2, r4
 800af1c:	462b      	mov	r3, r5
 800af1e:	f7f5 fb55 	bl	80005cc <__aeabi_ddiv>
 800af22:	4682      	mov	sl, r0
 800af24:	468b      	mov	fp, r1
 800af26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af28:	b153      	cbz	r3, 800af40 <_dtoa_r+0x8f0>
 800af2a:	2300      	movs	r3, #0
 800af2c:	4650      	mov	r0, sl
 800af2e:	4659      	mov	r1, fp
 800af30:	2200      	movs	r2, #0
 800af32:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800af36:	f7f5 fc91 	bl	800085c <__aeabi_dcmplt>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	f040 840d 	bne.w	800b75a <_dtoa_r+0x110a>
 800af40:	4638      	mov	r0, r7
 800af42:	f7f5 f9b3 	bl	80002ac <__aeabi_i2d>
 800af46:	4652      	mov	r2, sl
 800af48:	465b      	mov	r3, fp
 800af4a:	f7f5 fa15 	bl	8000378 <__aeabi_dmul>
 800af4e:	2300      	movs	r3, #0
 800af50:	2200      	movs	r2, #0
 800af52:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800af56:	f7f5 f85d 	bl	8000014 <__adddf3>
 800af5a:	4604      	mov	r4, r0
 800af5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5e:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800af62:	2800      	cmp	r0, #0
 800af64:	f000 825b 	beq.w	800b41e <_dtoa_r+0xdce>
 800af68:	9e07      	ldr	r6, [sp, #28]
 800af6a:	961a      	str	r6, [sp, #104]	; 0x68
 800af6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af70:	2900      	cmp	r1, #0
 800af72:	f000 832a 	beq.w	800b5ca <_dtoa_r+0xf7a>
 800af76:	4f6d      	ldr	r7, [pc, #436]	; (800b12c <_dtoa_r+0xadc>)
 800af78:	2100      	movs	r1, #0
 800af7a:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
 800af7e:	f1a2 0308 	sub.w	r3, r2, #8
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	2000      	movs	r0, #0
 800af88:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800af8c:	f7f5 fb1e 	bl	80005cc <__aeabi_ddiv>
 800af90:	4622      	mov	r2, r4
 800af92:	462b      	mov	r3, r5
 800af94:	f7f5 f83c 	bl	8000010 <__aeabi_dsub>
 800af98:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800af9c:	4650      	mov	r0, sl
 800af9e:	4659      	mov	r1, fp
 800afa0:	f7f5 fc84 	bl	80008ac <__aeabi_d2iz>
 800afa4:	4604      	mov	r4, r0
 800afa6:	f7f5 f981 	bl	80002ac <__aeabi_i2d>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4650      	mov	r0, sl
 800afb0:	4659      	mov	r1, fp
 800afb2:	f7f5 f82d 	bl	8000010 <__aeabi_dsub>
 800afb6:	3430      	adds	r4, #48	; 0x30
 800afb8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800afbc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800afc0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800afc4:	b2e7      	uxtb	r7, r4
 800afc6:	46c2      	mov	sl, r8
 800afc8:	f80a 7b01 	strb.w	r7, [sl], #1
 800afcc:	f7f5 fc64 	bl	8000898 <__aeabi_dcmpgt>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	f040 8403 	bne.w	800b7dc <_dtoa_r+0x118c>
 800afd6:	2100      	movs	r1, #0
 800afd8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800afdc:	2000      	movs	r0, #0
 800afde:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800afe2:	f7f5 f815 	bl	8000010 <__aeabi_dsub>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800afee:	f7f5 fc53 	bl	8000898 <__aeabi_dcmpgt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	f040 841b 	bne.w	800b82e <_dtoa_r+0x11de>
 800aff8:	2e01      	cmp	r6, #1
 800affa:	f340 828d 	ble.w	800b518 <_dtoa_r+0xec8>
 800affe:	ea6f 050a 	mvn.w	r5, sl
 800b002:	4446      	add	r6, r8
 800b004:	19af      	adds	r7, r5, r6
 800b006:	2300      	movs	r3, #0
 800b008:	f007 0401 	and.w	r4, r7, #1
 800b00c:	2200      	movs	r2, #0
 800b00e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b012:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800b016:	9618      	str	r6, [sp, #96]	; 0x60
 800b018:	9416      	str	r4, [sp, #88]	; 0x58
 800b01a:	f7f5 f9ad 	bl	8000378 <__aeabi_dmul>
 800b01e:	2300      	movs	r3, #0
 800b020:	2200      	movs	r2, #0
 800b022:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b026:	4604      	mov	r4, r0
 800b028:	460d      	mov	r5, r1
 800b02a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b02e:	f7f5 f9a3 	bl	8000378 <__aeabi_dmul>
 800b032:	460f      	mov	r7, r1
 800b034:	4606      	mov	r6, r0
 800b036:	f7f5 fc39 	bl	80008ac <__aeabi_d2iz>
 800b03a:	4683      	mov	fp, r0
 800b03c:	f7f5 f936 	bl	80002ac <__aeabi_i2d>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	4630      	mov	r0, r6
 800b046:	4639      	mov	r1, r7
 800b048:	f7f4 ffe2 	bl	8000010 <__aeabi_dsub>
 800b04c:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800b050:	b2df      	uxtb	r7, r3
 800b052:	46d3      	mov	fp, sl
 800b054:	f80b 7b01 	strb.w	r7, [fp], #1
 800b058:	4622      	mov	r2, r4
 800b05a:	462b      	mov	r3, r5
 800b05c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800b060:	46da      	mov	sl, fp
 800b062:	f7f5 fbfb 	bl	800085c <__aeabi_dcmplt>
 800b066:	2800      	cmp	r0, #0
 800b068:	f040 80e6 	bne.w	800b238 <_dtoa_r+0xbe8>
 800b06c:	2100      	movs	r1, #0
 800b06e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b072:	2000      	movs	r0, #0
 800b074:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b078:	f7f4 ffca 	bl	8000010 <__aeabi_dsub>
 800b07c:	4622      	mov	r2, r4
 800b07e:	462b      	mov	r3, r5
 800b080:	f7f5 fbec 	bl	800085c <__aeabi_dcmplt>
 800b084:	2800      	cmp	r0, #0
 800b086:	f040 83b2 	bne.w	800b7ee <_dtoa_r+0x119e>
 800b08a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b08c:	458b      	cmp	fp, r1
 800b08e:	f000 8243 	beq.w	800b518 <_dtoa_r+0xec8>
 800b092:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b094:	2800      	cmp	r0, #0
 800b096:	d040      	beq.n	800b11a <_dtoa_r+0xaca>
 800b098:	2300      	movs	r3, #0
 800b09a:	2200      	movs	r2, #0
 800b09c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	f7f5 f968 	bl	8000378 <__aeabi_dmul>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b0b8:	f7f5 f95e 	bl	8000378 <__aeabi_dmul>
 800b0bc:	460f      	mov	r7, r1
 800b0be:	4606      	mov	r6, r0
 800b0c0:	f7f5 fbf4 	bl	80008ac <__aeabi_d2iz>
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	f7f5 f8f1 	bl	80002ac <__aeabi_i2d>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	f7f4 ff9d 	bl	8000010 <__aeabi_dsub>
 800b0d6:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 800b0da:	b2d7      	uxtb	r7, r2
 800b0dc:	f80b 7b01 	strb.w	r7, [fp], #1
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800b0e8:	46da      	mov	sl, fp
 800b0ea:	f7f5 fbb7 	bl	800085c <__aeabi_dcmplt>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f040 80a2 	bne.w	800b238 <_dtoa_r+0xbe8>
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b100:	f7f4 ff86 	bl	8000010 <__aeabi_dsub>
 800b104:	4622      	mov	r2, r4
 800b106:	462b      	mov	r3, r5
 800b108:	f7f5 fba8 	bl	800085c <__aeabi_dcmplt>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f040 836e 	bne.w	800b7ee <_dtoa_r+0x119e>
 800b112:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b114:	459b      	cmp	fp, r3
 800b116:	f000 81ff 	beq.w	800b518 <_dtoa_r+0xec8>
 800b11a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800b11e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 800b122:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800b126:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b12a:	e050      	b.n	800b1ce <_dtoa_r+0xb7e>
 800b12c:	0800e030 	.word	0x0800e030
 800b130:	0800e0f8 	.word	0x0800e0f8
 800b134:	2100      	movs	r1, #0
 800b136:	2000      	movs	r0, #0
 800b138:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b13c:	f7f4 ff68 	bl	8000010 <__aeabi_dsub>
 800b140:	4622      	mov	r2, r4
 800b142:	462b      	mov	r3, r5
 800b144:	f7f5 fb8a 	bl	800085c <__aeabi_dcmplt>
 800b148:	2300      	movs	r3, #0
 800b14a:	2200      	movs	r2, #0
 800b14c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b150:	2800      	cmp	r0, #0
 800b152:	f040 8347 	bne.w	800b7e4 <_dtoa_r+0x1194>
 800b156:	4620      	mov	r0, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 f90d 	bl	8000378 <__aeabi_dmul>
 800b15e:	2300      	movs	r3, #0
 800b160:	2200      	movs	r2, #0
 800b162:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b166:	4604      	mov	r4, r0
 800b168:	460d      	mov	r5, r1
 800b16a:	4630      	mov	r0, r6
 800b16c:	4639      	mov	r1, r7
 800b16e:	f7f5 f903 	bl	8000378 <__aeabi_dmul>
 800b172:	460f      	mov	r7, r1
 800b174:	4606      	mov	r6, r0
 800b176:	f7f5 fb99 	bl	80008ac <__aeabi_d2iz>
 800b17a:	4682      	mov	sl, r0
 800b17c:	f7f5 f896 	bl	80002ac <__aeabi_i2d>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4630      	mov	r0, r6
 800b186:	4639      	mov	r1, r7
 800b188:	f7f4 ff42 	bl	8000010 <__aeabi_dsub>
 800b18c:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800b190:	fa5f f883 	uxtb.w	r8, r3
 800b194:	f80b 8b01 	strb.w	r8, [fp], #1
 800b198:	4622      	mov	r2, r4
 800b19a:	462b      	mov	r3, r5
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	f7f5 fb5c 	bl	800085c <__aeabi_dcmplt>
 800b1a4:	46da      	mov	sl, fp
 800b1a6:	4632      	mov	r2, r6
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d140      	bne.n	800b230 <_dtoa_r+0xbe0>
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b1b6:	f7f4 ff2b 	bl	8000010 <__aeabi_dsub>
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	462b      	mov	r3, r5
 800b1be:	f7f5 fb4d 	bl	800085c <__aeabi_dcmplt>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f040 830e 	bne.w	800b7e4 <_dtoa_r+0x1194>
 800b1c8:	45cb      	cmp	fp, r9
 800b1ca:	f000 81a1 	beq.w	800b510 <_dtoa_r+0xec0>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b1da:	f7f5 f8cd 	bl	8000378 <__aeabi_dmul>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	f7f5 f8c3 	bl	8000378 <__aeabi_dmul>
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	f7f5 fb59 	bl	80008ac <__aeabi_d2iz>
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	f7f5 f856 	bl	80002ac <__aeabi_i2d>
 800b200:	4602      	mov	r2, r0
 800b202:	460b      	mov	r3, r1
 800b204:	4630      	mov	r0, r6
 800b206:	4639      	mov	r1, r7
 800b208:	f7f4 ff02 	bl	8000010 <__aeabi_dsub>
 800b20c:	f108 0230 	add.w	r2, r8, #48	; 0x30
 800b210:	46da      	mov	sl, fp
 800b212:	fa5f f882 	uxtb.w	r8, r2
 800b216:	f80a 8b01 	strb.w	r8, [sl], #1
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	4606      	mov	r6, r0
 800b220:	460f      	mov	r7, r1
 800b222:	f7f5 fb1b 	bl	800085c <__aeabi_dcmplt>
 800b226:	46d3      	mov	fp, sl
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d081      	beq.n	800b134 <_dtoa_r+0xae4>
 800b230:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b234:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800b238:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b23a:	9007      	str	r0, [sp, #28]
 800b23c:	e41f      	b.n	800aa7e <_dtoa_r+0x42e>
 800b23e:	2400      	movs	r4, #0
 800b240:	940d      	str	r4, [sp, #52]	; 0x34
 800b242:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800b244:	9b07      	ldr	r3, [sp, #28]
 800b246:	18c2      	adds	r2, r0, r3
 800b248:	1c54      	adds	r4, r2, #1
 800b24a:	2c00      	cmp	r4, #0
 800b24c:	9211      	str	r2, [sp, #68]	; 0x44
 800b24e:	9409      	str	r4, [sp, #36]	; 0x24
 800b250:	f73f ae16 	bgt.w	800ae80 <_dtoa_r+0x830>
 800b254:	2100      	movs	r1, #0
 800b256:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b25a:	e621      	b.n	800aea0 <_dtoa_r+0x850>
 800b25c:	2101      	movs	r1, #1
 800b25e:	910d      	str	r1, [sp, #52]	; 0x34
 800b260:	e7ef      	b.n	800b242 <_dtoa_r+0xbf2>
 800b262:	2300      	movs	r3, #0
 800b264:	930d      	str	r3, [sp, #52]	; 0x34
 800b266:	e604      	b.n	800ae72 <_dtoa_r+0x822>
 800b268:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b26a:	2900      	cmp	r1, #0
 800b26c:	f73f ab1a 	bgt.w	800a8a4 <_dtoa_r+0x254>
 800b270:	f040 82cd 	bne.w	800b80e <_dtoa_r+0x11be>
 800b274:	2300      	movs	r3, #0
 800b276:	2200      	movs	r2, #0
 800b278:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800b27c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b280:	f7f5 f87a 	bl	8000378 <__aeabi_dmul>
 800b284:	4652      	mov	r2, sl
 800b286:	465b      	mov	r3, fp
 800b288:	f7f5 fafc 	bl	8000884 <__aeabi_dcmpge>
 800b28c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b28e:	970c      	str	r7, [sp, #48]	; 0x30
 800b290:	2800      	cmp	r0, #0
 800b292:	f000 80aa 	beq.w	800b3ea <_dtoa_r+0xd9a>
 800b296:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800b298:	46c2      	mov	sl, r8
 800b29a:	43e9      	mvns	r1, r5
 800b29c:	9107      	str	r1, [sp, #28]
 800b29e:	4648      	mov	r0, r9
 800b2a0:	4639      	mov	r1, r7
 800b2a2:	f001 fa63 	bl	800c76c <_Bfree>
 800b2a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	f43f abe8 	beq.w	800aa7e <_dtoa_r+0x42e>
 800b2ae:	4648      	mov	r0, r9
 800b2b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2b2:	f001 fa5b 	bl	800c76c <_Bfree>
 800b2b6:	f7ff bbe2 	b.w	800aa7e <_dtoa_r+0x42e>
 800b2ba:	4648      	mov	r0, r9
 800b2bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2be:	f001 fd3b 	bl	800cd38 <__pow5mult>
 800b2c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2c4:	e467      	b.n	800ab96 <_dtoa_r+0x546>
 800b2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2c8:	2a00      	cmp	r2, #0
 800b2ca:	f000 823a 	beq.w	800b742 <_dtoa_r+0x10f2>
 800b2ce:	f200 4733 	addw	r7, r0, #1075	; 0x433
 800b2d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b2d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2d6:	e427      	b.n	800ab28 <_dtoa_r+0x4d8>
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4640      	mov	r0, r8
 800b2dc:	9203      	str	r2, [sp, #12]
 800b2de:	f001 fe2b 	bl	800cf38 <__mcmp>
 800b2e2:	9903      	ldr	r1, [sp, #12]
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4648      	mov	r0, r9
 800b2e8:	9303      	str	r3, [sp, #12]
 800b2ea:	f001 fa3f 	bl	800c76c <_Bfree>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f47f ad74 	bne.w	800adde <_dtoa_r+0x78e>
 800b2f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800b2f8:	2a00      	cmp	r2, #0
 800b2fa:	f47f ad70 	bne.w	800adde <_dtoa_r+0x78e>
 800b2fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b300:	2800      	cmp	r0, #0
 800b302:	f47f ad6c 	bne.w	800adde <_dtoa_r+0x78e>
 800b306:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800b30a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b30e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b312:	f000 80e7 	beq.w	800b4e4 <_dtoa_r+0xe94>
 800b316:	9806      	ldr	r0, [sp, #24]
 800b318:	2800      	cmp	r0, #0
 800b31a:	dd01      	ble.n	800b320 <_dtoa_r+0xcd0>
 800b31c:	f10a 0b31 	add.w	fp, sl, #49	; 0x31
 800b320:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b324:	f80a bb01 	strb.w	fp, [sl], #1
 800b328:	960c      	str	r6, [sp, #48]	; 0x30
 800b32a:	e4d7      	b.n	800acdc <_dtoa_r+0x68c>
 800b32c:	4629      	mov	r1, r5
 800b32e:	4648      	mov	r0, r9
 800b330:	220a      	movs	r2, #10
 800b332:	2300      	movs	r3, #0
 800b334:	f001 fa24 	bl	800c780 <__multadd>
 800b338:	3401      	adds	r4, #1
 800b33a:	4605      	mov	r5, r0
 800b33c:	4606      	mov	r6, r0
 800b33e:	e531      	b.n	800ada4 <_dtoa_r+0x754>
 800b340:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b342:	4639      	mov	r1, r7
 800b344:	f7ff f80c 	bl	800a360 <quorem>
 800b348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34a:	2501      	movs	r5, #1
 800b34c:	f100 0b30 	add.w	fp, r0, #48	; 0x30
 800b350:	42ab      	cmp	r3, r5
 800b352:	f888 b000 	strb.w	fp, [r8]
 800b356:	f77f ac8e 	ble.w	800ac76 <_dtoa_r+0x626>
 800b35a:	4648      	mov	r0, r9
 800b35c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b35e:	220a      	movs	r2, #10
 800b360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b362:	f001 fa0d 	bl	800c780 <__multadd>
 800b366:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b36a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b36c:	4606      	mov	r6, r0
 800b36e:	e472      	b.n	800ac56 <_dtoa_r+0x606>
 800b370:	9b07      	ldr	r3, [sp, #28]
 800b372:	2431      	movs	r4, #49	; 0x31
 800b374:	1c59      	adds	r1, r3, #1
 800b376:	9107      	str	r1, [sp, #28]
 800b378:	f888 4000 	strb.w	r4, [r8]
 800b37c:	e4ae      	b.n	800acdc <_dtoa_r+0x68c>
 800b37e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b380:	4639      	mov	r1, r7
 800b382:	f001 fdd9 	bl	800cf38 <__mcmp>
 800b386:	2800      	cmp	r0, #0
 800b388:	f6bf ac44 	bge.w	800ac14 <_dtoa_r+0x5c4>
 800b38c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b38e:	220a      	movs	r2, #10
 800b390:	2300      	movs	r3, #0
 800b392:	4648      	mov	r0, r9
 800b394:	f001 f9f4 	bl	800c780 <__multadd>
 800b398:	9b07      	ldr	r3, [sp, #28]
 800b39a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b39c:	1e59      	subs	r1, r3, #1
 800b39e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3a0:	9107      	str	r1, [sp, #28]
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	f040 8235 	bne.w	800b812 <_dtoa_r+0x11c2>
 800b3a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b3aa:	9009      	str	r0, [sp, #36]	; 0x24
 800b3ac:	e432      	b.n	800ac14 <_dtoa_r+0x5c4>
 800b3ae:	6938      	ldr	r0, [r7, #16]
 800b3b0:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800b3b4:	6918      	ldr	r0, [r3, #16]
 800b3b6:	f001 fb01 	bl	800c9bc <__hi0bits>
 800b3ba:	f1c0 0220 	rsb	r2, r0, #32
 800b3be:	e402      	b.n	800abc6 <_dtoa_r+0x576>
 800b3c0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800b3c2:	2a02      	cmp	r2, #2
 800b3c4:	f77f ac2a 	ble.w	800ac1c <_dtoa_r+0x5cc>
 800b3c8:	2900      	cmp	r1, #0
 800b3ca:	f47f af64 	bne.w	800b296 <_dtoa_r+0xc46>
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	2205      	movs	r2, #5
 800b3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d4:	4648      	mov	r0, r9
 800b3d6:	f001 f9d3 	bl	800c780 <__multadd>
 800b3da:	4607      	mov	r7, r0
 800b3dc:	4639      	mov	r1, r7
 800b3de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3e0:	f001 fdaa 	bl	800cf38 <__mcmp>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	f77f af56 	ble.w	800b296 <_dtoa_r+0xc46>
 800b3ea:	9807      	ldr	r0, [sp, #28]
 800b3ec:	46c2      	mov	sl, r8
 800b3ee:	2331      	movs	r3, #49	; 0x31
 800b3f0:	1c44      	adds	r4, r0, #1
 800b3f2:	f80a 3b01 	strb.w	r3, [sl], #1
 800b3f6:	9407      	str	r4, [sp, #28]
 800b3f8:	e751      	b.n	800b29e <_dtoa_r+0xc4e>
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	f7f4 ff56 	bl	80002ac <__aeabi_i2d>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f4 ffb6 	bl	8000378 <__aeabi_dmul>
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800b414:	f7f4 fdfe 	bl	8000014 <__adddf3>
 800b418:	4604      	mov	r4, r0
 800b41a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b41e:	2300      	movs	r3, #0
 800b420:	2200      	movs	r2, #0
 800b422:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800b426:	4650      	mov	r0, sl
 800b428:	4659      	mov	r1, fp
 800b42a:	f7f4 fdf1 	bl	8000010 <__aeabi_dsub>
 800b42e:	4622      	mov	r2, r4
 800b430:	462b      	mov	r3, r5
 800b432:	4682      	mov	sl, r0
 800b434:	468b      	mov	fp, r1
 800b436:	f7f5 fa2f 	bl	8000898 <__aeabi_dcmpgt>
 800b43a:	4607      	mov	r7, r0
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f040 80c1 	bne.w	800b5c4 <_dtoa_r+0xf74>
 800b442:	4622      	mov	r2, r4
 800b444:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	f7f5 fa06 	bl	800085c <__aeabi_dcmplt>
 800b450:	2800      	cmp	r0, #0
 800b452:	d061      	beq.n	800b518 <_dtoa_r+0xec8>
 800b454:	970c      	str	r7, [sp, #48]	; 0x30
 800b456:	e71e      	b.n	800b296 <_dtoa_r+0xc46>
 800b458:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b45c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b460:	f7ff bb0d 	b.w	800aa7e <_dtoa_r+0x42e>
 800b464:	4648      	mov	r0, r9
 800b466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b46a:	f001 fc65 	bl	800cd38 <__pow5mult>
 800b46e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b470:	f7ff bb91 	b.w	800ab96 <_dtoa_r+0x546>
 800b474:	9d07      	ldr	r5, [sp, #28]
 800b476:	2230      	movs	r2, #48	; 0x30
 800b478:	1c69      	adds	r1, r5, #1
 800b47a:	4643      	mov	r3, r8
 800b47c:	2431      	movs	r4, #49	; 0x31
 800b47e:	f888 2000 	strb.w	r2, [r8]
 800b482:	9107      	str	r1, [sp, #28]
 800b484:	701c      	strb	r4, [r3, #0]
 800b486:	f7ff bafa 	b.w	800aa7e <_dtoa_r+0x42e>
 800b48a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b48e:	1bc5      	subs	r5, r0, r7
 800b490:	195c      	adds	r4, r3, r5
 800b492:	940f      	str	r4, [sp, #60]	; 0x3c
 800b494:	900e      	str	r0, [sp, #56]	; 0x38
 800b496:	2500      	movs	r5, #0
 800b498:	f7ff bb40 	b.w	800ab1c <_dtoa_r+0x4cc>
 800b49c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b4a0:	2702      	movs	r7, #2
 800b4a2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b4a6:	e524      	b.n	800aef2 <_dtoa_r+0x8a2>
 800b4a8:	2401      	movs	r4, #1
 800b4aa:	9411      	str	r4, [sp, #68]	; 0x44
 800b4ac:	9409      	str	r4, [sp, #36]	; 0x24
 800b4ae:	9429      	str	r4, [sp, #164]	; 0xa4
 800b4b0:	e6d0      	b.n	800b254 <_dtoa_r+0xc04>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b4b8:	465c      	mov	r4, fp
 800b4ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b4be:	f77f af2f 	ble.w	800b320 <_dtoa_r+0xcd0>
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4c6:	4648      	mov	r0, r9
 800b4c8:	f001 fc80 	bl	800cdcc <__lshift>
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4d0:	f001 fd32 	bl	800cf38 <__mcmp>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	f340 8193 	ble.w	800b800 <_dtoa_r+0x11b0>
 800b4da:	2c39      	cmp	r4, #57	; 0x39
 800b4dc:	f10a 0b31 	add.w	fp, sl, #49	; 0x31
 800b4e0:	f47f af1e 	bne.w	800b320 <_dtoa_r+0xcd0>
 800b4e4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b4e8:	2239      	movs	r2, #57	; 0x39
 800b4ea:	f80a 2b01 	strb.w	r2, [sl], #1
 800b4ee:	960c      	str	r6, [sp, #48]	; 0x30
 800b4f0:	f7ff bbd7 	b.w	800aca2 <_dtoa_r+0x652>
 800b4f4:	d103      	bne.n	800b4fe <_dtoa_r+0xeae>
 800b4f6:	f01b 0f01 	tst.w	fp, #1
 800b4fa:	f47f abd0 	bne.w	800ac9e <_dtoa_r+0x64e>
 800b4fe:	4652      	mov	r2, sl
 800b500:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b504:	4692      	mov	sl, r2
 800b506:	3a01      	subs	r2, #1
 800b508:	2930      	cmp	r1, #48	; 0x30
 800b50a:	d0f9      	beq.n	800b500 <_dtoa_r+0xeb0>
 800b50c:	f7ff bbe6 	b.w	800acdc <_dtoa_r+0x68c>
 800b510:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b514:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800b518:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 800b51c:	f7ff b9af 	b.w	800a87e <_dtoa_r+0x22e>
 800b520:	9d07      	ldr	r5, [sp, #28]
 800b522:	426c      	negs	r4, r5
 800b524:	2c00      	cmp	r4, #0
 800b526:	f000 8113 	beq.w	800b750 <_dtoa_r+0x1100>
 800b52a:	4bb3      	ldr	r3, [pc, #716]	; (800b7f8 <_dtoa_r+0x11a8>)
 800b52c:	f004 010f 	and.w	r1, r4, #15
 800b530:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800b534:	ca0c      	ldmia	r2, {r2, r3}
 800b536:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800b53a:	f7f4 ff1d 	bl	8000378 <__aeabi_dmul>
 800b53e:	1124      	asrs	r4, r4, #4
 800b540:	4682      	mov	sl, r0
 800b542:	468b      	mov	fp, r1
 800b544:	f000 8170 	beq.w	800b828 <_dtoa_r+0x11d8>
 800b548:	4dac      	ldr	r5, [pc, #688]	; (800b7fc <_dtoa_r+0x11ac>)
 800b54a:	2702      	movs	r7, #2
 800b54c:	07e3      	lsls	r3, r4, #31
 800b54e:	d504      	bpl.n	800b55a <_dtoa_r+0xf0a>
 800b550:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b554:	f7f4 ff10 	bl	8000378 <__aeabi_dmul>
 800b558:	3701      	adds	r7, #1
 800b55a:	3508      	adds	r5, #8
 800b55c:	1064      	asrs	r4, r4, #1
 800b55e:	d1f5      	bne.n	800b54c <_dtoa_r+0xefc>
 800b560:	4682      	mov	sl, r0
 800b562:	468b      	mov	fp, r1
 800b564:	e4df      	b.n	800af26 <_dtoa_r+0x8d6>
 800b566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b568:	4648      	mov	r0, r9
 800b56a:	6851      	ldr	r1, [r2, #4]
 800b56c:	f001 f8d8 	bl	800c720 <_Balloc>
 800b570:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b572:	4604      	mov	r4, r0
 800b574:	692b      	ldr	r3, [r5, #16]
 800b576:	4629      	mov	r1, r5
 800b578:	1c9e      	adds	r6, r3, #2
 800b57a:	00b2      	lsls	r2, r6, #2
 800b57c:	310c      	adds	r1, #12
 800b57e:	f100 000c 	add.w	r0, r0, #12
 800b582:	f001 f81f 	bl	800c5c4 <memcpy>
 800b586:	4648      	mov	r0, r9
 800b588:	4621      	mov	r1, r4
 800b58a:	2201      	movs	r2, #1
 800b58c:	f001 fc1e 	bl	800cdcc <__lshift>
 800b590:	4606      	mov	r6, r0
 800b592:	f7ff bbf9 	b.w	800ad88 <_dtoa_r+0x738>
 800b596:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
 800b59a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b59e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b5a2:	d09f      	beq.n	800b4e4 <_dtoa_r+0xe94>
 800b5a4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b5a8:	f10b 0e01 	add.w	lr, fp, #1
 800b5ac:	f80a eb01 	strb.w	lr, [sl], #1
 800b5b0:	960c      	str	r6, [sp, #48]	; 0x30
 800b5b2:	f7ff bb93 	b.w	800acdc <_dtoa_r+0x68c>
 800b5b6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b5ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b5be:	960c      	str	r6, [sp, #48]	; 0x30
 800b5c0:	f7ff bb61 	b.w	800ac86 <_dtoa_r+0x636>
 800b5c4:	2700      	movs	r7, #0
 800b5c6:	970c      	str	r7, [sp, #48]	; 0x30
 800b5c8:	e70f      	b.n	800b3ea <_dtoa_r+0xd9a>
 800b5ca:	4a8b      	ldr	r2, [pc, #556]	; (800b7f8 <_dtoa_r+0x11a8>)
 800b5cc:	1e73      	subs	r3, r6, #1
 800b5ce:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b5d2:	9312      	str	r3, [sp, #72]	; 0x48
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5dc:	f7f4 fecc 	bl	8000378 <__aeabi_dmul>
 800b5e0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800b5e4:	4650      	mov	r0, sl
 800b5e6:	4659      	mov	r1, fp
 800b5e8:	f7f5 f960 	bl	80008ac <__aeabi_d2iz>
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	f7f4 fe5d 	bl	80002ac <__aeabi_i2d>
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	4659      	mov	r1, fp
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	f7f4 fd09 	bl	8000010 <__aeabi_dsub>
 800b5fe:	46c2      	mov	sl, r8
 800b600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b604:	2e01      	cmp	r6, #1
 800b606:	4604      	mov	r4, r0
 800b608:	460d      	mov	r5, r1
 800b60a:	f80a 3b01 	strb.w	r3, [sl], #1
 800b60e:	d07c      	beq.n	800b70a <_dtoa_r+0x10ba>
 800b610:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 800b614:	eb04 0b06 	add.w	fp, r4, r6
 800b618:	ea6f 0508 	mvn.w	r5, r8
 800b61c:	eb05 060b 	add.w	r6, r5, fp
 800b620:	2300      	movs	r3, #0
 800b622:	2200      	movs	r2, #0
 800b624:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b628:	f006 0701 	and.w	r7, r6, #1
 800b62c:	9716      	str	r7, [sp, #88]	; 0x58
 800b62e:	f7f4 fea3 	bl	8000378 <__aeabi_dmul>
 800b632:	460c      	mov	r4, r1
 800b634:	4606      	mov	r6, r0
 800b636:	f7f5 f939 	bl	80008ac <__aeabi_d2iz>
 800b63a:	9003      	str	r0, [sp, #12]
 800b63c:	f7f4 fe36 	bl	80002ac <__aeabi_i2d>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	4630      	mov	r0, r6
 800b646:	4621      	mov	r1, r4
 800b648:	f7f4 fce2 	bl	8000010 <__aeabi_dsub>
 800b64c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b650:	45da      	cmp	sl, fp
 800b652:	f10c 0230 	add.w	r2, ip, #48	; 0x30
 800b656:	4604      	mov	r4, r0
 800b658:	460d      	mov	r5, r1
 800b65a:	f888 2001 	strb.w	r2, [r8, #1]
 800b65e:	4657      	mov	r7, sl
 800b660:	d051      	beq.n	800b706 <_dtoa_r+0x10b6>
 800b662:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b664:	b1eb      	cbz	r3, 800b6a2 <_dtoa_r+0x1052>
 800b666:	2300      	movs	r3, #0
 800b668:	2200      	movs	r2, #0
 800b66a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b66e:	f7f4 fe83 	bl	8000378 <__aeabi_dmul>
 800b672:	460d      	mov	r5, r1
 800b674:	4606      	mov	r6, r0
 800b676:	f7f5 f919 	bl	80008ac <__aeabi_d2iz>
 800b67a:	9003      	str	r0, [sp, #12]
 800b67c:	f7f4 fe16 	bl	80002ac <__aeabi_i2d>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4630      	mov	r0, r6
 800b686:	4629      	mov	r1, r5
 800b688:	f7f4 fcc2 	bl	8000010 <__aeabi_dsub>
 800b68c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b690:	4657      	mov	r7, sl
 800b692:	4604      	mov	r4, r0
 800b694:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 800b698:	f807 0f01 	strb.w	r0, [r7, #1]!
 800b69c:	455f      	cmp	r7, fp
 800b69e:	460d      	mov	r5, r1
 800b6a0:	d031      	beq.n	800b706 <_dtoa_r+0x10b6>
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b6ae:	f7f4 fe63 	bl	8000378 <__aeabi_dmul>
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	f7f5 f8f9 	bl	80008ac <__aeabi_d2iz>
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	f7f4 fdf6 	bl	80002ac <__aeabi_i2d>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	f7f4 fca2 	bl	8000010 <__aeabi_dsub>
 800b6cc:	3630      	adds	r6, #48	; 0x30
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b6d6:	f807 6f01 	strb.w	r6, [r7, #1]!
 800b6da:	f7f4 fe4d 	bl	8000378 <__aeabi_dmul>
 800b6de:	460d      	mov	r5, r1
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	f7f5 f8e3 	bl	80008ac <__aeabi_d2iz>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	f7f4 fde0 	bl	80002ac <__aeabi_i2d>
 800b6ec:	3630      	adds	r6, #48	; 0x30
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f4 fc8b 	bl	8000010 <__aeabi_dsub>
 800b6fa:	f807 6f01 	strb.w	r6, [r7, #1]!
 800b6fe:	455f      	cmp	r7, fp
 800b700:	d1d1      	bne.n	800b6a6 <_dtoa_r+0x1056>
 800b702:	4604      	mov	r4, r0
 800b704:	460d      	mov	r5, r1
 800b706:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b708:	448a      	add	sl, r1
 800b70a:	2300      	movs	r3, #0
 800b70c:	2200      	movs	r2, #0
 800b70e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800b712:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800b716:	f7f4 fc7d 	bl	8000014 <__adddf3>
 800b71a:	4622      	mov	r2, r4
 800b71c:	462b      	mov	r3, r5
 800b71e:	f7f5 f89d 	bl	800085c <__aeabi_dcmplt>
 800b722:	2800      	cmp	r0, #0
 800b724:	d043      	beq.n	800b7ae <_dtoa_r+0x115e>
 800b726:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b728:	f81a 7c01 	ldrb.w	r7, [sl, #-1]
 800b72c:	9007      	str	r0, [sp, #28]
 800b72e:	f7ff b988 	b.w	800aa42 <_dtoa_r+0x3f2>
 800b732:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b734:	2700      	movs	r7, #0
 800b736:	1a44      	subs	r4, r0, r1
 800b738:	f7ff b9f6 	b.w	800ab28 <_dtoa_r+0x4d8>
 800b73c:	4655      	mov	r5, sl
 800b73e:	f7ff ba3d 	b.w	800abbc <_dtoa_r+0x56c>
 800b742:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b744:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b746:	f1c3 0736 	rsb	r7, r3, #54	; 0x36
 800b74a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b74c:	f7ff b9ec 	b.w	800ab28 <_dtoa_r+0x4d8>
 800b750:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 800b754:	2702      	movs	r7, #2
 800b756:	f7ff bbe6 	b.w	800af26 <_dtoa_r+0x8d6>
 800b75a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b75c:	2c00      	cmp	r4, #0
 800b75e:	f43f ae4c 	beq.w	800b3fa <_dtoa_r+0xdaa>
 800b762:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b764:	2a00      	cmp	r2, #0
 800b766:	f77f aed7 	ble.w	800b518 <_dtoa_r+0xec8>
 800b76a:	2300      	movs	r3, #0
 800b76c:	2200      	movs	r2, #0
 800b76e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b772:	4650      	mov	r0, sl
 800b774:	4659      	mov	r1, fp
 800b776:	f7f4 fdff 	bl	8000378 <__aeabi_dmul>
 800b77a:	4682      	mov	sl, r0
 800b77c:	1c78      	adds	r0, r7, #1
 800b77e:	468b      	mov	fp, r1
 800b780:	f7f4 fd94 	bl	80002ac <__aeabi_i2d>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4650      	mov	r0, sl
 800b78a:	4659      	mov	r1, fp
 800b78c:	f7f4 fdf4 	bl	8000378 <__aeabi_dmul>
 800b790:	2300      	movs	r3, #0
 800b792:	2200      	movs	r2, #0
 800b794:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800b798:	f7f4 fc3c 	bl	8000014 <__adddf3>
 800b79c:	4604      	mov	r4, r0
 800b79e:	9807      	ldr	r0, [sp, #28]
 800b7a0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b7a4:	1e46      	subs	r6, r0, #1
 800b7a6:	961a      	str	r6, [sp, #104]	; 0x68
 800b7a8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b7aa:	f7ff bbe0 	b.w	800af6e <_dtoa_r+0x91e>
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800b7ba:	f7f4 fc29 	bl	8000010 <__aeabi_dsub>
 800b7be:	4622      	mov	r2, r4
 800b7c0:	462b      	mov	r3, r5
 800b7c2:	f7f5 f869 	bl	8000898 <__aeabi_dcmpgt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f43f aea6 	beq.w	800b518 <_dtoa_r+0xec8>
 800b7cc:	4653      	mov	r3, sl
 800b7ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800b7d2:	469a      	mov	sl, r3
 800b7d4:	2a30      	cmp	r2, #48	; 0x30
 800b7d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b7da:	d0f8      	beq.n	800b7ce <_dtoa_r+0x117e>
 800b7dc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800b7de:	9407      	str	r4, [sp, #28]
 800b7e0:	f7ff b94d 	b.w	800aa7e <_dtoa_r+0x42e>
 800b7e4:	4647      	mov	r7, r8
 800b7e6:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800b7ea:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b7ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b7f0:	9107      	str	r1, [sp, #28]
 800b7f2:	f7ff b926 	b.w	800aa42 <_dtoa_r+0x3f2>
 800b7f6:	bf00      	nop
 800b7f8:	0800e030 	.word	0x0800e030
 800b7fc:	0800e0f8 	.word	0x0800e0f8
 800b800:	f47f ad8e 	bne.w	800b320 <_dtoa_r+0xcd0>
 800b804:	f01b 0f01 	tst.w	fp, #1
 800b808:	f43f ad8a 	beq.w	800b320 <_dtoa_r+0xcd0>
 800b80c:	e665      	b.n	800b4da <_dtoa_r+0xe8a>
 800b80e:	2700      	movs	r7, #0
 800b810:	e620      	b.n	800b454 <_dtoa_r+0xe04>
 800b812:	2300      	movs	r3, #0
 800b814:	4648      	mov	r0, r9
 800b816:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b818:	220a      	movs	r2, #10
 800b81a:	f000 ffb1 	bl	800c780 <__multadd>
 800b81e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b820:	900c      	str	r0, [sp, #48]	; 0x30
 800b822:	9309      	str	r3, [sp, #36]	; 0x24
 800b824:	f7ff b9f6 	b.w	800ac14 <_dtoa_r+0x5c4>
 800b828:	2702      	movs	r7, #2
 800b82a:	f7ff bb7c 	b.w	800af26 <_dtoa_r+0x8d6>
 800b82e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b830:	9207      	str	r2, [sp, #28]
 800b832:	f7ff b906 	b.w	800aa42 <_dtoa_r+0x3f2>
 800b836:	f43f a9d9 	beq.w	800abec <_dtoa_r+0x59c>
 800b83a:	f1c0 033c 	rsb	r3, r0, #60	; 0x3c
 800b83e:	f7ff ba85 	b.w	800ad4c <_dtoa_r+0x6fc>
 800b842:	2501      	movs	r5, #1
 800b844:	f7fe bfe2 	b.w	800a80c <_dtoa_r+0x1bc>

0800b848 <_malloc_trim_r>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	4d22      	ldr	r5, [pc, #136]	; (800b8d4 <_malloc_trim_r+0x8c>)
 800b84c:	460f      	mov	r7, r1
 800b84e:	4604      	mov	r4, r0
 800b850:	f7fb fc14 	bl	800707c <__malloc_lock>
 800b854:	68ab      	ldr	r3, [r5, #8]
 800b856:	685e      	ldr	r6, [r3, #4]
 800b858:	f026 0603 	bic.w	r6, r6, #3
 800b85c:	f606 70ef 	addw	r0, r6, #4079	; 0xfef
 800b860:	1bc1      	subs	r1, r0, r7
 800b862:	0b0a      	lsrs	r2, r1, #12
 800b864:	1e57      	subs	r7, r2, #1
 800b866:	033f      	lsls	r7, r7, #12
 800b868:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800b86c:	db07      	blt.n	800b87e <_malloc_trim_r+0x36>
 800b86e:	2100      	movs	r1, #0
 800b870:	4620      	mov	r0, r4
 800b872:	f7fb fc3b 	bl	80070ec <_sbrk_r>
 800b876:	68ab      	ldr	r3, [r5, #8]
 800b878:	1999      	adds	r1, r3, r6
 800b87a:	4288      	cmp	r0, r1
 800b87c:	d004      	beq.n	800b888 <_malloc_trim_r+0x40>
 800b87e:	4620      	mov	r0, r4
 800b880:	f7fb fbfe 	bl	8007080 <__malloc_unlock>
 800b884:	2000      	movs	r0, #0
 800b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b888:	4279      	negs	r1, r7
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7fb fc2e 	bl	80070ec <_sbrk_r>
 800b890:	3001      	adds	r0, #1
 800b892:	d00d      	beq.n	800b8b0 <_malloc_trim_r+0x68>
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <_malloc_trim_r+0x90>)
 800b896:	68a8      	ldr	r0, [r5, #8]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	1bf6      	subs	r6, r6, r7
 800b89c:	f046 0601 	orr.w	r6, r6, #1
 800b8a0:	1bd7      	subs	r7, r2, r7
 800b8a2:	6046      	str	r6, [r0, #4]
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	601f      	str	r7, [r3, #0]
 800b8a8:	f7fb fbea 	bl	8007080 <__malloc_unlock>
 800b8ac:	2001      	movs	r0, #1
 800b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7fb fc1a 	bl	80070ec <_sbrk_r>
 800b8b8:	68ab      	ldr	r3, [r5, #8]
 800b8ba:	1ac2      	subs	r2, r0, r3
 800b8bc:	2a0f      	cmp	r2, #15
 800b8be:	ddde      	ble.n	800b87e <_malloc_trim_r+0x36>
 800b8c0:	4906      	ldr	r1, [pc, #24]	; (800b8dc <_malloc_trim_r+0x94>)
 800b8c2:	f042 0201 	orr.w	r2, r2, #1
 800b8c6:	6809      	ldr	r1, [r1, #0]
 800b8c8:	605a      	str	r2, [r3, #4]
 800b8ca:	1a40      	subs	r0, r0, r1
 800b8cc:	4902      	ldr	r1, [pc, #8]	; (800b8d8 <_malloc_trim_r+0x90>)
 800b8ce:	6008      	str	r0, [r1, #0]
 800b8d0:	e7d5      	b.n	800b87e <_malloc_trim_r+0x36>
 800b8d2:	bf00      	nop
 800b8d4:	20000570 	.word	0x20000570
 800b8d8:	20000af8 	.word	0x20000af8
 800b8dc:	2000097c 	.word	0x2000097c

0800b8e0 <_free_r>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d055      	beq.n	800b998 <_free_r+0xb8>
 800b8ec:	f7fb fbc6 	bl	800707c <__malloc_lock>
 800b8f0:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800b8f4:	f8df c16c 	ldr.w	ip, [pc, #364]	; 800ba64 <_free_r+0x184>
 800b8f8:	f1a5 0408 	sub.w	r4, r5, #8
 800b8fc:	f021 0301 	bic.w	r3, r1, #1
 800b900:	18e2      	adds	r2, r4, r3
 800b902:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800b906:	6857      	ldr	r7, [r2, #4]
 800b908:	4290      	cmp	r0, r2
 800b90a:	f027 0703 	bic.w	r7, r7, #3
 800b90e:	d065      	beq.n	800b9dc <_free_r+0xfc>
 800b910:	f011 0101 	ands.w	r1, r1, #1
 800b914:	6057      	str	r7, [r2, #4]
 800b916:	d032      	beq.n	800b97e <_free_r+0x9e>
 800b918:	2100      	movs	r1, #0
 800b91a:	19d0      	adds	r0, r2, r7
 800b91c:	6840      	ldr	r0, [r0, #4]
 800b91e:	07c0      	lsls	r0, r0, #31
 800b920:	d406      	bmi.n	800b930 <_free_r+0x50>
 800b922:	19db      	adds	r3, r3, r7
 800b924:	6890      	ldr	r0, [r2, #8]
 800b926:	2900      	cmp	r1, #0
 800b928:	d04a      	beq.n	800b9c0 <_free_r+0xe0>
 800b92a:	68d2      	ldr	r2, [r2, #12]
 800b92c:	60c2      	str	r2, [r0, #12]
 800b92e:	6090      	str	r0, [r2, #8]
 800b930:	f043 0001 	orr.w	r0, r3, #1
 800b934:	6060      	str	r0, [r4, #4]
 800b936:	50e3      	str	r3, [r4, r3]
 800b938:	b9e1      	cbnz	r1, 800b974 <_free_r+0x94>
 800b93a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b93e:	d32d      	bcc.n	800b99c <_free_r+0xbc>
 800b940:	0a5a      	lsrs	r2, r3, #9
 800b942:	2a04      	cmp	r2, #4
 800b944:	d866      	bhi.n	800ba14 <_free_r+0x134>
 800b946:	0998      	lsrs	r0, r3, #6
 800b948:	3038      	adds	r0, #56	; 0x38
 800b94a:	0042      	lsls	r2, r0, #1
 800b94c:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 800b950:	f8de 2008 	ldr.w	r2, [lr, #8]
 800b954:	4943      	ldr	r1, [pc, #268]	; (800ba64 <_free_r+0x184>)
 800b956:	4572      	cmp	r2, lr
 800b958:	d062      	beq.n	800ba20 <_free_r+0x140>
 800b95a:	6850      	ldr	r0, [r2, #4]
 800b95c:	f020 0103 	bic.w	r1, r0, #3
 800b960:	428b      	cmp	r3, r1
 800b962:	d202      	bcs.n	800b96a <_free_r+0x8a>
 800b964:	6892      	ldr	r2, [r2, #8]
 800b966:	4596      	cmp	lr, r2
 800b968:	d1f7      	bne.n	800b95a <_free_r+0x7a>
 800b96a:	68d3      	ldr	r3, [r2, #12]
 800b96c:	60e3      	str	r3, [r4, #12]
 800b96e:	60a2      	str	r2, [r4, #8]
 800b970:	60d4      	str	r4, [r2, #12]
 800b972:	609c      	str	r4, [r3, #8]
 800b974:	4630      	mov	r0, r6
 800b976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b97a:	f7fb bb81 	b.w	8007080 <__malloc_unlock>
 800b97e:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800b982:	f10c 0808 	add.w	r8, ip, #8
 800b986:	1b64      	subs	r4, r4, r5
 800b988:	68a0      	ldr	r0, [r4, #8]
 800b98a:	195b      	adds	r3, r3, r5
 800b98c:	4540      	cmp	r0, r8
 800b98e:	d03f      	beq.n	800ba10 <_free_r+0x130>
 800b990:	68e5      	ldr	r5, [r4, #12]
 800b992:	60c5      	str	r5, [r0, #12]
 800b994:	60a8      	str	r0, [r5, #8]
 800b996:	e7c0      	b.n	800b91a <_free_r+0x3a>
 800b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99c:	08d9      	lsrs	r1, r3, #3
 800b99e:	108a      	asrs	r2, r1, #2
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	fa00 f002 	lsl.w	r0, r0, r2
 800b9a6:	eb0c 03c1 	add.w	r3, ip, r1, lsl #3
 800b9aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	4308      	orrs	r0, r1
 800b9b2:	60e3      	str	r3, [r4, #12]
 800b9b4:	60a2      	str	r2, [r4, #8]
 800b9b6:	f8cc 0004 	str.w	r0, [ip, #4]
 800b9ba:	609c      	str	r4, [r3, #8]
 800b9bc:	60d4      	str	r4, [r2, #12]
 800b9be:	e7d9      	b.n	800b974 <_free_r+0x94>
 800b9c0:	4d29      	ldr	r5, [pc, #164]	; (800ba68 <_free_r+0x188>)
 800b9c2:	42a8      	cmp	r0, r5
 800b9c4:	d1b1      	bne.n	800b92a <_free_r+0x4a>
 800b9c6:	f043 0101 	orr.w	r1, r3, #1
 800b9ca:	f8cc 4014 	str.w	r4, [ip, #20]
 800b9ce:	f8cc 4010 	str.w	r4, [ip, #16]
 800b9d2:	60e0      	str	r0, [r4, #12]
 800b9d4:	60a0      	str	r0, [r4, #8]
 800b9d6:	6061      	str	r1, [r4, #4]
 800b9d8:	50e3      	str	r3, [r4, r3]
 800b9da:	e7cb      	b.n	800b974 <_free_r+0x94>
 800b9dc:	18ff      	adds	r7, r7, r3
 800b9de:	07cb      	lsls	r3, r1, #31
 800b9e0:	d407      	bmi.n	800b9f2 <_free_r+0x112>
 800b9e2:	f855 0c08 	ldr.w	r0, [r5, #-8]
 800b9e6:	1a24      	subs	r4, r4, r0
 800b9e8:	68e3      	ldr	r3, [r4, #12]
 800b9ea:	68a2      	ldr	r2, [r4, #8]
 800b9ec:	183f      	adds	r7, r7, r0
 800b9ee:	60d3      	str	r3, [r2, #12]
 800b9f0:	609a      	str	r2, [r3, #8]
 800b9f2:	481e      	ldr	r0, [pc, #120]	; (800ba6c <_free_r+0x18c>)
 800b9f4:	f047 0101 	orr.w	r1, r7, #1
 800b9f8:	6803      	ldr	r3, [r0, #0]
 800b9fa:	6061      	str	r1, [r4, #4]
 800b9fc:	429f      	cmp	r7, r3
 800b9fe:	f8cc 4008 	str.w	r4, [ip, #8]
 800ba02:	d3b7      	bcc.n	800b974 <_free_r+0x94>
 800ba04:	4a1a      	ldr	r2, [pc, #104]	; (800ba70 <_free_r+0x190>)
 800ba06:	4630      	mov	r0, r6
 800ba08:	6811      	ldr	r1, [r2, #0]
 800ba0a:	f7ff ff1d 	bl	800b848 <_malloc_trim_r>
 800ba0e:	e7b1      	b.n	800b974 <_free_r+0x94>
 800ba10:	2101      	movs	r1, #1
 800ba12:	e782      	b.n	800b91a <_free_r+0x3a>
 800ba14:	2a14      	cmp	r2, #20
 800ba16:	d80c      	bhi.n	800ba32 <_free_r+0x152>
 800ba18:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 800ba1c:	0042      	lsls	r2, r0, #1
 800ba1e:	e795      	b.n	800b94c <_free_r+0x6c>
 800ba20:	1080      	asrs	r0, r0, #2
 800ba22:	2501      	movs	r5, #1
 800ba24:	fa05 f500 	lsl.w	r5, r5, r0
 800ba28:	6848      	ldr	r0, [r1, #4]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	4328      	orrs	r0, r5
 800ba2e:	6048      	str	r0, [r1, #4]
 800ba30:	e79c      	b.n	800b96c <_free_r+0x8c>
 800ba32:	2a54      	cmp	r2, #84	; 0x54
 800ba34:	d803      	bhi.n	800ba3e <_free_r+0x15e>
 800ba36:	0b18      	lsrs	r0, r3, #12
 800ba38:	306e      	adds	r0, #110	; 0x6e
 800ba3a:	0042      	lsls	r2, r0, #1
 800ba3c:	e786      	b.n	800b94c <_free_r+0x6c>
 800ba3e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ba42:	d803      	bhi.n	800ba4c <_free_r+0x16c>
 800ba44:	0bd8      	lsrs	r0, r3, #15
 800ba46:	3077      	adds	r0, #119	; 0x77
 800ba48:	0042      	lsls	r2, r0, #1
 800ba4a:	e77f      	b.n	800b94c <_free_r+0x6c>
 800ba4c:	f240 5154 	movw	r1, #1364	; 0x554
 800ba50:	428a      	cmp	r2, r1
 800ba52:	d803      	bhi.n	800ba5c <_free_r+0x17c>
 800ba54:	0c98      	lsrs	r0, r3, #18
 800ba56:	307c      	adds	r0, #124	; 0x7c
 800ba58:	0042      	lsls	r2, r0, #1
 800ba5a:	e777      	b.n	800b94c <_free_r+0x6c>
 800ba5c:	22fc      	movs	r2, #252	; 0xfc
 800ba5e:	207e      	movs	r0, #126	; 0x7e
 800ba60:	e774      	b.n	800b94c <_free_r+0x6c>
 800ba62:	bf00      	nop
 800ba64:	20000570 	.word	0x20000570
 800ba68:	20000578 	.word	0x20000578
 800ba6c:	20000978 	.word	0x20000978
 800ba70:	20000af4 	.word	0x20000af4

0800ba74 <rshift>:
 800ba74:	6902      	ldr	r2, [r0, #16]
 800ba76:	114b      	asrs	r3, r1, #5
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800ba7e:	f100 0714 	add.w	r7, r0, #20
 800ba82:	da63      	bge.n	800bb4c <rshift+0xd8>
 800ba84:	3304      	adds	r3, #4
 800ba86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ba8e:	3214      	adds	r2, #20
 800ba90:	f011 011f 	ands.w	r1, r1, #31
 800ba94:	f103 0c04 	add.w	ip, r3, #4
 800ba98:	d05f      	beq.n	800bb5a <rshift+0xe6>
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	f10c 0404 	add.w	r4, ip, #4
 800baa0:	42a2      	cmp	r2, r4
 800baa2:	f1c1 0820 	rsb	r8, r1, #32
 800baa6:	fa23 f901 	lsr.w	r9, r3, r1
 800baaa:	f240 8085 	bls.w	800bbb8 <rshift+0x144>
 800baae:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800bab2:	4623      	mov	r3, r4
 800bab4:	fa05 f608 	lsl.w	r6, r5, r8
 800bab8:	ea49 0506 	orr.w	r5, r9, r6
 800babc:	603d      	str	r5, [r7, #0]
 800babe:	f853 5b04 	ldr.w	r5, [r3], #4
 800bac2:	43e4      	mvns	r4, r4
 800bac4:	1916      	adds	r6, r2, r4
 800bac6:	429a      	cmp	r2, r3
 800bac8:	f3c6 0480 	ubfx	r4, r6, #2, #1
 800bacc:	fa25 f901 	lsr.w	r9, r5, r1
 800bad0:	f100 0618 	add.w	r6, r0, #24
 800bad4:	d929      	bls.n	800bb2a <rshift+0xb6>
 800bad6:	b16c      	cbz	r4, 800baf4 <rshift+0x80>
 800bad8:	681c      	ldr	r4, [r3, #0]
 800bada:	fa04 f408 	lsl.w	r4, r4, r8
 800bade:	ea49 0404 	orr.w	r4, r9, r4
 800bae2:	6034      	str	r4, [r6, #0]
 800bae4:	f853 4b04 	ldr.w	r4, [r3], #4
 800bae8:	f100 061c 	add.w	r6, r0, #28
 800baec:	429a      	cmp	r2, r3
 800baee:	fa24 f901 	lsr.w	r9, r4, r1
 800baf2:	d91a      	bls.n	800bb2a <rshift+0xb6>
 800baf4:	681d      	ldr	r5, [r3, #0]
 800baf6:	4634      	mov	r4, r6
 800baf8:	fa05 f508 	lsl.w	r5, r5, r8
 800bafc:	ea49 0505 	orr.w	r5, r9, r5
 800bb00:	f844 5b04 	str.w	r5, [r4], #4
 800bb04:	461d      	mov	r5, r3
 800bb06:	f855 9b04 	ldr.w	r9, [r5], #4
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	fa29 f901 	lsr.w	r9, r9, r1
 800bb10:	fa03 f308 	lsl.w	r3, r3, r8
 800bb14:	ea49 0303 	orr.w	r3, r9, r3
 800bb18:	6073      	str	r3, [r6, #4]
 800bb1a:	462b      	mov	r3, r5
 800bb1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb20:	1d26      	adds	r6, r4, #4
 800bb22:	429a      	cmp	r2, r3
 800bb24:	fa25 f901 	lsr.w	r9, r5, r1
 800bb28:	d8e4      	bhi.n	800baf4 <rshift+0x80>
 800bb2a:	ebcc 0202 	rsb	r2, ip, r2
 800bb2e:	1f51      	subs	r1, r2, #5
 800bb30:	f021 0303 	bic.w	r3, r1, #3
 800bb34:	18c3      	adds	r3, r0, r3
 800bb36:	3318      	adds	r3, #24
 800bb38:	f8c3 9000 	str.w	r9, [r3]
 800bb3c:	f1b9 0f00 	cmp.w	r9, #0
 800bb40:	d136      	bne.n	800bbb0 <rshift+0x13c>
 800bb42:	1bdf      	subs	r7, r3, r7
 800bb44:	10bf      	asrs	r7, r7, #2
 800bb46:	6107      	str	r7, [r0, #16]
 800bb48:	b927      	cbnz	r7, 800bb54 <rshift+0xe0>
 800bb4a:	e001      	b.n	800bb50 <rshift+0xdc>
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	6102      	str	r2, [r0, #16]
 800bb50:	2300      	movs	r3, #0
 800bb52:	6143      	str	r3, [r0, #20]
 800bb54:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800bb58:	4770      	bx	lr
 800bb5a:	4562      	cmp	r2, ip
 800bb5c:	d9f6      	bls.n	800bb4c <rshift+0xd8>
 800bb5e:	4663      	mov	r3, ip
 800bb60:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb64:	ea6f 040c 	mvn.w	r4, ip
 800bb68:	1911      	adds	r1, r2, r4
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	603d      	str	r5, [r7, #0]
 800bb6e:	f3c1 0480 	ubfx	r4, r1, #2, #1
 800bb72:	f100 0518 	add.w	r5, r0, #24
 800bb76:	d913      	bls.n	800bba0 <rshift+0x12c>
 800bb78:	b134      	cbz	r4, 800bb88 <rshift+0x114>
 800bb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	6029      	str	r1, [r5, #0]
 800bb82:	f100 051c 	add.w	r5, r0, #28
 800bb86:	d90b      	bls.n	800bba0 <rshift+0x12c>
 800bb88:	461c      	mov	r4, r3
 800bb8a:	f854 6b04 	ldr.w	r6, [r4], #4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f841 6b04 	str.w	r6, [r1], #4
 800bb94:	685e      	ldr	r6, [r3, #4]
 800bb96:	1d23      	adds	r3, r4, #4
 800bb98:	606e      	str	r6, [r5, #4]
 800bb9a:	1d0d      	adds	r5, r1, #4
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d8f3      	bhi.n	800bb88 <rshift+0x114>
 800bba0:	ea6f 030c 	mvn.w	r3, ip
 800bba4:	189a      	adds	r2, r3, r2
 800bba6:	f022 0103 	bic.w	r1, r2, #3
 800bbaa:	1843      	adds	r3, r0, r1
 800bbac:	3318      	adds	r3, #24
 800bbae:	e7c8      	b.n	800bb42 <rshift+0xce>
 800bbb0:	1d1a      	adds	r2, r3, #4
 800bbb2:	1bd1      	subs	r1, r2, r7
 800bbb4:	108f      	asrs	r7, r1, #2
 800bbb6:	e7c6      	b.n	800bb46 <rshift+0xd2>
 800bbb8:	463b      	mov	r3, r7
 800bbba:	e7bd      	b.n	800bb38 <rshift+0xc4>

0800bbbc <__hexdig_init>:
 800bbbc:	480f      	ldr	r0, [pc, #60]	; (800bbfc <__hexdig_init+0x40>)
 800bbbe:	4b10      	ldr	r3, [pc, #64]	; (800bc00 <__hexdig_init+0x44>)
 800bbc0:	2110      	movs	r1, #16
 800bbc2:	2230      	movs	r2, #48	; 0x30
 800bbc4:	54d1      	strb	r1, [r2, r3]
 800bbc6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bbca:	3101      	adds	r1, #1
 800bbcc:	b2c9      	uxtb	r1, r1
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	d1f8      	bne.n	800bbc4 <__hexdig_init+0x8>
 800bbd2:	480c      	ldr	r0, [pc, #48]	; (800bc04 <__hexdig_init+0x48>)
 800bbd4:	211a      	movs	r1, #26
 800bbd6:	2261      	movs	r2, #97	; 0x61
 800bbd8:	54d1      	strb	r1, [r2, r3]
 800bbda:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bbde:	3101      	adds	r1, #1
 800bbe0:	b2c9      	uxtb	r1, r1
 800bbe2:	2a00      	cmp	r2, #0
 800bbe4:	d1f8      	bne.n	800bbd8 <__hexdig_init+0x1c>
 800bbe6:	4808      	ldr	r0, [pc, #32]	; (800bc08 <__hexdig_init+0x4c>)
 800bbe8:	211a      	movs	r1, #26
 800bbea:	2241      	movs	r2, #65	; 0x41
 800bbec:	54d1      	strb	r1, [r2, r3]
 800bbee:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bbf2:	3101      	adds	r1, #1
 800bbf4:	b2c9      	uxtb	r1, r1
 800bbf6:	2a00      	cmp	r2, #0
 800bbf8:	d1f8      	bne.n	800bbec <__hexdig_init+0x30>
 800bbfa:	4770      	bx	lr
 800bbfc:	0800e014 	.word	0x0800e014
 800bc00:	20001c48 	.word	0x20001c48
 800bc04:	0800e00c 	.word	0x0800e00c
 800bc08:	0800e004 	.word	0x0800e004

0800bc0c <__gethex>:
 800bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	b08b      	sub	sp, #44	; 0x2c
 800bc12:	4688      	mov	r8, r1
 800bc14:	9206      	str	r2, [sp, #24]
 800bc16:	9309      	str	r3, [sp, #36]	; 0x24
 800bc18:	9007      	str	r0, [sp, #28]
 800bc1a:	f7fa feb9 	bl	8006990 <_localeconv_r>
 800bc1e:	6800      	ldr	r0, [r0, #0]
 800bc20:	4e9c      	ldr	r6, [pc, #624]	; (800be94 <__gethex+0x288>)
 800bc22:	9002      	str	r0, [sp, #8]
 800bc24:	f7f9 fcc0 	bl	80055a8 <strlen>
 800bc28:	9902      	ldr	r1, [sp, #8]
 800bc2a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800bc2e:	180a      	adds	r2, r1, r0
 800bc30:	9003      	str	r0, [sp, #12]
 800bc32:	f812 ac01 	ldrb.w	sl, [r2, #-1]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 8106 	beq.w	800be48 <__gethex+0x23c>
 800bc3c:	f8d8 0000 	ldr.w	r0, [r8]
 800bc40:	7884      	ldrb	r4, [r0, #2]
 800bc42:	1c85      	adds	r5, r0, #2
 800bc44:	2c30      	cmp	r4, #48	; 0x30
 800bc46:	f040 820b 	bne.w	800c060 <__gethex+0x454>
 800bc4a:	1cc3      	adds	r3, r0, #3
 800bc4c:	2700      	movs	r7, #0
 800bc4e:	461d      	mov	r5, r3
 800bc50:	f813 4b01 	ldrb.w	r4, [r3], #1
 800bc54:	3701      	adds	r7, #1
 800bc56:	2c30      	cmp	r4, #48	; 0x30
 800bc58:	d0f9      	beq.n	800bc4e <__gethex+0x42>
 800bc5a:	f816 b004 	ldrb.w	fp, [r6, r4]
 800bc5e:	f8df 9234 	ldr.w	r9, [pc, #564]	; 800be94 <__gethex+0x288>
 800bc62:	f1bb 0f00 	cmp.w	fp, #0
 800bc66:	f000 80f2 	beq.w	800be4e <__gethex+0x242>
 800bc6a:	7829      	ldrb	r1, [r5, #0]
 800bc6c:	f04f 0b00 	mov.w	fp, #0
 800bc70:	f819 4001 	ldrb.w	r4, [r9, r1]
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	f000 820f 	beq.w	800c098 <__gethex+0x48c>
 800bc7a:	1c6a      	adds	r2, r5, #1
 800bc7c:	7810      	ldrb	r0, [r2, #0]
 800bc7e:	4614      	mov	r4, r2
 800bc80:	5c33      	ldrb	r3, [r6, r0]
 800bc82:	3201      	adds	r2, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1f9      	bne.n	800bc7c <__gethex+0x70>
 800bc88:	4699      	mov	r9, r3
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	9902      	ldr	r1, [sp, #8]
 800bc8e:	9a03      	ldr	r2, [sp, #12]
 800bc90:	f7f9 fcba 	bl	8005608 <strncmp>
 800bc94:	b1e8      	cbz	r0, 800bcd2 <__gethex+0xc6>
 800bc96:	7823      	ldrb	r3, [r4, #0]
 800bc98:	f1bb 0f00 	cmp.w	fp, #0
 800bc9c:	f000 81cf 	beq.w	800c03e <__gethex+0x432>
 800bca0:	ebc4 0b0b 	rsb	fp, r4, fp
 800bca4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800bca8:	9105      	str	r1, [sp, #20]
 800bcaa:	2b50      	cmp	r3, #80	; 0x50
 800bcac:	f000 809a 	beq.w	800bde4 <__gethex+0x1d8>
 800bcb0:	2b70      	cmp	r3, #112	; 0x70
 800bcb2:	f000 8097 	beq.w	800bde4 <__gethex+0x1d8>
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	f8c8 2000 	str.w	r2, [r8]
 800bcbc:	f1b9 0f00 	cmp.w	r9, #0
 800bcc0:	d00d      	beq.n	800bcde <__gethex+0xd2>
 800bcc2:	2f00      	cmp	r7, #0
 800bcc4:	bf0c      	ite	eq
 800bcc6:	2706      	moveq	r7, #6
 800bcc8:	2700      	movne	r7, #0
 800bcca:	4638      	mov	r0, r7
 800bccc:	b00b      	add	sp, #44	; 0x2c
 800bcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd2:	f1bb 0f00 	cmp.w	fp, #0
 800bcd6:	f000 81cd 	beq.w	800c074 <__gethex+0x468>
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	e7e0      	b.n	800bca0 <__gethex+0x94>
 800bcde:	1b67      	subs	r7, r4, r5
 800bce0:	1e7b      	subs	r3, r7, #1
 800bce2:	2b07      	cmp	r3, #7
 800bce4:	4649      	mov	r1, r9
 800bce6:	dd03      	ble.n	800bcf0 <__gethex+0xe4>
 800bce8:	105b      	asrs	r3, r3, #1
 800bcea:	3101      	adds	r1, #1
 800bcec:	2b07      	cmp	r3, #7
 800bcee:	dcfb      	bgt.n	800bce8 <__gethex+0xdc>
 800bcf0:	9807      	ldr	r0, [sp, #28]
 800bcf2:	f000 fd15 	bl	800c720 <_Balloc>
 800bcf6:	9004      	str	r0, [sp, #16]
 800bcf8:	3014      	adds	r0, #20
 800bcfa:	42a5      	cmp	r5, r4
 800bcfc:	9008      	str	r0, [sp, #32]
 800bcfe:	f080 81ec 	bcs.w	800c0da <__gethex+0x4ce>
 800bd02:	9903      	ldr	r1, [sp, #12]
 800bd04:	f04f 0800 	mov.w	r8, #0
 800bd08:	4683      	mov	fp, r0
 800bd0a:	4647      	mov	r7, r8
 800bd0c:	f1c1 0c01 	rsb	ip, r1, #1
 800bd10:	e00f      	b.n	800bd32 <__gethex+0x126>
 800bd12:	2f20      	cmp	r7, #32
 800bd14:	d05f      	beq.n	800bdd6 <__gethex+0x1ca>
 800bd16:	4639      	mov	r1, r7
 800bd18:	3704      	adds	r7, #4
 800bd1a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800bd1e:	464c      	mov	r4, r9
 800bd20:	5c33      	ldrb	r3, [r6, r0]
 800bd22:	42a5      	cmp	r5, r4
 800bd24:	f003 020f 	and.w	r2, r3, #15
 800bd28:	fa02 f201 	lsl.w	r2, r2, r1
 800bd2c:	ea48 0802 	orr.w	r8, r8, r2
 800bd30:	d219      	bcs.n	800bd66 <__gethex+0x15a>
 800bd32:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800bd36:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800bd3a:	4550      	cmp	r0, sl
 800bd3c:	d1e9      	bne.n	800bd12 <__gethex+0x106>
 800bd3e:	eb09 030c 	add.w	r3, r9, ip
 800bd42:	429d      	cmp	r5, r3
 800bd44:	d8e5      	bhi.n	800bd12 <__gethex+0x106>
 800bd46:	9a03      	ldr	r2, [sp, #12]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	9902      	ldr	r1, [sp, #8]
 800bd4c:	f8cd c000 	str.w	ip, [sp]
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	f7f9 fc59 	bl	8005608 <strncmp>
 800bd56:	9a01      	ldr	r2, [sp, #4]
 800bd58:	f8dd c000 	ldr.w	ip, [sp]
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d1d8      	bne.n	800bd12 <__gethex+0x106>
 800bd60:	4614      	mov	r4, r2
 800bd62:	42a5      	cmp	r5, r4
 800bd64:	d3e5      	bcc.n	800bd32 <__gethex+0x126>
 800bd66:	9d08      	ldr	r5, [sp, #32]
 800bd68:	f84b 8b04 	str.w	r8, [fp], #4
 800bd6c:	ebc5 0b0b 	rsb	fp, r5, fp
 800bd70:	9f04      	ldr	r7, [sp, #16]
 800bd72:	ea4f 04ab 	mov.w	r4, fp, asr #2
 800bd76:	613c      	str	r4, [r7, #16]
 800bd78:	4640      	mov	r0, r8
 800bd7a:	f000 fe1f 	bl	800c9bc <__hi0bits>
 800bd7e:	9906      	ldr	r1, [sp, #24]
 800bd80:	0165      	lsls	r5, r4, #5
 800bd82:	680c      	ldr	r4, [r1, #0]
 800bd84:	1a28      	subs	r0, r5, r0
 800bd86:	42a0      	cmp	r0, r4
 800bd88:	f300 8134 	bgt.w	800bff4 <__gethex+0x3e8>
 800bd8c:	f2c0 815a 	blt.w	800c044 <__gethex+0x438>
 800bd90:	2500      	movs	r5, #0
 800bd92:	9806      	ldr	r0, [sp, #24]
 800bd94:	9905      	ldr	r1, [sp, #20]
 800bd96:	6882      	ldr	r2, [r0, #8]
 800bd98:	4291      	cmp	r1, r2
 800bd9a:	f300 8105 	bgt.w	800bfa8 <__gethex+0x39c>
 800bd9e:	9f06      	ldr	r7, [sp, #24]
 800bda0:	9805      	ldr	r0, [sp, #20]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4298      	cmp	r0, r3
 800bda6:	f280 810f 	bge.w	800bfc8 <__gethex+0x3bc>
 800bdaa:	1a1e      	subs	r6, r3, r0
 800bdac:	42b4      	cmp	r4, r6
 800bdae:	dc73      	bgt.n	800be98 <__gethex+0x28c>
 800bdb0:	68ff      	ldr	r7, [r7, #12]
 800bdb2:	2f02      	cmp	r7, #2
 800bdb4:	f000 817f 	beq.w	800c0b6 <__gethex+0x4aa>
 800bdb8:	2f03      	cmp	r7, #3
 800bdba:	f000 81b8 	beq.w	800c12e <__gethex+0x522>
 800bdbe:	2f01      	cmp	r7, #1
 800bdc0:	f000 81a6 	beq.w	800c110 <__gethex+0x504>
 800bdc4:	9904      	ldr	r1, [sp, #16]
 800bdc6:	9807      	ldr	r0, [sp, #28]
 800bdc8:	f000 fcd0 	bl	800c76c <_Bfree>
 800bdcc:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bdce:	2700      	movs	r7, #0
 800bdd0:	600f      	str	r7, [r1, #0]
 800bdd2:	2750      	movs	r7, #80	; 0x50
 800bdd4:	e779      	b.n	800bcca <__gethex+0xbe>
 800bdd6:	f84b 8b04 	str.w	r8, [fp], #4
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	2704      	movs	r7, #4
 800bde0:	4641      	mov	r1, r8
 800bde2:	e79a      	b.n	800bd1a <__gethex+0x10e>
 800bde4:	7863      	ldrb	r3, [r4, #1]
 800bde6:	2b2b      	cmp	r3, #43	; 0x2b
 800bde8:	f000 8101 	beq.w	800bfee <__gethex+0x3e2>
 800bdec:	2b2d      	cmp	r3, #45	; 0x2d
 800bdee:	f000 80f9 	beq.w	800bfe4 <__gethex+0x3d8>
 800bdf2:	1c60      	adds	r0, r4, #1
 800bdf4:	f04f 0b00 	mov.w	fp, #0
 800bdf8:	5cf1      	ldrb	r1, [r6, r3]
 800bdfa:	2900      	cmp	r1, #0
 800bdfc:	f43f af5b 	beq.w	800bcb6 <__gethex+0xaa>
 800be00:	2919      	cmp	r1, #25
 800be02:	f73f af58 	bgt.w	800bcb6 <__gethex+0xaa>
 800be06:	4a23      	ldr	r2, [pc, #140]	; (800be94 <__gethex+0x288>)
 800be08:	7843      	ldrb	r3, [r0, #1]
 800be0a:	3910      	subs	r1, #16
 800be0c:	5cd3      	ldrb	r3, [r2, r3]
 800be0e:	1c42      	adds	r2, r0, #1
 800be10:	b193      	cbz	r3, 800be38 <__gethex+0x22c>
 800be12:	2b19      	cmp	r3, #25
 800be14:	dc10      	bgt.n	800be38 <__gethex+0x22c>
 800be16:	3002      	adds	r0, #2
 800be18:	e001      	b.n	800be1e <__gethex+0x212>
 800be1a:	2b19      	cmp	r3, #25
 800be1c:	dc0c      	bgt.n	800be38 <__gethex+0x22c>
 800be1e:	f890 c000 	ldrb.w	ip, [r0]
 800be22:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800be26:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800be2a:	f816 300c 	ldrb.w	r3, [r6, ip]
 800be2e:	4602      	mov	r2, r0
 800be30:	3910      	subs	r1, #16
 800be32:	3001      	adds	r0, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f0      	bne.n	800be1a <__gethex+0x20e>
 800be38:	f1bb 0f00 	cmp.w	fp, #0
 800be3c:	d000      	beq.n	800be40 <__gethex+0x234>
 800be3e:	4249      	negs	r1, r1
 800be40:	9b05      	ldr	r3, [sp, #20]
 800be42:	1858      	adds	r0, r3, r1
 800be44:	9005      	str	r0, [sp, #20]
 800be46:	e737      	b.n	800bcb8 <__gethex+0xac>
 800be48:	f7ff feb8 	bl	800bbbc <__hexdig_init>
 800be4c:	e6f6      	b.n	800bc3c <__gethex+0x30>
 800be4e:	4628      	mov	r0, r5
 800be50:	9902      	ldr	r1, [sp, #8]
 800be52:	9a03      	ldr	r2, [sp, #12]
 800be54:	f7f9 fbd8 	bl	8005608 <strncmp>
 800be58:	2800      	cmp	r0, #0
 800be5a:	f040 80ae 	bne.w	800bfba <__gethex+0x3ae>
 800be5e:	9a03      	ldr	r2, [sp, #12]
 800be60:	5cab      	ldrb	r3, [r5, r2]
 800be62:	18ac      	adds	r4, r5, r2
 800be64:	f819 0003 	ldrb.w	r0, [r9, r3]
 800be68:	2800      	cmp	r0, #0
 800be6a:	f000 80fd 	beq.w	800c068 <__gethex+0x45c>
 800be6e:	2b30      	cmp	r3, #48	; 0x30
 800be70:	f040 811d 	bne.w	800c0ae <__gethex+0x4a2>
 800be74:	1c63      	adds	r3, r4, #1
 800be76:	461d      	mov	r5, r3
 800be78:	f813 1b01 	ldrb.w	r1, [r3], #1
 800be7c:	2930      	cmp	r1, #48	; 0x30
 800be7e:	d0fa      	beq.n	800be76 <__gethex+0x26a>
 800be80:	5c77      	ldrb	r7, [r6, r1]
 800be82:	2f00      	cmp	r7, #0
 800be84:	f040 8114 	bne.w	800c0b0 <__gethex+0x4a4>
 800be88:	f04f 0901 	mov.w	r9, #1
 800be8c:	46a3      	mov	fp, r4
 800be8e:	464f      	mov	r7, r9
 800be90:	462c      	mov	r4, r5
 800be92:	e6fa      	b.n	800bc8a <__gethex+0x7e>
 800be94:	20001c48 	.word	0x20001c48
 800be98:	1e77      	subs	r7, r6, #1
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	f040 80fa 	bne.w	800c094 <__gethex+0x488>
 800bea0:	2f00      	cmp	r7, #0
 800bea2:	dd04      	ble.n	800beae <__gethex+0x2a2>
 800bea4:	9804      	ldr	r0, [sp, #16]
 800bea6:	4639      	mov	r1, r7
 800bea8:	f001 fada 	bl	800d460 <__any_on>
 800beac:	4605      	mov	r5, r0
 800beae:	f007 031f 	and.w	r3, r7, #31
 800beb2:	2201      	movs	r2, #1
 800beb4:	fa02 f203 	lsl.w	r2, r2, r3
 800beb8:	9808      	ldr	r0, [sp, #32]
 800beba:	1179      	asrs	r1, r7, #5
 800bebc:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 800bec0:	9804      	ldr	r0, [sp, #16]
 800bec2:	423a      	tst	r2, r7
 800bec4:	4631      	mov	r1, r6
 800bec6:	bf18      	it	ne
 800bec8:	f045 0502 	orrne.w	r5, r5, #2
 800becc:	f7ff fdd2 	bl	800ba74 <rshift>
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	1ba4      	subs	r4, r4, r6
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	2702      	movs	r7, #2
 800bed8:	9205      	str	r2, [sp, #20]
 800beda:	2d00      	cmp	r5, #0
 800bedc:	d07b      	beq.n	800bfd6 <__gethex+0x3ca>
 800bede:	9906      	ldr	r1, [sp, #24]
 800bee0:	68c8      	ldr	r0, [r1, #12]
 800bee2:	2802      	cmp	r0, #2
 800bee4:	f000 8100 	beq.w	800c0e8 <__gethex+0x4dc>
 800bee8:	2803      	cmp	r0, #3
 800beea:	d06f      	beq.n	800bfcc <__gethex+0x3c0>
 800beec:	2801      	cmp	r0, #1
 800beee:	d170      	bne.n	800bfd2 <__gethex+0x3c6>
 800bef0:	07aa      	lsls	r2, r5, #30
 800bef2:	d56e      	bpl.n	800bfd2 <__gethex+0x3c6>
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	ea45 0102 	orr.w	r1, r5, r2
 800befc:	07cb      	lsls	r3, r1, #31
 800befe:	d568      	bpl.n	800bfd2 <__gethex+0x3c6>
 800bf00:	9e04      	ldr	r6, [sp, #16]
 800bf02:	9808      	ldr	r0, [sp, #32]
 800bf04:	6935      	ldr	r5, [r6, #16]
 800bf06:	4603      	mov	r3, r0
 800bf08:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800bf0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf10:	3614      	adds	r6, #20
 800bf12:	43c1      	mvns	r1, r0
 800bf14:	1871      	adds	r1, r6, r1
 800bf16:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bf1a:	f04f 0800 	mov.w	r8, #0
 800bf1e:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800bf22:	d11d      	bne.n	800bf60 <__gethex+0x354>
 800bf24:	429e      	cmp	r6, r3
 800bf26:	f843 8c04 	str.w	r8, [r3, #-4]
 800bf2a:	f240 80e4 	bls.w	800c0f6 <__gethex+0x4ea>
 800bf2e:	b149      	cbz	r1, 800bf44 <__gethex+0x338>
 800bf30:	4618      	mov	r0, r3
 800bf32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf36:	1c51      	adds	r1, r2, #1
 800bf38:	d112      	bne.n	800bf60 <__gethex+0x354>
 800bf3a:	429e      	cmp	r6, r3
 800bf3c:	f843 8c04 	str.w	r8, [r3, #-4]
 800bf40:	f240 80d9 	bls.w	800c0f6 <__gethex+0x4ea>
 800bf44:	4619      	mov	r1, r3
 800bf46:	f851 2b04 	ldr.w	r2, [r1], #4
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bf50:	d106      	bne.n	800bf60 <__gethex+0x354>
 800bf52:	f841 8c04 	str.w	r8, [r1, #-4]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	4608      	mov	r0, r1
 800bf5a:	1d0b      	adds	r3, r1, #4
 800bf5c:	1c51      	adds	r1, r2, #1
 800bf5e:	d0ec      	beq.n	800bf3a <__gethex+0x32e>
 800bf60:	3201      	adds	r2, #1
 800bf62:	6002      	str	r2, [r0, #0]
 800bf64:	2f02      	cmp	r7, #2
 800bf66:	f000 80e7 	beq.w	800c138 <__gethex+0x52c>
 800bf6a:	9f04      	ldr	r7, [sp, #16]
 800bf6c:	6938      	ldr	r0, [r7, #16]
 800bf6e:	4285      	cmp	r5, r0
 800bf70:	db0e      	blt.n	800bf90 <__gethex+0x384>
 800bf72:	f014 041f 	ands.w	r4, r4, #31
 800bf76:	f000 80ae 	beq.w	800c0d6 <__gethex+0x4ca>
 800bf7a:	9b04      	ldr	r3, [sp, #16]
 800bf7c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bf80:	6928      	ldr	r0, [r5, #16]
 800bf82:	f000 fd1b 	bl	800c9bc <__hi0bits>
 800bf86:	f1c4 0120 	rsb	r1, r4, #32
 800bf8a:	4288      	cmp	r0, r1
 800bf8c:	f280 80a3 	bge.w	800c0d6 <__gethex+0x4ca>
 800bf90:	9804      	ldr	r0, [sp, #16]
 800bf92:	2101      	movs	r1, #1
 800bf94:	f7ff fd6e 	bl	800ba74 <rshift>
 800bf98:	9a06      	ldr	r2, [sp, #24]
 800bf9a:	9805      	ldr	r0, [sp, #20]
 800bf9c:	6897      	ldr	r7, [r2, #8]
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	42bb      	cmp	r3, r7
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	f340 8097 	ble.w	800c0d6 <__gethex+0x4ca>
 800bfa8:	9807      	ldr	r0, [sp, #28]
 800bfaa:	9904      	ldr	r1, [sp, #16]
 800bfac:	f000 fbde 	bl	800c76c <_Bfree>
 800bfb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfb2:	2700      	movs	r7, #0
 800bfb4:	601f      	str	r7, [r3, #0]
 800bfb6:	27a3      	movs	r7, #163	; 0xa3
 800bfb8:	e687      	b.n	800bcca <__gethex+0xbe>
 800bfba:	782b      	ldrb	r3, [r5, #0]
 800bfbc:	462c      	mov	r4, r5
 800bfbe:	f8cd b014 	str.w	fp, [sp, #20]
 800bfc2:	f04f 0901 	mov.w	r9, #1
 800bfc6:	e670      	b.n	800bcaa <__gethex+0x9e>
 800bfc8:	2701      	movs	r7, #1
 800bfca:	e786      	b.n	800beda <__gethex+0x2ce>
 800bfcc:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d196      	bne.n	800bf00 <__gethex+0x2f4>
 800bfd2:	f047 0710 	orr.w	r7, r7, #16
 800bfd6:	9904      	ldr	r1, [sp, #16]
 800bfd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfda:	9a05      	ldr	r2, [sp, #20]
 800bfdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfde:	6019      	str	r1, [r3, #0]
 800bfe0:	6002      	str	r2, [r0, #0]
 800bfe2:	e672      	b.n	800bcca <__gethex+0xbe>
 800bfe4:	f04f 0b01 	mov.w	fp, #1
 800bfe8:	78a3      	ldrb	r3, [r4, #2]
 800bfea:	1ca0      	adds	r0, r4, #2
 800bfec:	e704      	b.n	800bdf8 <__gethex+0x1ec>
 800bfee:	f04f 0b00 	mov.w	fp, #0
 800bff2:	e7f9      	b.n	800bfe8 <__gethex+0x3dc>
 800bff4:	1b06      	subs	r6, r0, r4
 800bff6:	4631      	mov	r1, r6
 800bff8:	9804      	ldr	r0, [sp, #16]
 800bffa:	f001 fa31 	bl	800d460 <__any_on>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d030      	beq.n	800c064 <__gethex+0x458>
 800c002:	1e77      	subs	r7, r6, #1
 800c004:	f007 011f 	and.w	r1, r7, #31
 800c008:	2501      	movs	r5, #1
 800c00a:	fa05 f301 	lsl.w	r3, r5, r1
 800c00e:	9804      	ldr	r0, [sp, #16]
 800c010:	117a      	asrs	r2, r7, #5
 800c012:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800c016:	694a      	ldr	r2, [r1, #20]
 800c018:	4213      	tst	r3, r2
 800c01a:	d008      	beq.n	800c02e <__gethex+0x422>
 800c01c:	42af      	cmp	r7, r5
 800c01e:	dd61      	ble.n	800c0e4 <__gethex+0x4d8>
 800c020:	9804      	ldr	r0, [sp, #16]
 800c022:	1eb1      	subs	r1, r6, #2
 800c024:	f001 fa1c 	bl	800d460 <__any_on>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d05b      	beq.n	800c0e4 <__gethex+0x4d8>
 800c02c:	2503      	movs	r5, #3
 800c02e:	9804      	ldr	r0, [sp, #16]
 800c030:	4631      	mov	r1, r6
 800c032:	f7ff fd1f 	bl	800ba74 <rshift>
 800c036:	9f05      	ldr	r7, [sp, #20]
 800c038:	19bb      	adds	r3, r7, r6
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	e6a9      	b.n	800bd92 <__gethex+0x186>
 800c03e:	f8cd b014 	str.w	fp, [sp, #20]
 800c042:	e632      	b.n	800bcaa <__gethex+0x9e>
 800c044:	1a27      	subs	r7, r4, r0
 800c046:	463a      	mov	r2, r7
 800c048:	9807      	ldr	r0, [sp, #28]
 800c04a:	9904      	ldr	r1, [sp, #16]
 800c04c:	f000 febe 	bl	800cdcc <__lshift>
 800c050:	9b05      	ldr	r3, [sp, #20]
 800c052:	9004      	str	r0, [sp, #16]
 800c054:	1bda      	subs	r2, r3, r7
 800c056:	3014      	adds	r0, #20
 800c058:	9205      	str	r2, [sp, #20]
 800c05a:	9008      	str	r0, [sp, #32]
 800c05c:	2500      	movs	r5, #0
 800c05e:	e698      	b.n	800bd92 <__gethex+0x186>
 800c060:	2700      	movs	r7, #0
 800c062:	e5fa      	b.n	800bc5a <__gethex+0x4e>
 800c064:	4605      	mov	r5, r0
 800c066:	e7e2      	b.n	800c02e <__gethex+0x422>
 800c068:	9005      	str	r0, [sp, #20]
 800c06a:	f04f 0901 	mov.w	r9, #1
 800c06e:	e61c      	b.n	800bcaa <__gethex+0x9e>
 800c070:	462c      	mov	r4, r5
 800c072:	4681      	mov	r9, r0
 800c074:	9903      	ldr	r1, [sp, #12]
 800c076:	5c63      	ldrb	r3, [r4, r1]
 800c078:	eb04 0b01 	add.w	fp, r4, r1
 800c07c:	5cf4      	ldrb	r4, [r6, r3]
 800c07e:	2c00      	cmp	r4, #0
 800c080:	d077      	beq.n	800c172 <__gethex+0x566>
 800c082:	f10b 0001 	add.w	r0, fp, #1
 800c086:	4604      	mov	r4, r0
 800c088:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c08c:	5cf2      	ldrb	r2, [r6, r3]
 800c08e:	2a00      	cmp	r2, #0
 800c090:	d1f9      	bne.n	800c086 <__gethex+0x47a>
 800c092:	e605      	b.n	800bca0 <__gethex+0x94>
 800c094:	2501      	movs	r5, #1
 800c096:	e70a      	b.n	800beae <__gethex+0x2a2>
 800c098:	4628      	mov	r0, r5
 800c09a:	9902      	ldr	r1, [sp, #8]
 800c09c:	9a03      	ldr	r2, [sp, #12]
 800c09e:	f7f9 fab3 	bl	8005608 <strncmp>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0e4      	beq.n	800c070 <__gethex+0x464>
 800c0a6:	46a1      	mov	r9, r4
 800c0a8:	46cb      	mov	fp, r9
 800c0aa:	462c      	mov	r4, r5
 800c0ac:	e5f3      	b.n	800bc96 <__gethex+0x8a>
 800c0ae:	4625      	mov	r5, r4
 800c0b0:	46a3      	mov	fp, r4
 800c0b2:	2701      	movs	r7, #1
 800c0b4:	e5e1      	b.n	800bc7a <__gethex+0x6e>
 800c0b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	f47f ae83 	bne.w	800bdc4 <__gethex+0x1b8>
 800c0be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0c0:	9908      	ldr	r1, [sp, #32]
 800c0c2:	6003      	str	r3, [r0, #0]
 800c0c4:	9b04      	ldr	r3, [sp, #16]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	611a      	str	r2, [r3, #16]
 800c0ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c0cc:	600a      	str	r2, [r1, #0]
 800c0ce:	9a04      	ldr	r2, [sp, #16]
 800c0d0:	2762      	movs	r7, #98	; 0x62
 800c0d2:	6002      	str	r2, [r0, #0]
 800c0d4:	e5f9      	b.n	800bcca <__gethex+0xbe>
 800c0d6:	2721      	movs	r7, #33	; 0x21
 800c0d8:	e77d      	b.n	800bfd6 <__gethex+0x3ca>
 800c0da:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c0de:	f04f 0800 	mov.w	r8, #0
 800c0e2:	e640      	b.n	800bd66 <__gethex+0x15a>
 800c0e4:	2502      	movs	r5, #2
 800c0e6:	e7a2      	b.n	800c02e <__gethex+0x422>
 800c0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ea:	f1c3 0001 	rsb	r0, r3, #1
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f af6f 	beq.w	800bfd2 <__gethex+0x3c6>
 800c0f4:	e704      	b.n	800bf00 <__gethex+0x2f4>
 800c0f6:	9904      	ldr	r1, [sp, #16]
 800c0f8:	688b      	ldr	r3, [r1, #8]
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	da23      	bge.n	800c146 <__gethex+0x53a>
 800c0fe:	4629      	mov	r1, r5
 800c100:	9804      	ldr	r0, [sp, #16]
 800c102:	1c4b      	adds	r3, r1, #1
 800c104:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800c108:	2101      	movs	r1, #1
 800c10a:	6151      	str	r1, [r2, #20]
 800c10c:	6103      	str	r3, [r0, #16]
 800c10e:	e729      	b.n	800bf64 <__gethex+0x358>
 800c110:	42a6      	cmp	r6, r4
 800c112:	f47f ae57 	bne.w	800bdc4 <__gethex+0x1b8>
 800c116:	2c01      	cmp	r4, #1
 800c118:	ddd1      	ble.n	800c0be <__gethex+0x4b2>
 800c11a:	9804      	ldr	r0, [sp, #16]
 800c11c:	1e61      	subs	r1, r4, #1
 800c11e:	f001 f99f 	bl	800d460 <__any_on>
 800c122:	2800      	cmp	r0, #0
 800c124:	f43f ae4e 	beq.w	800bdc4 <__gethex+0x1b8>
 800c128:	9906      	ldr	r1, [sp, #24]
 800c12a:	684b      	ldr	r3, [r1, #4]
 800c12c:	e7c7      	b.n	800c0be <__gethex+0x4b2>
 800c12e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c130:	2a00      	cmp	r2, #0
 800c132:	f43f ae47 	beq.w	800bdc4 <__gethex+0x1b8>
 800c136:	e7c2      	b.n	800c0be <__gethex+0x4b2>
 800c138:	9906      	ldr	r1, [sp, #24]
 800c13a:	680a      	ldr	r2, [r1, #0]
 800c13c:	1e57      	subs	r7, r2, #1
 800c13e:	42a7      	cmp	r7, r4
 800c140:	d019      	beq.n	800c176 <__gethex+0x56a>
 800c142:	2722      	movs	r7, #34	; 0x22
 800c144:	e747      	b.n	800bfd6 <__gethex+0x3ca>
 800c146:	684e      	ldr	r6, [r1, #4]
 800c148:	9807      	ldr	r0, [sp, #28]
 800c14a:	1c71      	adds	r1, r6, #1
 800c14c:	f000 fae8 	bl	800c720 <_Balloc>
 800c150:	9904      	ldr	r1, [sp, #16]
 800c152:	4606      	mov	r6, r0
 800c154:	6908      	ldr	r0, [r1, #16]
 800c156:	310c      	adds	r1, #12
 800c158:	1c82      	adds	r2, r0, #2
 800c15a:	0092      	lsls	r2, r2, #2
 800c15c:	f106 000c 	add.w	r0, r6, #12
 800c160:	f000 fa30 	bl	800c5c4 <memcpy>
 800c164:	9904      	ldr	r1, [sp, #16]
 800c166:	9807      	ldr	r0, [sp, #28]
 800c168:	f000 fb00 	bl	800c76c <_Bfree>
 800c16c:	9604      	str	r6, [sp, #16]
 800c16e:	6931      	ldr	r1, [r6, #16]
 800c170:	e7c6      	b.n	800c100 <__gethex+0x4f4>
 800c172:	465c      	mov	r4, fp
 800c174:	e594      	b.n	800bca0 <__gethex+0x94>
 800c176:	f004 001f 	and.w	r0, r4, #31
 800c17a:	2101      	movs	r1, #1
 800c17c:	fa01 f100 	lsl.w	r1, r1, r0
 800c180:	9a04      	ldr	r2, [sp, #16]
 800c182:	1163      	asrs	r3, r4, #5
 800c184:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800c188:	6978      	ldr	r0, [r7, #20]
 800c18a:	4201      	tst	r1, r0
 800c18c:	bf14      	ite	ne
 800c18e:	2721      	movne	r7, #33	; 0x21
 800c190:	2722      	moveq	r7, #34	; 0x22
 800c192:	e720      	b.n	800bfd6 <__gethex+0x3ca>

0800c194 <__hexnan>:
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	4daa      	ldr	r5, [pc, #680]	; (800c444 <__hexnan+0x2b0>)
 800c19a:	b087      	sub	sp, #28
 800c19c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800c1a0:	9003      	str	r0, [sp, #12]
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	4617      	mov	r7, r2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 8147 	beq.w	800c43a <__hexnan+0x2a6>
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	1142      	asrs	r2, r0, #5
 800c1b0:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 800c1b4:	f010 031f 	ands.w	r3, r0, #31
 800c1b8:	9102      	str	r1, [sp, #8]
 800c1ba:	9304      	str	r3, [sp, #16]
 800c1bc:	d001      	beq.n	800c1c2 <__hexnan+0x2e>
 800c1be:	1d0c      	adds	r4, r1, #4
 800c1c0:	9402      	str	r4, [sp, #8]
 800c1c2:	9802      	ldr	r0, [sp, #8]
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	9902      	ldr	r1, [sp, #8]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	3804      	subs	r0, #4
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	f841 2c04 	str.w	r2, [r1, #-4]
 800c1d4:	46a4      	mov	ip, r4
 800c1d6:	785c      	ldrb	r4, [r3, #1]
 800c1d8:	9001      	str	r0, [sp, #4]
 800c1da:	4601      	mov	r1, r0
 800c1dc:	4690      	mov	r8, r2
 800c1de:	4691      	mov	r9, r2
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	2c00      	cmp	r4, #0
 800c1e4:	d057      	beq.n	800c296 <__hexnan+0x102>
 800c1e6:	5d2e      	ldrb	r6, [r5, r4]
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	f040 80fe 	bne.w	800c3ea <__hexnan+0x256>
 800c1ee:	2c20      	cmp	r4, #32
 800c1f0:	f200 811c 	bhi.w	800c42c <__hexnan+0x298>
 800c1f4:	4548      	cmp	r0, r9
 800c1f6:	dd4a      	ble.n	800c28e <__hexnan+0xfa>
 800c1f8:	4561      	cmp	r1, ip
 800c1fa:	d243      	bcs.n	800c284 <__hexnan+0xf0>
 800c1fc:	f1b8 0f07 	cmp.w	r8, #7
 800c200:	dc40      	bgt.n	800c284 <__hexnan+0xf0>
 800c202:	f1c8 0608 	rsb	r6, r8, #8
 800c206:	684c      	ldr	r4, [r1, #4]
 800c208:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c20c:	f1c8 0b20 	rsb	fp, r8, #32
 800c210:	fa04 fa0b 	lsl.w	sl, r4, fp
 800c214:	fa24 f208 	lsr.w	r2, r4, r8
 800c218:	680c      	ldr	r4, [r1, #0]
 800c21a:	43ce      	mvns	r6, r1
 800c21c:	ea44 0a0a 	orr.w	sl, r4, sl
 800c220:	460c      	mov	r4, r1
 800c222:	f844 ab04 	str.w	sl, [r4], #4
 800c226:	4466      	add	r6, ip
 800c228:	45a4      	cmp	ip, r4
 800c22a:	604a      	str	r2, [r1, #4]
 800c22c:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800c230:	d928      	bls.n	800c284 <__hexnan+0xf0>
 800c232:	b166      	cbz	r6, 800c24e <__hexnan+0xba>
 800c234:	6866      	ldr	r6, [r4, #4]
 800c236:	fa06 fa0b 	lsl.w	sl, r6, fp
 800c23a:	ea42 0a0a 	orr.w	sl, r2, sl
 800c23e:	fa26 f208 	lsr.w	r2, r6, r8
 800c242:	f8c4 a000 	str.w	sl, [r4]
 800c246:	f844 2f04 	str.w	r2, [r4, #4]!
 800c24a:	45a4      	cmp	ip, r4
 800c24c:	d91a      	bls.n	800c284 <__hexnan+0xf0>
 800c24e:	9305      	str	r3, [sp, #20]
 800c250:	465b      	mov	r3, fp
 800c252:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800c256:	4626      	mov	r6, r4
 800c258:	fa0b fa03 	lsl.w	sl, fp, r3
 800c25c:	ea42 020a 	orr.w	r2, r2, sl
 800c260:	f846 2b04 	str.w	r2, [r6], #4
 800c264:	6872      	ldr	r2, [r6, #4]
 800c266:	fa2b fb08 	lsr.w	fp, fp, r8
 800c26a:	fa02 fa03 	lsl.w	sl, r2, r3
 800c26e:	fa22 f208 	lsr.w	r2, r2, r8
 800c272:	ea4b 0a0a 	orr.w	sl, fp, sl
 800c276:	f8c4 a004 	str.w	sl, [r4, #4]
 800c27a:	1d34      	adds	r4, r6, #4
 800c27c:	45a4      	cmp	ip, r4
 800c27e:	6072      	str	r2, [r6, #4]
 800c280:	d8e7      	bhi.n	800c252 <__hexnan+0xbe>
 800c282:	9b05      	ldr	r3, [sp, #20]
 800c284:	42b9      	cmp	r1, r7
 800c286:	f200 80c8 	bhi.w	800c41a <__hexnan+0x286>
 800c28a:	f04f 0808 	mov.w	r8, #8
 800c28e:	3301      	adds	r3, #1
 800c290:	785c      	ldrb	r4, [r3, #1]
 800c292:	2c00      	cmp	r4, #0
 800c294:	d1a7      	bne.n	800c1e6 <__hexnan+0x52>
 800c296:	4662      	mov	r2, ip
 800c298:	2800      	cmp	r0, #0
 800c29a:	f000 80ca 	beq.w	800c432 <__hexnan+0x29e>
 800c29e:	428a      	cmp	r2, r1
 800c2a0:	d93f      	bls.n	800c322 <__hexnan+0x18e>
 800c2a2:	f1b8 0f07 	cmp.w	r8, #7
 800c2a6:	dc3c      	bgt.n	800c322 <__hexnan+0x18e>
 800c2a8:	f1c8 0508 	rsb	r5, r8, #8
 800c2ac:	684c      	ldr	r4, [r1, #4]
 800c2ae:	00ad      	lsls	r5, r5, #2
 800c2b0:	f1c5 0620 	rsb	r6, r5, #32
 800c2b4:	fa04 fc06 	lsl.w	ip, r4, r6
 800c2b8:	fa24 f405 	lsr.w	r4, r4, r5
 800c2bc:	680b      	ldr	r3, [r1, #0]
 800c2be:	43c8      	mvns	r0, r1
 800c2c0:	ea43 0c0c 	orr.w	ip, r3, ip
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	f8c1 c000 	str.w	ip, [r1]
 800c2ca:	f843 4f04 	str.w	r4, [r3, #4]!
 800c2ce:	1810      	adds	r0, r2, r0
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800c2d6:	d924      	bls.n	800c322 <__hexnan+0x18e>
 800c2d8:	b160      	cbz	r0, 800c2f4 <__hexnan+0x160>
 800c2da:	6858      	ldr	r0, [r3, #4]
 800c2dc:	fa00 fc06 	lsl.w	ip, r0, r6
 800c2e0:	ea44 0c0c 	orr.w	ip, r4, ip
 800c2e4:	fa20 f405 	lsr.w	r4, r0, r5
 800c2e8:	f8c3 c000 	str.w	ip, [r3]
 800c2ec:	f843 4f04 	str.w	r4, [r3, #4]!
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d916      	bls.n	800c322 <__hexnan+0x18e>
 800c2f4:	4691      	mov	r9, r2
 800c2f6:	685a      	ldr	r2, [r3, #4]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	fa02 f806 	lsl.w	r8, r2, r6
 800c2fe:	ea44 0408 	orr.w	r4, r4, r8
 800c302:	f840 4b04 	str.w	r4, [r0], #4
 800c306:	6844      	ldr	r4, [r0, #4]
 800c308:	fa22 f805 	lsr.w	r8, r2, r5
 800c30c:	fa04 fc06 	lsl.w	ip, r4, r6
 800c310:	fa24 f405 	lsr.w	r4, r4, r5
 800c314:	ea48 020c 	orr.w	r2, r8, ip
 800c318:	605a      	str	r2, [r3, #4]
 800c31a:	1d03      	adds	r3, r0, #4
 800c31c:	4599      	cmp	r9, r3
 800c31e:	6044      	str	r4, [r0, #4]
 800c320:	d8e9      	bhi.n	800c2f6 <__hexnan+0x162>
 800c322:	428f      	cmp	r7, r1
 800c324:	f080 8090 	bcs.w	800c448 <__hexnan+0x2b4>
 800c328:	460b      	mov	r3, r1
 800c32a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c32e:	9c01      	ldr	r4, [sp, #4]
 800c330:	463a      	mov	r2, r7
 800c332:	1a61      	subs	r1, r4, r1
 800c334:	429c      	cmp	r4, r3
 800c336:	f842 0b04 	str.w	r0, [r2], #4
 800c33a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800c33e:	d314      	bcc.n	800c36a <__hexnan+0x1d6>
 800c340:	b130      	cbz	r0, 800c350 <__hexnan+0x1bc>
 800c342:	f853 1b04 	ldr.w	r1, [r3], #4
 800c346:	9801      	ldr	r0, [sp, #4]
 800c348:	f842 1b04 	str.w	r1, [r2], #4
 800c34c:	4298      	cmp	r0, r3
 800c34e:	d30c      	bcc.n	800c36a <__hexnan+0x1d6>
 800c350:	9d01      	ldr	r5, [sp, #4]
 800c352:	4618      	mov	r0, r3
 800c354:	f850 4b04 	ldr.w	r4, [r0], #4
 800c358:	4611      	mov	r1, r2
 800c35a:	f841 4b04 	str.w	r4, [r1], #4
 800c35e:	685c      	ldr	r4, [r3, #4]
 800c360:	1d03      	adds	r3, r0, #4
 800c362:	6054      	str	r4, [r2, #4]
 800c364:	1d0a      	adds	r2, r1, #4
 800c366:	429d      	cmp	r5, r3
 800c368:	d2f3      	bcs.n	800c352 <__hexnan+0x1be>
 800c36a:	4613      	mov	r3, r2
 800c36c:	2100      	movs	r1, #0
 800c36e:	9801      	ldr	r0, [sp, #4]
 800c370:	f843 1b04 	str.w	r1, [r3], #4
 800c374:	1a82      	subs	r2, r0, r2
 800c376:	4298      	cmp	r0, r3
 800c378:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800c37c:	d30d      	bcc.n	800c39a <__hexnan+0x206>
 800c37e:	b122      	cbz	r2, 800c38a <__hexnan+0x1f6>
 800c380:	9c01      	ldr	r4, [sp, #4]
 800c382:	f843 1b04 	str.w	r1, [r3], #4
 800c386:	429c      	cmp	r4, r3
 800c388:	d307      	bcc.n	800c39a <__hexnan+0x206>
 800c38a:	9801      	ldr	r0, [sp, #4]
 800c38c:	461a      	mov	r2, r3
 800c38e:	f842 1b04 	str.w	r1, [r2], #4
 800c392:	6059      	str	r1, [r3, #4]
 800c394:	1d13      	adds	r3, r2, #4
 800c396:	4298      	cmp	r0, r3
 800c398:	d2f8      	bcs.n	800c38c <__hexnan+0x1f8>
 800c39a:	9902      	ldr	r1, [sp, #8]
 800c39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d14d      	bne.n	800c440 <__hexnan+0x2ac>
 800c3a4:	9801      	ldr	r0, [sp, #4]
 800c3a6:	4287      	cmp	r7, r0
 800c3a8:	d069      	beq.n	800c47e <__hexnan+0x2ea>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	1bc1      	subs	r1, r0, r7
 800c3ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3b2:	1f08      	subs	r0, r1, #4
 800c3b4:	f3c0 0180 	ubfx	r1, r0, #2, #1
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d141      	bne.n	800c440 <__hexnan+0x2ac>
 800c3bc:	429f      	cmp	r7, r3
 800c3be:	d010      	beq.n	800c3e2 <__hexnan+0x24e>
 800c3c0:	b119      	cbz	r1, 800c3ca <__hexnan+0x236>
 800c3c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3c6:	b152      	cbz	r2, 800c3de <__hexnan+0x24a>
 800c3c8:	e03a      	b.n	800c440 <__hexnan+0x2ac>
 800c3ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d135      	bne.n	800c440 <__hexnan+0x2ac>
 800c3d4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800c3d8:	3b04      	subs	r3, #4
 800c3da:	2900      	cmp	r1, #0
 800c3dc:	d130      	bne.n	800c440 <__hexnan+0x2ac>
 800c3de:	429f      	cmp	r7, r3
 800c3e0:	d1f3      	bne.n	800c3ca <__hexnan+0x236>
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	2005      	movs	r0, #5
 800c3e8:	e024      	b.n	800c434 <__hexnan+0x2a0>
 800c3ea:	f108 0801 	add.w	r8, r8, #1
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	f1b8 0f08 	cmp.w	r8, #8
 800c3f4:	dc07      	bgt.n	800c406 <__hexnan+0x272>
 800c3f6:	680c      	ldr	r4, [r1, #0]
 800c3f8:	0122      	lsls	r2, r4, #4
 800c3fa:	f006 060f 	and.w	r6, r6, #15
 800c3fe:	4316      	orrs	r6, r2
 800c400:	600e      	str	r6, [r1, #0]
 800c402:	3301      	adds	r3, #1
 800c404:	e744      	b.n	800c290 <__hexnan+0xfc>
 800c406:	42b9      	cmp	r1, r7
 800c408:	f67f af41 	bls.w	800c28e <__hexnan+0xfa>
 800c40c:	2200      	movs	r2, #0
 800c40e:	f841 2c04 	str.w	r2, [r1, #-4]
 800c412:	f04f 0801 	mov.w	r8, #1
 800c416:	3904      	subs	r1, #4
 800c418:	e7ef      	b.n	800c3fa <__hexnan+0x266>
 800c41a:	2400      	movs	r4, #0
 800c41c:	f841 4c04 	str.w	r4, [r1, #-4]
 800c420:	3904      	subs	r1, #4
 800c422:	4681      	mov	r9, r0
 800c424:	468c      	mov	ip, r1
 800c426:	46a0      	mov	r8, r4
 800c428:	3301      	adds	r3, #1
 800c42a:	e731      	b.n	800c290 <__hexnan+0xfc>
 800c42c:	2c29      	cmp	r4, #41	; 0x29
 800c42e:	4662      	mov	r2, ip
 800c430:	d01e      	beq.n	800c470 <__hexnan+0x2dc>
 800c432:	2004      	movs	r0, #4
 800c434:	b007      	add	sp, #28
 800c436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43a:	f7ff fbbf 	bl	800bbbc <__hexdig_init>
 800c43e:	e6b5      	b.n	800c1ac <__hexnan+0x18>
 800c440:	2005      	movs	r0, #5
 800c442:	e7f7      	b.n	800c434 <__hexnan+0x2a0>
 800c444:	20001c48 	.word	0x20001c48
 800c448:	9b04      	ldr	r3, [sp, #16]
 800c44a:	b16b      	cbz	r3, 800c468 <__hexnan+0x2d4>
 800c44c:	9904      	ldr	r1, [sp, #16]
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c452:	f1c1 0020 	rsb	r0, r1, #32
 800c456:	fa22 f200 	lsr.w	r2, r2, r0
 800c45a:	9902      	ldr	r1, [sp, #8]
 800c45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c460:	4013      	ands	r3, r2
 800c462:	f841 3c04 	str.w	r3, [r1, #-4]
 800c466:	e79b      	b.n	800c3a0 <__hexnan+0x20c>
 800c468:	9c02      	ldr	r4, [sp, #8]
 800c46a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c46e:	e797      	b.n	800c3a0 <__hexnan+0x20c>
 800c470:	9c03      	ldr	r4, [sp, #12]
 800c472:	3302      	adds	r3, #2
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	2800      	cmp	r0, #0
 800c478:	f47f af11 	bne.w	800c29e <__hexnan+0x10a>
 800c47c:	e7d9      	b.n	800c432 <__hexnan+0x29e>
 800c47e:	463b      	mov	r3, r7
 800c480:	e7af      	b.n	800c3e2 <__hexnan+0x24e>
 800c482:	bf00      	nop

0800c484 <memchr>:
 800c484:	0783      	lsls	r3, r0, #30
 800c486:	b4f0      	push	{r4, r5, r6, r7}
 800c488:	b2c9      	uxtb	r1, r1
 800c48a:	f000 8096 	beq.w	800c5ba <memchr+0x136>
 800c48e:	1e53      	subs	r3, r2, #1
 800c490:	2a00      	cmp	r2, #0
 800c492:	f000 8094 	beq.w	800c5be <memchr+0x13a>
 800c496:	7802      	ldrb	r2, [r0, #0]
 800c498:	428a      	cmp	r2, r1
 800c49a:	d00b      	beq.n	800c4b4 <memchr+0x30>
 800c49c:	1c42      	adds	r2, r0, #1
 800c49e:	07d8      	lsls	r0, r3, #31
 800c4a0:	d51a      	bpl.n	800c4d8 <memchr+0x54>
 800c4a2:	f012 0f03 	tst.w	r2, #3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	d01c      	beq.n	800c4e4 <memchr+0x60>
 800c4aa:	7814      	ldrb	r4, [r2, #0]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	3201      	adds	r2, #1
 800c4b0:	428c      	cmp	r4, r1
 800c4b2:	d111      	bne.n	800c4d8 <memchr+0x54>
 800c4b4:	bcf0      	pop	{r4, r5, r6, r7}
 800c4b6:	4770      	bx	lr
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d07c      	beq.n	800c5b6 <memchr+0x132>
 800c4bc:	7812      	ldrb	r2, [r2, #0]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	428a      	cmp	r2, r1
 800c4c2:	d0f7      	beq.n	800c4b4 <memchr+0x30>
 800c4c4:	f014 0f03 	tst.w	r4, #3
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f104 0201 	add.w	r2, r4, #1
 800c4ce:	d009      	beq.n	800c4e4 <memchr+0x60>
 800c4d0:	7824      	ldrb	r4, [r4, #0]
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	428c      	cmp	r4, r1
 800c4d6:	d0ed      	beq.n	800c4b4 <memchr+0x30>
 800c4d8:	f012 0f03 	tst.w	r2, #3
 800c4dc:	4610      	mov	r0, r2
 800c4de:	f102 0401 	add.w	r4, r2, #1
 800c4e2:	d1e9      	bne.n	800c4b8 <memchr+0x34>
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d93f      	bls.n	800c568 <memchr+0xe4>
 800c4e8:	6804      	ldr	r4, [r0, #0]
 800c4ea:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
 800c4ee:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800c4f2:	ea85 0704 	eor.w	r7, r5, r4
 800c4f6:	f1a7 3201 	sub.w	r2, r7, #16843009	; 0x1010101
 800c4fa:	ea22 0207 	bic.w	r2, r2, r7
 800c4fe:	1f1e      	subs	r6, r3, #4
 800c500:	1d04      	adds	r4, r0, #4
 800c502:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c506:	f3c6 0780 	ubfx	r7, r6, #2, #1
 800c50a:	d12d      	bne.n	800c568 <memchr+0xe4>
 800c50c:	2e03      	cmp	r6, #3
 800c50e:	4633      	mov	r3, r6
 800c510:	d929      	bls.n	800c566 <memchr+0xe2>
 800c512:	b167      	cbz	r7, 800c52e <memchr+0xaa>
 800c514:	6826      	ldr	r6, [r4, #0]
 800c516:	4620      	mov	r0, r4
 800c518:	ea85 0206 	eor.w	r2, r5, r6
 800c51c:	f1a2 3601 	sub.w	r6, r2, #16843009	; 0x1010101
 800c520:	ea26 0202 	bic.w	r2, r6, r2
 800c524:	3404      	adds	r4, #4
 800c526:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c52a:	d019      	beq.n	800c560 <memchr+0xdc>
 800c52c:	e01c      	b.n	800c568 <memchr+0xe4>
 800c52e:	4620      	mov	r0, r4
 800c530:	6824      	ldr	r4, [r4, #0]
 800c532:	1d06      	adds	r6, r0, #4
 800c534:	ea85 0204 	eor.w	r2, r5, r4
 800c538:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 800c53c:	ea24 0202 	bic.w	r2, r4, r2
 800c540:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c544:	d110      	bne.n	800c568 <memchr+0xe4>
 800c546:	6834      	ldr	r4, [r6, #0]
 800c548:	3b04      	subs	r3, #4
 800c54a:	ea85 0204 	eor.w	r2, r5, r4
 800c54e:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 800c552:	ea24 0202 	bic.w	r2, r4, r2
 800c556:	1d34      	adds	r4, r6, #4
 800c558:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c55c:	4630      	mov	r0, r6
 800c55e:	d103      	bne.n	800c568 <memchr+0xe4>
 800c560:	3b04      	subs	r3, #4
 800c562:	2b03      	cmp	r3, #3
 800c564:	d8e3      	bhi.n	800c52e <memchr+0xaa>
 800c566:	4620      	mov	r0, r4
 800c568:	1e5d      	subs	r5, r3, #1
 800c56a:	b323      	cbz	r3, 800c5b6 <memchr+0x132>
 800c56c:	7803      	ldrb	r3, [r0, #0]
 800c56e:	428b      	cmp	r3, r1
 800c570:	d0a0      	beq.n	800c4b4 <memchr+0x30>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	2200      	movs	r2, #0
 800c576:	07e8      	lsls	r0, r5, #31
 800c578:	d514      	bpl.n	800c5a4 <memchr+0x120>
 800c57a:	781c      	ldrb	r4, [r3, #0]
 800c57c:	4618      	mov	r0, r3
 800c57e:	2201      	movs	r2, #1
 800c580:	3301      	adds	r3, #1
 800c582:	428c      	cmp	r4, r1
 800c584:	d096      	beq.n	800c4b4 <memchr+0x30>
 800c586:	4295      	cmp	r5, r2
 800c588:	4618      	mov	r0, r3
 800c58a:	f103 0401 	add.w	r4, r3, #1
 800c58e:	f102 0202 	add.w	r2, r2, #2
 800c592:	d00e      	beq.n	800c5b2 <memchr+0x12e>
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	428b      	cmp	r3, r1
 800c598:	d08c      	beq.n	800c4b4 <memchr+0x30>
 800c59a:	4620      	mov	r0, r4
 800c59c:	7824      	ldrb	r4, [r4, #0]
 800c59e:	1c43      	adds	r3, r0, #1
 800c5a0:	428c      	cmp	r4, r1
 800c5a2:	d087      	beq.n	800c4b4 <memchr+0x30>
 800c5a4:	4295      	cmp	r5, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f103 0401 	add.w	r4, r3, #1
 800c5ac:	f102 0202 	add.w	r2, r2, #2
 800c5b0:	d1f0      	bne.n	800c594 <memchr+0x110>
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	e77e      	b.n	800c4b4 <memchr+0x30>
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	e77c      	b.n	800c4b4 <memchr+0x30>
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	e792      	b.n	800c4e4 <memchr+0x60>
 800c5be:	4610      	mov	r0, r2
 800c5c0:	e778      	b.n	800c4b4 <memchr+0x30>
 800c5c2:	bf00      	nop

0800c5c4 <memcpy>:
 800c5c4:	2a0f      	cmp	r2, #15
 800c5c6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800c5ca:	f240 80a1 	bls.w	800c710 <memcpy+0x14c>
 800c5ce:	ea41 0300 	orr.w	r3, r1, r0
 800c5d2:	079b      	lsls	r3, r3, #30
 800c5d4:	f040 809e 	bne.w	800c714 <memcpy+0x150>
 800c5d8:	680c      	ldr	r4, [r1, #0]
 800c5da:	f1a2 0510 	sub.w	r5, r2, #16
 800c5de:	6004      	str	r4, [r0, #0]
 800c5e0:	684b      	ldr	r3, [r1, #4]
 800c5e2:	46ac      	mov	ip, r5
 800c5e4:	6043      	str	r3, [r0, #4]
 800c5e6:	688c      	ldr	r4, [r1, #8]
 800c5e8:	f1bc 0f0f 	cmp.w	ip, #15
 800c5ec:	6084      	str	r4, [r0, #8]
 800c5ee:	68cc      	ldr	r4, [r1, #12]
 800c5f0:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800c5f4:	60c4      	str	r4, [r0, #12]
 800c5f6:	f100 0310 	add.w	r3, r0, #16
 800c5fa:	f101 0410 	add.w	r4, r1, #16
 800c5fe:	d92b      	bls.n	800c658 <memcpy+0x94>
 800c600:	b175      	cbz	r5, 800c620 <memcpy+0x5c>
 800c602:	6825      	ldr	r5, [r4, #0]
 800c604:	f1ac 0c10 	sub.w	ip, ip, #16
 800c608:	601d      	str	r5, [r3, #0]
 800c60a:	6865      	ldr	r5, [r4, #4]
 800c60c:	605d      	str	r5, [r3, #4]
 800c60e:	68a5      	ldr	r5, [r4, #8]
 800c610:	609d      	str	r5, [r3, #8]
 800c612:	68e5      	ldr	r5, [r4, #12]
 800c614:	3410      	adds	r4, #16
 800c616:	60dd      	str	r5, [r3, #12]
 800c618:	3310      	adds	r3, #16
 800c61a:	f1bc 0f0f 	cmp.w	ip, #15
 800c61e:	d91b      	bls.n	800c658 <memcpy+0x94>
 800c620:	6827      	ldr	r7, [r4, #0]
 800c622:	f104 0610 	add.w	r6, r4, #16
 800c626:	601f      	str	r7, [r3, #0]
 800c628:	6867      	ldr	r7, [r4, #4]
 800c62a:	f103 0510 	add.w	r5, r3, #16
 800c62e:	605f      	str	r7, [r3, #4]
 800c630:	68a7      	ldr	r7, [r4, #8]
 800c632:	f1ac 0c20 	sub.w	ip, ip, #32
 800c636:	609f      	str	r7, [r3, #8]
 800c638:	68e7      	ldr	r7, [r4, #12]
 800c63a:	60df      	str	r7, [r3, #12]
 800c63c:	6924      	ldr	r4, [r4, #16]
 800c63e:	611c      	str	r4, [r3, #16]
 800c640:	6877      	ldr	r7, [r6, #4]
 800c642:	f106 0410 	add.w	r4, r6, #16
 800c646:	606f      	str	r7, [r5, #4]
 800c648:	68b7      	ldr	r7, [r6, #8]
 800c64a:	3320      	adds	r3, #32
 800c64c:	60af      	str	r7, [r5, #8]
 800c64e:	68f6      	ldr	r6, [r6, #12]
 800c650:	f1bc 0f0f 	cmp.w	ip, #15
 800c654:	60ee      	str	r6, [r5, #12]
 800c656:	d8e3      	bhi.n	800c620 <memcpy+0x5c>
 800c658:	f1a2 0810 	sub.w	r8, r2, #16
 800c65c:	f028 030f 	bic.w	r3, r8, #15
 800c660:	f002 040f 	and.w	r4, r2, #15
 800c664:	f103 0c10 	add.w	ip, r3, #16
 800c668:	2c03      	cmp	r4, #3
 800c66a:	eb00 030c 	add.w	r3, r0, ip
 800c66e:	eb01 080c 	add.w	r8, r1, ip
 800c672:	d951      	bls.n	800c718 <memcpy+0x154>
 800c674:	1f21      	subs	r1, r4, #4
 800c676:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800c67a:	4644      	mov	r4, r8
 800c67c:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 800c680:	f854 6b04 	ldr.w	r6, [r4], #4
 800c684:	ebc8 010c 	rsb	r1, r8, ip
 800c688:	f10c 0c04 	add.w	ip, ip, #4
 800c68c:	461d      	mov	r5, r3
 800c68e:	4564      	cmp	r4, ip
 800c690:	f845 6b04 	str.w	r6, [r5], #4
 800c694:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800c698:	d012      	beq.n	800c6c0 <memcpy+0xfc>
 800c69a:	b129      	cbz	r1, 800c6a8 <memcpy+0xe4>
 800c69c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c6a0:	4564      	cmp	r4, ip
 800c6a2:	f845 1b04 	str.w	r1, [r5], #4
 800c6a6:	d00b      	beq.n	800c6c0 <memcpy+0xfc>
 800c6a8:	4627      	mov	r7, r4
 800c6aa:	f857 1b04 	ldr.w	r1, [r7], #4
 800c6ae:	462e      	mov	r6, r5
 800c6b0:	f846 1b04 	str.w	r1, [r6], #4
 800c6b4:	6864      	ldr	r4, [r4, #4]
 800c6b6:	606c      	str	r4, [r5, #4]
 800c6b8:	1d3c      	adds	r4, r7, #4
 800c6ba:	1d35      	adds	r5, r6, #4
 800c6bc:	4564      	cmp	r4, ip
 800c6be:	d1f3      	bne.n	800c6a8 <memcpy+0xe4>
 800c6c0:	f109 0c01 	add.w	ip, r9, #1
 800c6c4:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800c6c8:	f002 0203 	and.w	r2, r2, #3
 800c6cc:	eb08 0109 	add.w	r1, r8, r9
 800c6d0:	444b      	add	r3, r9
 800c6d2:	b1d2      	cbz	r2, 800c70a <memcpy+0x146>
 800c6d4:	780d      	ldrb	r5, [r1, #0]
 800c6d6:	189a      	adds	r2, r3, r2
 800c6d8:	43dc      	mvns	r4, r3
 800c6da:	f803 5b01 	strb.w	r5, [r3], #1
 800c6de:	1914      	adds	r4, r2, r4
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	f004 0401 	and.w	r4, r4, #1
 800c6e6:	d010      	beq.n	800c70a <memcpy+0x146>
 800c6e8:	b12c      	cbz	r4, 800c6f6 <memcpy+0x132>
 800c6ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6ee:	f803 4b01 	strb.w	r4, [r3], #1
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d009      	beq.n	800c70a <memcpy+0x146>
 800c6f6:	784d      	ldrb	r5, [r1, #1]
 800c6f8:	461c      	mov	r4, r3
 800c6fa:	f804 5b01 	strb.w	r5, [r4], #1
 800c6fe:	788d      	ldrb	r5, [r1, #2]
 800c700:	3102      	adds	r1, #2
 800c702:	705d      	strb	r5, [r3, #1]
 800c704:	1c63      	adds	r3, r4, #1
 800c706:	4293      	cmp	r3, r2
 800c708:	d1f5      	bne.n	800c6f6 <memcpy+0x132>
 800c70a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800c70e:	4770      	bx	lr
 800c710:	4603      	mov	r3, r0
 800c712:	e7de      	b.n	800c6d2 <memcpy+0x10e>
 800c714:	4603      	mov	r3, r0
 800c716:	e7dd      	b.n	800c6d4 <memcpy+0x110>
 800c718:	4641      	mov	r1, r8
 800c71a:	4622      	mov	r2, r4
 800c71c:	e7d9      	b.n	800c6d2 <memcpy+0x10e>
 800c71e:	bf00      	nop

0800c720 <_Balloc>:
 800c720:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c722:	b570      	push	{r4, r5, r6, lr}
 800c724:	4605      	mov	r5, r0
 800c726:	460c      	mov	r4, r1
 800c728:	b14b      	cbz	r3, 800c73e <_Balloc+0x1e>
 800c72a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c72e:	b180      	cbz	r0, 800c752 <_Balloc+0x32>
 800c730:	6801      	ldr	r1, [r0, #0]
 800c732:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 800c736:	2300      	movs	r3, #0
 800c738:	6103      	str	r3, [r0, #16]
 800c73a:	60c3      	str	r3, [r0, #12]
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
 800c73e:	2104      	movs	r1, #4
 800c740:	2221      	movs	r2, #33	; 0x21
 800c742:	f001 f93d 	bl	800d9c0 <_calloc_r>
 800c746:	4603      	mov	r3, r0
 800c748:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d1ed      	bne.n	800c72a <_Balloc+0xa>
 800c74e:	2000      	movs	r0, #0
 800c750:	bd70      	pop	{r4, r5, r6, pc}
 800c752:	2101      	movs	r1, #1
 800c754:	fa01 f604 	lsl.w	r6, r1, r4
 800c758:	1d72      	adds	r2, r6, #5
 800c75a:	4628      	mov	r0, r5
 800c75c:	0092      	lsls	r2, r2, #2
 800c75e:	f001 f92f 	bl	800d9c0 <_calloc_r>
 800c762:	2800      	cmp	r0, #0
 800c764:	d0f3      	beq.n	800c74e <_Balloc+0x2e>
 800c766:	6044      	str	r4, [r0, #4]
 800c768:	6086      	str	r6, [r0, #8]
 800c76a:	e7e4      	b.n	800c736 <_Balloc+0x16>

0800c76c <_Bfree>:
 800c76c:	b131      	cbz	r1, 800c77c <_Bfree+0x10>
 800c76e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c770:	684a      	ldr	r2, [r1, #4]
 800c772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c776:	6008      	str	r0, [r1, #0]
 800c778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop

0800c780 <__multadd>:
 800c780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c784:	460f      	mov	r7, r1
 800c786:	6949      	ldr	r1, [r1, #20]
 800c788:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800c78c:	b28c      	uxth	r4, r1
 800c78e:	0c0e      	lsrs	r6, r1, #16
 800c790:	fb02 3304 	mla	r3, r2, r4, r3
 800c794:	fb02 f106 	mul.w	r1, r2, r6
 800c798:	b29c      	uxth	r4, r3
 800c79a:	eb01 4613 	add.w	r6, r1, r3, lsr #16
 800c79e:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 800c7a2:	f107 0318 	add.w	r3, r7, #24
 800c7a6:	f843 4c04 	str.w	r4, [r3, #-4]
 800c7aa:	2401      	movs	r4, #1
 800c7ac:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800c7b0:	0c36      	lsrs	r6, r6, #16
 800c7b2:	45a0      	cmp	r8, r4
 800c7b4:	4681      	mov	r9, r0
 800c7b6:	f001 0001 	and.w	r0, r1, #1
 800c7ba:	dd38      	ble.n	800c82e <__multadd+0xae>
 800c7bc:	b198      	cbz	r0, 800c7e6 <__multadd+0x66>
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2402      	movs	r4, #2
 800c7c2:	b299      	uxth	r1, r3
 800c7c4:	0c18      	lsrs	r0, r3, #16
 800c7c6:	fb02 6601 	mla	r6, r2, r1, r6
 800c7ca:	fb02 f000 	mul.w	r0, r2, r0
 800c7ce:	b2b1      	uxth	r1, r6
 800c7d0:	eb00 4016 	add.w	r0, r0, r6, lsr #16
 800c7d4:	eb01 4600 	add.w	r6, r1, r0, lsl #16
 800c7d8:	f107 031c 	add.w	r3, r7, #28
 800c7dc:	f843 6c04 	str.w	r6, [r3, #-4]
 800c7e0:	0c06      	lsrs	r6, r0, #16
 800c7e2:	45a0      	cmp	r8, r4
 800c7e4:	dd23      	ble.n	800c82e <__multadd+0xae>
 800c7e6:	6818      	ldr	r0, [r3, #0]
 800c7e8:	461d      	mov	r5, r3
 800c7ea:	b281      	uxth	r1, r0
 800c7ec:	0c00      	lsrs	r0, r0, #16
 800c7ee:	fb02 6601 	mla	r6, r2, r1, r6
 800c7f2:	fb02 f100 	mul.w	r1, r2, r0
 800c7f6:	b2b0      	uxth	r0, r6
 800c7f8:	eb01 4116 	add.w	r1, r1, r6, lsr #16
 800c7fc:	eb00 4601 	add.w	r6, r0, r1, lsl #16
 800c800:	f845 6b04 	str.w	r6, [r5], #4
 800c804:	6858      	ldr	r0, [r3, #4]
 800c806:	3402      	adds	r4, #2
 800c808:	b283      	uxth	r3, r0
 800c80a:	0c06      	lsrs	r6, r0, #16
 800c80c:	fb02 f303 	mul.w	r3, r2, r3
 800c810:	fb02 f606 	mul.w	r6, r2, r6
 800c814:	eb03 4111 	add.w	r1, r3, r1, lsr #16
 800c818:	eb06 4011 	add.w	r0, r6, r1, lsr #16
 800c81c:	b28e      	uxth	r6, r1
 800c81e:	eb06 4100 	add.w	r1, r6, r0, lsl #16
 800c822:	462b      	mov	r3, r5
 800c824:	0c06      	lsrs	r6, r0, #16
 800c826:	45a0      	cmp	r8, r4
 800c828:	f843 1b04 	str.w	r1, [r3], #4
 800c82c:	dcdb      	bgt.n	800c7e6 <__multadd+0x66>
 800c82e:	b146      	cbz	r6, 800c842 <__multadd+0xc2>
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	4590      	cmp	r8, r2
 800c834:	da08      	bge.n	800c848 <__multadd+0xc8>
 800c836:	eb07 0288 	add.w	r2, r7, r8, lsl #2
 800c83a:	f108 0001 	add.w	r0, r8, #1
 800c83e:	6156      	str	r6, [r2, #20]
 800c840:	6138      	str	r0, [r7, #16]
 800c842:	4638      	mov	r0, r7
 800c844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c848:	687c      	ldr	r4, [r7, #4]
 800c84a:	4648      	mov	r0, r9
 800c84c:	1c61      	adds	r1, r4, #1
 800c84e:	f7ff ff67 	bl	800c720 <_Balloc>
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f107 010c 	add.w	r1, r7, #12
 800c858:	1c9a      	adds	r2, r3, #2
 800c85a:	4604      	mov	r4, r0
 800c85c:	0092      	lsls	r2, r2, #2
 800c85e:	f100 000c 	add.w	r0, r0, #12
 800c862:	f7ff feaf 	bl	800c5c4 <memcpy>
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800c86c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800c870:	6039      	str	r1, [r7, #0]
 800c872:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800c876:	4627      	mov	r7, r4
 800c878:	e7dd      	b.n	800c836 <__multadd+0xb6>
 800c87a:	bf00      	nop

0800c87c <__s2b>:
 800c87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	f648 6639 	movw	r6, #36409	; 0x8e39
 800c884:	f6c3 06e3 	movt	r6, #14563	; 0x38e3
 800c888:	461f      	mov	r7, r3
 800c88a:	f103 0308 	add.w	r3, r3, #8
 800c88e:	fb86 4503 	smull	r4, r5, r6, r3
 800c892:	17dc      	asrs	r4, r3, #31
 800c894:	ebc4 0665 	rsb	r6, r4, r5, asr #1
 800c898:	2e01      	cmp	r6, #1
 800c89a:	4605      	mov	r5, r0
 800c89c:	4689      	mov	r9, r1
 800c89e:	4690      	mov	r8, r2
 800c8a0:	f340 808a 	ble.w	800c9b8 <__s2b+0x13c>
 800c8a4:	2401      	movs	r4, #1
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	0064      	lsls	r4, r4, #1
 800c8aa:	3101      	adds	r1, #1
 800c8ac:	42a6      	cmp	r6, r4
 800c8ae:	dcfb      	bgt.n	800c8a8 <__s2b+0x2c>
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f7ff ff35 	bl	800c720 <_Balloc>
 800c8b6:	4601      	mov	r1, r0
 800c8b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f1b8 0f09 	cmp.w	r8, #9
 800c8c0:	6148      	str	r0, [r1, #20]
 800c8c2:	610a      	str	r2, [r1, #16]
 800c8c4:	dd73      	ble.n	800c9ae <__s2b+0x132>
 800c8c6:	f109 0609 	add.w	r6, r9, #9
 800c8ca:	7833      	ldrb	r3, [r6, #0]
 800c8cc:	eb09 0408 	add.w	r4, r9, r8
 800c8d0:	ea6f 0a06 	mvn.w	sl, r6
 800c8d4:	220a      	movs	r2, #10
 800c8d6:	eb04 0c0a 	add.w	ip, r4, sl
 800c8da:	3b30      	subs	r3, #48	; 0x30
 800c8dc:	4628      	mov	r0, r5
 800c8de:	eb09 0b02 	add.w	fp, r9, r2
 800c8e2:	f00c 0a01 	and.w	sl, ip, #1
 800c8e6:	f7ff ff4b 	bl	800c780 <__multadd>
 800c8ea:	45a3      	cmp	fp, r4
 800c8ec:	4601      	mov	r1, r0
 800c8ee:	d023      	beq.n	800c938 <__s2b+0xbc>
 800c8f0:	f1ba 0f00 	cmp.w	sl, #0
 800c8f4:	d00b      	beq.n	800c90e <__s2b+0x92>
 800c8f6:	f89b 3000 	ldrb.w	r3, [fp]
 800c8fa:	220a      	movs	r2, #10
 800c8fc:	3b30      	subs	r3, #48	; 0x30
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7ff ff3e 	bl	800c780 <__multadd>
 800c904:	f109 0b0b 	add.w	fp, r9, #11
 800c908:	45a3      	cmp	fp, r4
 800c90a:	4601      	mov	r1, r0
 800c90c:	d014      	beq.n	800c938 <__s2b+0xbc>
 800c90e:	46d9      	mov	r9, fp
 800c910:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c914:	220a      	movs	r2, #10
 800c916:	3b30      	subs	r3, #48	; 0x30
 800c918:	4628      	mov	r0, r5
 800c91a:	f7ff ff31 	bl	800c780 <__multadd>
 800c91e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c922:	4601      	mov	r1, r0
 800c924:	220a      	movs	r2, #10
 800c926:	3b30      	subs	r3, #48	; 0x30
 800c928:	4628      	mov	r0, r5
 800c92a:	f7ff ff29 	bl	800c780 <__multadd>
 800c92e:	f109 0b01 	add.w	fp, r9, #1
 800c932:	45a3      	cmp	fp, r4
 800c934:	4601      	mov	r1, r0
 800c936:	d1ea      	bne.n	800c90e <__s2b+0x92>
 800c938:	eb06 0308 	add.w	r3, r6, r8
 800c93c:	f1a3 0908 	sub.w	r9, r3, #8
 800c940:	4547      	cmp	r7, r8
 800c942:	dd31      	ble.n	800c9a8 <__s2b+0x12c>
 800c944:	464c      	mov	r4, r9
 800c946:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c94a:	220a      	movs	r2, #10
 800c94c:	3b30      	subs	r3, #48	; 0x30
 800c94e:	4628      	mov	r0, r5
 800c950:	f7ff ff16 	bl	800c780 <__multadd>
 800c954:	ebc8 0707 	rsb	r7, r8, r7
 800c958:	444f      	add	r7, r9
 800c95a:	ea6f 0609 	mvn.w	r6, r9
 800c95e:	eb07 0906 	add.w	r9, r7, r6
 800c962:	42bc      	cmp	r4, r7
 800c964:	f009 0601 	and.w	r6, r9, #1
 800c968:	4601      	mov	r1, r0
 800c96a:	d01d      	beq.n	800c9a8 <__s2b+0x12c>
 800c96c:	b14e      	cbz	r6, 800c982 <__s2b+0x106>
 800c96e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c972:	220a      	movs	r2, #10
 800c974:	3b30      	subs	r3, #48	; 0x30
 800c976:	4628      	mov	r0, r5
 800c978:	f7ff ff02 	bl	800c780 <__multadd>
 800c97c:	42bc      	cmp	r4, r7
 800c97e:	4601      	mov	r1, r0
 800c980:	d012      	beq.n	800c9a8 <__s2b+0x12c>
 800c982:	4626      	mov	r6, r4
 800c984:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c988:	220a      	movs	r2, #10
 800c98a:	3b30      	subs	r3, #48	; 0x30
 800c98c:	4628      	mov	r0, r5
 800c98e:	f7ff fef7 	bl	800c780 <__multadd>
 800c992:	7863      	ldrb	r3, [r4, #1]
 800c994:	4601      	mov	r1, r0
 800c996:	220a      	movs	r2, #10
 800c998:	3b30      	subs	r3, #48	; 0x30
 800c99a:	4628      	mov	r0, r5
 800c99c:	f7ff fef0 	bl	800c780 <__multadd>
 800c9a0:	1c74      	adds	r4, r6, #1
 800c9a2:	42bc      	cmp	r4, r7
 800c9a4:	4601      	mov	r1, r0
 800c9a6:	d1ec      	bne.n	800c982 <__s2b+0x106>
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	f109 090a 	add.w	r9, r9, #10
 800c9b2:	f04f 0809 	mov.w	r8, #9
 800c9b6:	e7c3      	b.n	800c940 <__s2b+0xc4>
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	e779      	b.n	800c8b0 <__s2b+0x34>

0800c9bc <__hi0bits>:
 800c9bc:	0c02      	lsrs	r2, r0, #16
 800c9be:	4603      	mov	r3, r0
 800c9c0:	d116      	bne.n	800c9f0 <__hi0bits+0x34>
 800c9c2:	0403      	lsls	r3, r0, #16
 800c9c4:	2010      	movs	r0, #16
 800c9c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c9ca:	d101      	bne.n	800c9d0 <__hi0bits+0x14>
 800c9cc:	3008      	adds	r0, #8
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c9d4:	d101      	bne.n	800c9da <__hi0bits+0x1e>
 800c9d6:	3004      	adds	r0, #4
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c9de:	d101      	bne.n	800c9e4 <__hi0bits+0x28>
 800c9e0:	3002      	adds	r0, #2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	db02      	blt.n	800c9ee <__hi0bits+0x32>
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	d403      	bmi.n	800c9f4 <__hi0bits+0x38>
 800c9ec:	2020      	movs	r0, #32
 800c9ee:	4770      	bx	lr
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	e7e8      	b.n	800c9c6 <__hi0bits+0xa>
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	4770      	bx	lr

0800c9f8 <__lo0bits>:
 800c9f8:	6803      	ldr	r3, [r0, #0]
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	f013 0007 	ands.w	r0, r3, #7
 800ca00:	d007      	beq.n	800ca12 <__lo0bits+0x1a>
 800ca02:	07d9      	lsls	r1, r3, #31
 800ca04:	d41f      	bmi.n	800ca46 <__lo0bits+0x4e>
 800ca06:	0798      	lsls	r0, r3, #30
 800ca08:	d41f      	bmi.n	800ca4a <__lo0bits+0x52>
 800ca0a:	0898      	lsrs	r0, r3, #2
 800ca0c:	6010      	str	r0, [r2, #0]
 800ca0e:	2002      	movs	r0, #2
 800ca10:	4770      	bx	lr
 800ca12:	b299      	uxth	r1, r3
 800ca14:	b909      	cbnz	r1, 800ca1a <__lo0bits+0x22>
 800ca16:	0c1b      	lsrs	r3, r3, #16
 800ca18:	2010      	movs	r0, #16
 800ca1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca1e:	d101      	bne.n	800ca24 <__lo0bits+0x2c>
 800ca20:	3008      	adds	r0, #8
 800ca22:	0a1b      	lsrs	r3, r3, #8
 800ca24:	0719      	lsls	r1, r3, #28
 800ca26:	d101      	bne.n	800ca2c <__lo0bits+0x34>
 800ca28:	3004      	adds	r0, #4
 800ca2a:	091b      	lsrs	r3, r3, #4
 800ca2c:	0799      	lsls	r1, r3, #30
 800ca2e:	d101      	bne.n	800ca34 <__lo0bits+0x3c>
 800ca30:	3002      	adds	r0, #2
 800ca32:	089b      	lsrs	r3, r3, #2
 800ca34:	07d9      	lsls	r1, r3, #31
 800ca36:	d404      	bmi.n	800ca42 <__lo0bits+0x4a>
 800ca38:	085b      	lsrs	r3, r3, #1
 800ca3a:	d101      	bne.n	800ca40 <__lo0bits+0x48>
 800ca3c:	2020      	movs	r0, #32
 800ca3e:	4770      	bx	lr
 800ca40:	3001      	adds	r0, #1
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	4770      	bx	lr
 800ca46:	2000      	movs	r0, #0
 800ca48:	4770      	bx	lr
 800ca4a:	0859      	lsrs	r1, r3, #1
 800ca4c:	6011      	str	r1, [r2, #0]
 800ca4e:	2001      	movs	r0, #1
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop

0800ca54 <__i2b>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	460c      	mov	r4, r1
 800ca58:	2101      	movs	r1, #1
 800ca5a:	f7ff fe61 	bl	800c720 <_Balloc>
 800ca5e:	2201      	movs	r2, #1
 800ca60:	6144      	str	r4, [r0, #20]
 800ca62:	6102      	str	r2, [r0, #16]
 800ca64:	bd10      	pop	{r4, pc}
 800ca66:	bf00      	nop

0800ca68 <__multiply>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	690c      	ldr	r4, [r1, #16]
 800ca6e:	6917      	ldr	r7, [r2, #16]
 800ca70:	b085      	sub	sp, #20
 800ca72:	42bc      	cmp	r4, r7
 800ca74:	460e      	mov	r6, r1
 800ca76:	4690      	mov	r8, r2
 800ca78:	da04      	bge.n	800ca84 <__multiply+0x1c>
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	4646      	mov	r6, r8
 800ca7e:	463c      	mov	r4, r7
 800ca80:	4688      	mov	r8, r1
 800ca82:	4617      	mov	r7, r2
 800ca84:	68b3      	ldr	r3, [r6, #8]
 800ca86:	19e2      	adds	r2, r4, r7
 800ca88:	6871      	ldr	r1, [r6, #4]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	bfc8      	it	gt
 800ca8e:	3101      	addgt	r1, #1
 800ca90:	9201      	str	r2, [sp, #4]
 800ca92:	f7ff fe45 	bl	800c720 <_Balloc>
 800ca96:	9901      	ldr	r1, [sp, #4]
 800ca98:	9003      	str	r0, [sp, #12]
 800ca9a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ca9e:	3314      	adds	r3, #20
 800caa0:	3014      	adds	r0, #20
 800caa2:	4298      	cmp	r0, r3
 800caa4:	9302      	str	r3, [sp, #8]
 800caa6:	d21a      	bcs.n	800cade <__multiply+0x76>
 800caa8:	9902      	ldr	r1, [sp, #8]
 800caaa:	43c2      	mvns	r2, r0
 800caac:	9b03      	ldr	r3, [sp, #12]
 800caae:	188a      	adds	r2, r1, r2
 800cab0:	9902      	ldr	r1, [sp, #8]
 800cab2:	3318      	adds	r3, #24
 800cab4:	2500      	movs	r5, #0
 800cab6:	4299      	cmp	r1, r3
 800cab8:	6005      	str	r5, [r0, #0]
 800caba:	f3c2 0080 	ubfx	r0, r2, #2, #1
 800cabe:	d90e      	bls.n	800cade <__multiply+0x76>
 800cac0:	b128      	cbz	r0, 800cace <__multiply+0x66>
 800cac2:	601d      	str	r5, [r3, #0]
 800cac4:	9b03      	ldr	r3, [sp, #12]
 800cac6:	9a02      	ldr	r2, [sp, #8]
 800cac8:	331c      	adds	r3, #28
 800caca:	429a      	cmp	r2, r3
 800cacc:	d907      	bls.n	800cade <__multiply+0x76>
 800cace:	9802      	ldr	r0, [sp, #8]
 800cad0:	4619      	mov	r1, r3
 800cad2:	f841 5b04 	str.w	r5, [r1], #4
 800cad6:	605d      	str	r5, [r3, #4]
 800cad8:	1d0b      	adds	r3, r1, #4
 800cada:	4298      	cmp	r0, r3
 800cadc:	d8f8      	bhi.n	800cad0 <__multiply+0x68>
 800cade:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 800cae2:	3314      	adds	r3, #20
 800cae4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800cae8:	f108 0714 	add.w	r7, r8, #20
 800caec:	3414      	adds	r4, #20
 800caee:	429f      	cmp	r7, r3
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	f106 0c14 	add.w	ip, r6, #20
 800caf6:	f080 80f9 	bcs.w	800ccec <__multiply+0x284>
 800cafa:	9803      	ldr	r0, [sp, #12]
 800cafc:	3018      	adds	r0, #24
 800cafe:	f857 3b04 	ldr.w	r3, [r7], #4
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	d06e      	beq.n	800cbe6 <__multiply+0x17e>
 800cb08:	4661      	mov	r1, ip
 800cb0a:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb0e:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800cb12:	fa1f f886 	uxth.w	r8, r6
 800cb16:	b2ab      	uxth	r3, r5
 800cb18:	0c36      	lsrs	r6, r6, #16
 800cb1a:	0c2d      	lsrs	r5, r5, #16
 800cb1c:	fb02 3308 	mla	r3, r2, r8, r3
 800cb20:	fb02 5606 	mla	r6, r2, r6, r5
 800cb24:	ea6f 050c 	mvn.w	r5, ip
 800cb28:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800cb32:	1965      	adds	r5, r4, r5
 800cb34:	0c36      	lsrs	r6, r6, #16
 800cb36:	428c      	cmp	r4, r1
 800cb38:	f840 3c04 	str.w	r3, [r0, #-4]
 800cb3c:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800cb40:	4603      	mov	r3, r0
 800cb42:	d94d      	bls.n	800cbe0 <__multiply+0x178>
 800cb44:	b1cd      	cbz	r5, 800cb7a <__multiply+0x112>
 800cb46:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800cb4a:	6803      	ldr	r3, [r0, #0]
 800cb4c:	fa1f f985 	uxth.w	r9, r5
 800cb50:	fa1f f883 	uxth.w	r8, r3
 800cb54:	0c2d      	lsrs	r5, r5, #16
 800cb56:	0c1b      	lsrs	r3, r3, #16
 800cb58:	fb02 8809 	mla	r8, r2, r9, r8
 800cb5c:	fb02 3505 	mla	r5, r2, r5, r3
 800cb60:	4446      	add	r6, r8
 800cb62:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 800cb66:	b2b6      	uxth	r6, r6
 800cb68:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	3104      	adds	r1, #4
 800cb70:	f843 6b04 	str.w	r6, [r3], #4
 800cb74:	0c2e      	lsrs	r6, r5, #16
 800cb76:	428c      	cmp	r4, r1
 800cb78:	d932      	bls.n	800cbe0 <__multiply+0x178>
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	f8d3 e000 	ldr.w	lr, [r3]
 800cb80:	f855 9b04 	ldr.w	r9, [r5], #4
 800cb84:	fa1f fa8e 	uxth.w	sl, lr
 800cb88:	fa1f fb89 	uxth.w	fp, r9
 800cb8c:	fb02 aa0b 	mla	sl, r2, fp, sl
 800cb90:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800cb94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800cb98:	fb02 8e09 	mla	lr, r2, r9, r8
 800cb9c:	4456      	add	r6, sl
 800cb9e:	eb0e 4916 	add.w	r9, lr, r6, lsr #16
 800cba2:	b2b6      	uxth	r6, r6
 800cba4:	4698      	mov	r8, r3
 800cba6:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800cbaa:	f848 6b04 	str.w	r6, [r8], #4
 800cbae:	684e      	ldr	r6, [r1, #4]
 800cbb0:	6859      	ldr	r1, [r3, #4]
 800cbb2:	fa1f fa86 	uxth.w	sl, r6
 800cbb6:	b28b      	uxth	r3, r1
 800cbb8:	0c36      	lsrs	r6, r6, #16
 800cbba:	0c09      	lsrs	r1, r1, #16
 800cbbc:	fb02 330a 	mla	r3, r2, sl, r3
 800cbc0:	fb02 1606 	mla	r6, r2, r6, r1
 800cbc4:	eb03 4319 	add.w	r3, r3, r9, lsr #16
 800cbc8:	eb06 4613 	add.w	r6, r6, r3, lsr #16
 800cbcc:	b299      	uxth	r1, r3
 800cbce:	4643      	mov	r3, r8
 800cbd0:	ea41 4806 	orr.w	r8, r1, r6, lsl #16
 800cbd4:	1d29      	adds	r1, r5, #4
 800cbd6:	0c36      	lsrs	r6, r6, #16
 800cbd8:	428c      	cmp	r4, r1
 800cbda:	f843 8b04 	str.w	r8, [r3], #4
 800cbde:	d8cc      	bhi.n	800cb7a <__multiply+0x112>
 800cbe0:	601e      	str	r6, [r3, #0]
 800cbe2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800cbe6:	0c1a      	lsrs	r2, r3, #16
 800cbe8:	d07b      	beq.n	800cce2 <__multiply+0x27a>
 800cbea:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800cbee:	f8bc 5000 	ldrh.w	r5, [ip]
 800cbf2:	0c31      	lsrs	r1, r6, #16
 800cbf4:	fb02 1505 	mla	r5, r2, r5, r1
 800cbf8:	b2b3      	uxth	r3, r6
 800cbfa:	ea43 4605 	orr.w	r6, r3, r5, lsl #16
 800cbfe:	f840 6c04 	str.w	r6, [r0, #-4]
 800cc02:	46e2      	mov	sl, ip
 800cc04:	4603      	mov	r3, r0
 800cc06:	f85a 1b04 	ldr.w	r1, [sl], #4
 800cc0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc0e:	0c09      	lsrs	r1, r1, #16
 800cc10:	fa1f f986 	uxth.w	r9, r6
 800cc14:	fb02 9101 	mla	r1, r2, r1, r9
 800cc18:	ea6f 0e0c 	mvn.w	lr, ip
 800cc1c:	eb04 080e 	add.w	r8, r4, lr
 800cc20:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800cc24:	4554      	cmp	r4, sl
 800cc26:	f3c8 0980 	ubfx	r9, r8, #2, #1
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800cc30:	d956      	bls.n	800cce0 <__multiply+0x278>
 800cc32:	f1b9 0f00 	cmp.w	r9, #0
 800cc36:	d01b      	beq.n	800cc70 <__multiply+0x208>
 800cc38:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 800cc3c:	0c36      	lsrs	r6, r6, #16
 800cc3e:	fb02 6505 	mla	r5, r2, r5, r6
 800cc42:	b289      	uxth	r1, r1
 800cc44:	eb05 0e08 	add.w	lr, r5, r8
 800cc48:	ea41 460e 	orr.w	r6, r1, lr, lsl #16
 800cc4c:	f843 6c04 	str.w	r6, [r3, #-4]
 800cc50:	f85a 1b04 	ldr.w	r1, [sl], #4
 800cc54:	461d      	mov	r5, r3
 800cc56:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc5a:	0c09      	lsrs	r1, r1, #16
 800cc5c:	fa1f f986 	uxth.w	r9, r6
 800cc60:	fb02 9101 	mla	r1, r2, r1, r9
 800cc64:	4554      	cmp	r4, sl
 800cc66:	eb01 411e 	add.w	r1, r1, lr, lsr #16
 800cc6a:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800cc6e:	d937      	bls.n	800cce0 <__multiply+0x278>
 800cc70:	f8ba b000 	ldrh.w	fp, [sl]
 800cc74:	0c35      	lsrs	r5, r6, #16
 800cc76:	fb02 560b 	mla	r6, r2, fp, r5
 800cc7a:	b289      	uxth	r1, r1
 800cc7c:	eb06 0b08 	add.w	fp, r6, r8
 800cc80:	ea41 450b 	orr.w	r5, r1, fp, lsl #16
 800cc84:	f843 5c04 	str.w	r5, [r3, #-4]
 800cc88:	4656      	mov	r6, sl
 800cc8a:	461d      	mov	r5, r3
 800cc8c:	f856 9b04 	ldr.w	r9, [r6], #4
 800cc90:	f855 1b04 	ldr.w	r1, [r5], #4
 800cc94:	f8da 8004 	ldr.w	r8, [sl, #4]
 800cc98:	ea4f 4e19 	mov.w	lr, r9, lsr #16
 800cc9c:	fa1f fa81 	uxth.w	sl, r1
 800cca0:	fb02 a90e 	mla	r9, r2, lr, sl
 800cca4:	0c09      	lsrs	r1, r1, #16
 800cca6:	fa1f f888 	uxth.w	r8, r8
 800ccaa:	fb02 1e08 	mla	lr, r2, r8, r1
 800ccae:	eb09 4a1b 	add.w	sl, r9, fp, lsr #16
 800ccb2:	eb0e 481a 	add.w	r8, lr, sl, lsr #16
 800ccb6:	fa1f f98a 	uxth.w	r9, sl
 800ccba:	ea49 4108 	orr.w	r1, r9, r8, lsl #16
 800ccbe:	46b2      	mov	sl, r6
 800ccc0:	f845 1c04 	str.w	r1, [r5, #-4]
 800ccc4:	f85a 1b04 	ldr.w	r1, [sl], #4
 800ccc8:	685e      	ldr	r6, [r3, #4]
 800ccca:	0c09      	lsrs	r1, r1, #16
 800cccc:	b2b3      	uxth	r3, r6
 800ccce:	fb02 3301 	mla	r3, r2, r1, r3
 800ccd2:	eb03 4118 	add.w	r1, r3, r8, lsr #16
 800ccd6:	1d2b      	adds	r3, r5, #4
 800ccd8:	4554      	cmp	r4, sl
 800ccda:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800ccde:	d8c7      	bhi.n	800cc70 <__multiply+0x208>
 800cce0:	6029      	str	r1, [r5, #0]
 800cce2:	9a00      	ldr	r2, [sp, #0]
 800cce4:	3004      	adds	r0, #4
 800cce6:	42ba      	cmp	r2, r7
 800cce8:	f63f af09 	bhi.w	800cafe <__multiply+0x96>
 800ccec:	9901      	ldr	r1, [sp, #4]
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	dd1a      	ble.n	800cd28 <__multiply+0x2c0>
 800ccf2:	9b02      	ldr	r3, [sp, #8]
 800ccf4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ccf8:	3b04      	subs	r3, #4
 800ccfa:	b9a8      	cbnz	r0, 800cd28 <__multiply+0x2c0>
 800ccfc:	9901      	ldr	r1, [sp, #4]
 800ccfe:	1e4a      	subs	r2, r1, #1
 800cd00:	07d0      	lsls	r0, r2, #31
 800cd02:	d517      	bpl.n	800cd34 <__multiply+0x2cc>
 800cd04:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800cd08:	9201      	str	r2, [sp, #4]
 800cd0a:	b968      	cbnz	r0, 800cd28 <__multiply+0x2c0>
 800cd0c:	9a01      	ldr	r2, [sp, #4]
 800cd0e:	e008      	b.n	800cd22 <__multiply+0x2ba>
 800cd10:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800cd14:	3b04      	subs	r3, #4
 800cd16:	b931      	cbnz	r1, 800cd26 <__multiply+0x2be>
 800cd18:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd1c:	3a01      	subs	r2, #1
 800cd1e:	3b04      	subs	r3, #4
 800cd20:	b908      	cbnz	r0, 800cd26 <__multiply+0x2be>
 800cd22:	3a01      	subs	r2, #1
 800cd24:	d1f4      	bne.n	800cd10 <__multiply+0x2a8>
 800cd26:	9201      	str	r2, [sp, #4]
 800cd28:	9901      	ldr	r1, [sp, #4]
 800cd2a:	9803      	ldr	r0, [sp, #12]
 800cd2c:	6101      	str	r1, [r0, #16]
 800cd2e:	b005      	add	sp, #20
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	460a      	mov	r2, r1
 800cd36:	e7f4      	b.n	800cd22 <__multiply+0x2ba>

0800cd38 <__pow5mult>:
 800cd38:	f012 0303 	ands.w	r3, r2, #3
 800cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	4614      	mov	r4, r2
 800cd42:	4680      	mov	r8, r0
 800cd44:	460f      	mov	r7, r1
 800cd46:	d12b      	bne.n	800cda0 <__pow5mult+0x68>
 800cd48:	10a4      	asrs	r4, r4, #2
 800cd4a:	d01b      	beq.n	800cd84 <__pow5mult+0x4c>
 800cd4c:	f8d8 6048 	ldr.w	r6, [r8, #72]	; 0x48
 800cd50:	b92e      	cbnz	r6, 800cd5e <__pow5mult+0x26>
 800cd52:	e02e      	b.n	800cdb2 <__pow5mult+0x7a>
 800cd54:	1064      	asrs	r4, r4, #1
 800cd56:	d015      	beq.n	800cd84 <__pow5mult+0x4c>
 800cd58:	6835      	ldr	r5, [r6, #0]
 800cd5a:	b1b5      	cbz	r5, 800cd8a <__pow5mult+0x52>
 800cd5c:	462e      	mov	r6, r5
 800cd5e:	07e3      	lsls	r3, r4, #31
 800cd60:	d5f8      	bpl.n	800cd54 <__pow5mult+0x1c>
 800cd62:	4639      	mov	r1, r7
 800cd64:	4632      	mov	r2, r6
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff fe7e 	bl	800ca68 <__multiply>
 800cd6c:	b1b7      	cbz	r7, 800cd9c <__pow5mult+0x64>
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800cd74:	1064      	asrs	r4, r4, #1
 800cd76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd7a:	6039      	str	r1, [r7, #0]
 800cd7c:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800cd80:	4607      	mov	r7, r0
 800cd82:	d1e9      	bne.n	800cd58 <__pow5mult+0x20>
 800cd84:	4638      	mov	r0, r7
 800cd86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f7ff fe6a 	bl	800ca68 <__multiply>
 800cd94:	6030      	str	r0, [r6, #0]
 800cd96:	6005      	str	r5, [r0, #0]
 800cd98:	4606      	mov	r6, r0
 800cd9a:	e7e0      	b.n	800cd5e <__pow5mult+0x26>
 800cd9c:	4607      	mov	r7, r0
 800cd9e:	e7d9      	b.n	800cd54 <__pow5mult+0x1c>
 800cda0:	4a09      	ldr	r2, [pc, #36]	; (800cdc8 <__pow5mult+0x90>)
 800cda2:	1e5f      	subs	r7, r3, #1
 800cda4:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f7ff fce9 	bl	800c780 <__multadd>
 800cdae:	4607      	mov	r7, r0
 800cdb0:	e7ca      	b.n	800cd48 <__pow5mult+0x10>
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	f240 2171 	movw	r1, #625	; 0x271
 800cdb8:	f7ff fe4c 	bl	800ca54 <__i2b>
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	6030      	str	r0, [r6, #0]
 800cdc6:	e7ca      	b.n	800cd5e <__pow5mult+0x26>
 800cdc8:	0800e020 	.word	0x0800e020

0800cdcc <__lshift>:
 800cdcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd0:	690b      	ldr	r3, [r1, #16]
 800cdd2:	ea4f 1862 	mov.w	r8, r2, asr #5
 800cdd6:	4693      	mov	fp, r2
 800cdd8:	eb08 0a03 	add.w	sl, r8, r3
 800cddc:	688a      	ldr	r2, [r1, #8]
 800cdde:	f10a 0601 	add.w	r6, sl, #1
 800cde2:	4296      	cmp	r6, r2
 800cde4:	460f      	mov	r7, r1
 800cde6:	4681      	mov	r9, r0
 800cde8:	6849      	ldr	r1, [r1, #4]
 800cdea:	dd03      	ble.n	800cdf4 <__lshift+0x28>
 800cdec:	0052      	lsls	r2, r2, #1
 800cdee:	3101      	adds	r1, #1
 800cdf0:	4296      	cmp	r6, r2
 800cdf2:	dcfb      	bgt.n	800cdec <__lshift+0x20>
 800cdf4:	4648      	mov	r0, r9
 800cdf6:	f7ff fc93 	bl	800c720 <_Balloc>
 800cdfa:	f1b8 0f00 	cmp.w	r8, #0
 800cdfe:	f100 0414 	add.w	r4, r0, #20
 800ce02:	dd1d      	ble.n	800ce40 <__lshift+0x74>
 800ce04:	2301      	movs	r3, #1
 800ce06:	2200      	movs	r2, #0
 800ce08:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800ce0c:	4543      	cmp	r3, r8
 800ce0e:	6022      	str	r2, [r4, #0]
 800ce10:	ea01 0103 	and.w	r1, r1, r3
 800ce14:	f100 0518 	add.w	r5, r0, #24
 800ce18:	d00e      	beq.n	800ce38 <__lshift+0x6c>
 800ce1a:	b129      	cbz	r1, 800ce28 <__lshift+0x5c>
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	4543      	cmp	r3, r8
 800ce20:	602a      	str	r2, [r5, #0]
 800ce22:	f100 051c 	add.w	r5, r0, #28
 800ce26:	d007      	beq.n	800ce38 <__lshift+0x6c>
 800ce28:	462c      	mov	r4, r5
 800ce2a:	f844 2b04 	str.w	r2, [r4], #4
 800ce2e:	3302      	adds	r3, #2
 800ce30:	606a      	str	r2, [r5, #4]
 800ce32:	1d25      	adds	r5, r4, #4
 800ce34:	4543      	cmp	r3, r8
 800ce36:	d1f7      	bne.n	800ce28 <__lshift+0x5c>
 800ce38:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800ce3c:	f102 0414 	add.w	r4, r2, #20
 800ce40:	6939      	ldr	r1, [r7, #16]
 800ce42:	f107 0514 	add.w	r5, r7, #20
 800ce46:	eb07 0281 	add.w	r2, r7, r1, lsl #2
 800ce4a:	3214      	adds	r2, #20
 800ce4c:	f01b 0b1f 	ands.w	fp, fp, #31
 800ce50:	d051      	beq.n	800cef6 <__lshift+0x12a>
 800ce52:	6829      	ldr	r1, [r5, #0]
 800ce54:	4623      	mov	r3, r4
 800ce56:	fa01 f10b 	lsl.w	r1, r1, fp
 800ce5a:	f107 0418 	add.w	r4, r7, #24
 800ce5e:	f843 1b04 	str.w	r1, [r3], #4
 800ce62:	43ed      	mvns	r5, r5
 800ce64:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ce68:	f1cb 0e20 	rsb	lr, fp, #32
 800ce6c:	1955      	adds	r5, r2, r5
 800ce6e:	42a2      	cmp	r2, r4
 800ce70:	f3c5 0580 	ubfx	r5, r5, #2, #1
 800ce74:	fa21 f80e 	lsr.w	r8, r1, lr
 800ce78:	d92a      	bls.n	800ced0 <__lshift+0x104>
 800ce7a:	b175      	cbz	r5, 800ce9a <__lshift+0xce>
 800ce7c:	6821      	ldr	r1, [r4, #0]
 800ce7e:	f107 041c 	add.w	r4, r7, #28
 800ce82:	fa01 f10b 	lsl.w	r1, r1, fp
 800ce86:	ea48 0101 	orr.w	r1, r8, r1
 800ce8a:	f843 1b04 	str.w	r1, [r3], #4
 800ce8e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ce92:	42a2      	cmp	r2, r4
 800ce94:	fa21 f80e 	lsr.w	r8, r1, lr
 800ce98:	d91a      	bls.n	800ced0 <__lshift+0x104>
 800ce9a:	6821      	ldr	r1, [r4, #0]
 800ce9c:	461d      	mov	r5, r3
 800ce9e:	fa01 f10b 	lsl.w	r1, r1, fp
 800cea2:	ea48 0101 	orr.w	r1, r8, r1
 800cea6:	f845 1b04 	str.w	r1, [r5], #4
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f851 8b04 	ldr.w	r8, [r1], #4
 800ceb0:	6864      	ldr	r4, [r4, #4]
 800ceb2:	fa28 fc0e 	lsr.w	ip, r8, lr
 800ceb6:	fa04 f40b 	lsl.w	r4, r4, fp
 800ceba:	ea4c 0404 	orr.w	r4, ip, r4
 800cebe:	605c      	str	r4, [r3, #4]
 800cec0:	460c      	mov	r4, r1
 800cec2:	f854 1b04 	ldr.w	r1, [r4], #4
 800cec6:	1d2b      	adds	r3, r5, #4
 800cec8:	42a2      	cmp	r2, r4
 800ceca:	fa21 f80e 	lsr.w	r8, r1, lr
 800cece:	d8e4      	bhi.n	800ce9a <__lshift+0xce>
 800ced0:	f8c3 8000 	str.w	r8, [r3]
 800ced4:	f1b8 0f00 	cmp.w	r8, #0
 800ced8:	d001      	beq.n	800cede <__lshift+0x112>
 800ceda:	f10a 0602 	add.w	r6, sl, #2
 800cede:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	3e01      	subs	r6, #1
 800cee6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceea:	6106      	str	r6, [r0, #16]
 800ceec:	6039      	str	r1, [r7, #0]
 800ceee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800cef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef6:	43eb      	mvns	r3, r5
 800cef8:	f107 0118 	add.w	r1, r7, #24
 800cefc:	682d      	ldr	r5, [r5, #0]
 800cefe:	18d3      	adds	r3, r2, r3
 800cf00:	428a      	cmp	r2, r1
 800cf02:	f844 5b04 	str.w	r5, [r4], #4
 800cf06:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cf0a:	d9e8      	bls.n	800cede <__lshift+0x112>
 800cf0c:	b133      	cbz	r3, 800cf1c <__lshift+0x150>
 800cf0e:	680b      	ldr	r3, [r1, #0]
 800cf10:	f107 011c 	add.w	r1, r7, #28
 800cf14:	428a      	cmp	r2, r1
 800cf16:	f844 3b04 	str.w	r3, [r4], #4
 800cf1a:	d9e0      	bls.n	800cede <__lshift+0x112>
 800cf1c:	468c      	mov	ip, r1
 800cf1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf22:	4625      	mov	r5, r4
 800cf24:	f845 3b04 	str.w	r3, [r5], #4
 800cf28:	684b      	ldr	r3, [r1, #4]
 800cf2a:	f10c 0104 	add.w	r1, ip, #4
 800cf2e:	6063      	str	r3, [r4, #4]
 800cf30:	1d2c      	adds	r4, r5, #4
 800cf32:	428a      	cmp	r2, r1
 800cf34:	d8f2      	bhi.n	800cf1c <__lshift+0x150>
 800cf36:	e7d2      	b.n	800cede <__lshift+0x112>

0800cf38 <__mcmp>:
 800cf38:	b4f0      	push	{r4, r5, r6, r7}
 800cf3a:	690b      	ldr	r3, [r1, #16]
 800cf3c:	4605      	mov	r5, r0
 800cf3e:	6900      	ldr	r0, [r0, #16]
 800cf40:	1ac0      	subs	r0, r0, r3
 800cf42:	d124      	bne.n	800cf8e <__mcmp+0x56>
 800cf44:	1d1a      	adds	r2, r3, #4
 800cf46:	0094      	lsls	r4, r2, #2
 800cf48:	192b      	adds	r3, r5, r4
 800cf4a:	1d1e      	adds	r6, r3, #4
 800cf4c:	1909      	adds	r1, r1, r4
 800cf4e:	3514      	adds	r5, #20
 800cf50:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800cf54:	680a      	ldr	r2, [r1, #0]
 800cf56:	43ef      	mvns	r7, r5
 800cf58:	19be      	adds	r6, r7, r6
 800cf5a:	4294      	cmp	r4, r2
 800cf5c:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800cf60:	d110      	bne.n	800cf84 <__mcmp+0x4c>
 800cf62:	429d      	cmp	r5, r3
 800cf64:	d213      	bcs.n	800cf8e <__mcmp+0x56>
 800cf66:	b13e      	cbz	r6, 800cf78 <__mcmp+0x40>
 800cf68:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800cf6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf70:	4294      	cmp	r4, r2
 800cf72:	d107      	bne.n	800cf84 <__mcmp+0x4c>
 800cf74:	429d      	cmp	r5, r3
 800cf76:	d20a      	bcs.n	800cf8e <__mcmp+0x56>
 800cf78:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800cf7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf80:	4294      	cmp	r4, r2
 800cf82:	d0f1      	beq.n	800cf68 <__mcmp+0x30>
 800cf84:	42a2      	cmp	r2, r4
 800cf86:	bf94      	ite	ls
 800cf88:	2001      	movls	r0, #1
 800cf8a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cf8e:	bcf0      	pop	{r4, r5, r6, r7}
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop

0800cf94 <__mdiff>:
 800cf94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	460f      	mov	r7, r1
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	4691      	mov	r9, r2
 800cfa2:	f7ff ffc9 	bl	800cf38 <__mcmp>
 800cfa6:	1e05      	subs	r5, r0, #0
 800cfa8:	f000 80f7 	beq.w	800d19a <__mdiff+0x206>
 800cfac:	f2c0 80ef 	blt.w	800d18e <__mdiff+0x1fa>
 800cfb0:	f04f 0a00 	mov.w	sl, #0
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	6879      	ldr	r1, [r7, #4]
 800cfb8:	f7ff fbb2 	bl	800c720 <_Balloc>
 800cfbc:	697e      	ldr	r6, [r7, #20]
 800cfbe:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800cfc2:	f8d9 5010 	ldr.w	r5, [r9, #16]
 800cfc6:	fa1f fc86 	uxth.w	ip, r6
 800cfca:	b28c      	uxth	r4, r1
 800cfcc:	0c09      	lsrs	r1, r1, #16
 800cfce:	ebc4 040c 	rsb	r4, r4, ip
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cfd8:	ebc1 4616 	rsb	r6, r1, r6, lsr #16
 800cfdc:	f109 0214 	add.w	r2, r9, #20
 800cfe0:	eb06 4124 	add.w	r1, r6, r4, asr #16
 800cfe4:	f105 0b14 	add.w	fp, r5, #20
 800cfe8:	43d2      	mvns	r2, r2
 800cfea:	b2a4      	uxth	r4, r4
 800cfec:	f109 0618 	add.w	r6, r9, #24
 800cff0:	445a      	add	r2, fp
 800cff2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800cff6:	eb07 0883 	add.w	r8, r7, r3, lsl #2
 800cffa:	f100 0518 	add.w	r5, r0, #24
 800cffe:	1409      	asrs	r1, r1, #16
 800d000:	45b3      	cmp	fp, r6
 800d002:	f8c0 a00c 	str.w	sl, [r0, #12]
 800d006:	6144      	str	r4, [r0, #20]
 800d008:	f3c2 0a80 	ubfx	sl, r2, #2, #1
 800d00c:	f108 0814 	add.w	r8, r8, #20
 800d010:	f107 0c18 	add.w	ip, r7, #24
 800d014:	462a      	mov	r2, r5
 800d016:	d956      	bls.n	800d0c6 <__mdiff+0x132>
 800d018:	f1ba 0f00 	cmp.w	sl, #0
 800d01c:	d01b      	beq.n	800d056 <__mdiff+0xc2>
 800d01e:	f8dc 2000 	ldr.w	r2, [ip]
 800d022:	6836      	ldr	r6, [r6, #0]
 800d024:	b294      	uxth	r4, r2
 800d026:	1861      	adds	r1, r4, r1
 800d028:	fa1f fe86 	uxth.w	lr, r6
 800d02c:	0c36      	lsrs	r6, r6, #16
 800d02e:	ebce 0401 	rsb	r4, lr, r1
 800d032:	ebc6 4212 	rsb	r2, r6, r2, lsr #16
 800d036:	eb02 4124 	add.w	r1, r2, r4, asr #16
 800d03a:	b2a6      	uxth	r6, r4
 800d03c:	ea46 4401 	orr.w	r4, r6, r1, lsl #16
 800d040:	f109 061c 	add.w	r6, r9, #28
 800d044:	602c      	str	r4, [r5, #0]
 800d046:	1409      	asrs	r1, r1, #16
 800d048:	f100 051c 	add.w	r5, r0, #28
 800d04c:	45b3      	cmp	fp, r6
 800d04e:	f107 0c1c 	add.w	ip, r7, #28
 800d052:	462a      	mov	r2, r5
 800d054:	d937      	bls.n	800d0c6 <__mdiff+0x132>
 800d056:	4662      	mov	r2, ip
 800d058:	f852 4b04 	ldr.w	r4, [r2], #4
 800d05c:	4637      	mov	r7, r6
 800d05e:	f857 9b04 	ldr.w	r9, [r7], #4
 800d062:	fa1f fa84 	uxth.w	sl, r4
 800d066:	fa1f fe89 	uxth.w	lr, r9
 800d06a:	4451      	add	r1, sl
 800d06c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800d070:	ebce 0101 	rsb	r1, lr, r1
 800d074:	ebc9 4414 	rsb	r4, r9, r4, lsr #16
 800d078:	eb04 4421 	add.w	r4, r4, r1, asr #16
 800d07c:	fa1f fa81 	uxth.w	sl, r1
 800d080:	ea4a 4e04 	orr.w	lr, sl, r4, lsl #16
 800d084:	4629      	mov	r1, r5
 800d086:	f841 eb04 	str.w	lr, [r1], #4
 800d08a:	f8dc c004 	ldr.w	ip, [ip, #4]
 800d08e:	6876      	ldr	r6, [r6, #4]
 800d090:	fa1f f98c 	uxth.w	r9, ip
 800d094:	eb09 4424 	add.w	r4, r9, r4, asr #16
 800d098:	fa1f fa86 	uxth.w	sl, r6
 800d09c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 800d0a0:	ebca 0404 	rsb	r4, sl, r4
 800d0a4:	ebc6 4e1c 	rsb	lr, r6, ip, lsr #16
 800d0a8:	eb0e 4924 	add.w	r9, lr, r4, asr #16
 800d0ac:	b2a6      	uxth	r6, r4
 800d0ae:	ea46 4409 	orr.w	r4, r6, r9, lsl #16
 800d0b2:	1d3e      	adds	r6, r7, #4
 800d0b4:	606c      	str	r4, [r5, #4]
 800d0b6:	1d0d      	adds	r5, r1, #4
 800d0b8:	45b3      	cmp	fp, r6
 800d0ba:	f102 0c04 	add.w	ip, r2, #4
 800d0be:	ea4f 4129 	mov.w	r1, r9, asr #16
 800d0c2:	462a      	mov	r2, r5
 800d0c4:	d8c7      	bhi.n	800d056 <__mdiff+0xc2>
 800d0c6:	45e0      	cmp	r8, ip
 800d0c8:	d957      	bls.n	800d17a <__mdiff+0x1e6>
 800d0ca:	4662      	mov	r2, ip
 800d0cc:	f852 6b04 	ldr.w	r6, [r2], #4
 800d0d0:	ea6f 0a0c 	mvn.w	sl, ip
 800d0d4:	b2b4      	uxth	r4, r6
 800d0d6:	1861      	adds	r1, r4, r1
 800d0d8:	ea4f 4916 	mov.w	r9, r6, lsr #16
 800d0dc:	eb09 4e21 	add.w	lr, r9, r1, asr #16
 800d0e0:	b28c      	uxth	r4, r1
 800d0e2:	eb08 060a 	add.w	r6, r8, sl
 800d0e6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	4590      	cmp	r8, r2
 800d0ee:	f841 4b04 	str.w	r4, [r1], #4
 800d0f2:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800d0f6:	ea4f 492e 	mov.w	r9, lr, asr #16
 800d0fa:	d936      	bls.n	800d16a <__mdiff+0x1d6>
 800d0fc:	b186      	cbz	r6, 800d120 <__mdiff+0x18c>
 800d0fe:	f852 6b04 	ldr.w	r6, [r2], #4
 800d102:	b2b4      	uxth	r4, r6
 800d104:	44a1      	add	r9, r4
 800d106:	0c36      	lsrs	r6, r6, #16
 800d108:	eb06 4629 	add.w	r6, r6, r9, asr #16
 800d10c:	fa1f f489 	uxth.w	r4, r9
 800d110:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800d114:	4590      	cmp	r8, r2
 800d116:	f841 4b04 	str.w	r4, [r1], #4
 800d11a:	ea4f 4926 	mov.w	r9, r6, asr #16
 800d11e:	d924      	bls.n	800d16a <__mdiff+0x1d6>
 800d120:	4617      	mov	r7, r2
 800d122:	f857 4b04 	ldr.w	r4, [r7], #4
 800d126:	460e      	mov	r6, r1
 800d128:	fa1f fa84 	uxth.w	sl, r4
 800d12c:	eb0a 0e09 	add.w	lr, sl, r9
 800d130:	0c24      	lsrs	r4, r4, #16
 800d132:	eb04 442e 	add.w	r4, r4, lr, asr #16
 800d136:	fa1f f98e 	uxth.w	r9, lr
 800d13a:	ea49 4e04 	orr.w	lr, r9, r4, lsl #16
 800d13e:	f846 eb04 	str.w	lr, [r6], #4
 800d142:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800d146:	1d3a      	adds	r2, r7, #4
 800d148:	fa1f f789 	uxth.w	r7, r9
 800d14c:	eb07 4424 	add.w	r4, r7, r4, asr #16
 800d150:	ea4f 4719 	mov.w	r7, r9, lsr #16
 800d154:	eb07 4724 	add.w	r7, r7, r4, asr #16
 800d158:	b2a4      	uxth	r4, r4
 800d15a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800d15e:	604c      	str	r4, [r1, #4]
 800d160:	1d31      	adds	r1, r6, #4
 800d162:	4590      	cmp	r8, r2
 800d164:	ea4f 4927 	mov.w	r9, r7, asr #16
 800d168:	d8da      	bhi.n	800d120 <__mdiff+0x18c>
 800d16a:	ea6f 020c 	mvn.w	r2, ip
 800d16e:	eb02 0108 	add.w	r1, r2, r8
 800d172:	f021 0203 	bic.w	r2, r1, #3
 800d176:	1d11      	adds	r1, r2, #4
 800d178:	186a      	adds	r2, r5, r1
 800d17a:	3a04      	subs	r2, #4
 800d17c:	b924      	cbnz	r4, 800d188 <__mdiff+0x1f4>
 800d17e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d182:	3b01      	subs	r3, #1
 800d184:	2900      	cmp	r1, #0
 800d186:	d0fa      	beq.n	800d17e <__mdiff+0x1ea>
 800d188:	6103      	str	r3, [r0, #16]
 800d18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18e:	463b      	mov	r3, r7
 800d190:	f04f 0a01 	mov.w	sl, #1
 800d194:	464f      	mov	r7, r9
 800d196:	4699      	mov	r9, r3
 800d198:	e70c      	b.n	800cfb4 <__mdiff+0x20>
 800d19a:	4620      	mov	r0, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	f7ff fabf 	bl	800c720 <_Balloc>
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	6102      	str	r2, [r0, #16]
 800d1a6:	6145      	str	r5, [r0, #20]
 800d1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1ac <__ulp>:
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800d1b2:	400b      	ands	r3, r1
 800d1b4:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	dd02      	ble.n	800d1c2 <__ulp+0x16>
 800d1bc:	4601      	mov	r1, r0
 800d1be:	2000      	movs	r0, #0
 800d1c0:	4770      	bx	lr
 800d1c2:	4241      	negs	r1, r0
 800d1c4:	150b      	asrs	r3, r1, #20
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	2b13      	cmp	r3, #19
 800d1ca:	dd0b      	ble.n	800d1e4 <__ulp+0x38>
 800d1cc:	2b32      	cmp	r3, #50	; 0x32
 800d1ce:	dd02      	ble.n	800d1d6 <__ulp+0x2a>
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	4770      	bx	lr
 800d1d6:	f1c3 0033 	rsb	r0, r3, #51	; 0x33
 800d1da:	2301      	movs	r3, #1
 800d1dc:	fa03 f200 	lsl.w	r2, r3, r0
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	4770      	bx	lr
 800d1e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d1e8:	fa41 f103 	asr.w	r1, r1, r3
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	4770      	bx	lr

0800d1f0 <__b2d>:
 800d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f4:	6906      	ldr	r6, [r0, #16]
 800d1f6:	4688      	mov	r8, r1
 800d1f8:	1d31      	adds	r1, r6, #4
 800d1fa:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800d1fe:	4634      	mov	r4, r6
 800d200:	f854 5b04 	ldr.w	r5, [r4], #4
 800d204:	f100 0714 	add.w	r7, r0, #20
 800d208:	4628      	mov	r0, r5
 800d20a:	f7ff fbd7 	bl	800c9bc <__hi0bits>
 800d20e:	f1c0 0320 	rsb	r3, r0, #32
 800d212:	280a      	cmp	r0, #10
 800d214:	f8c8 3000 	str.w	r3, [r8]
 800d218:	4632      	mov	r2, r6
 800d21a:	dc17      	bgt.n	800d24c <__b2d+0x5c>
 800d21c:	42b7      	cmp	r7, r6
 800d21e:	f1c0 020b 	rsb	r2, r0, #11
 800d222:	bf38      	it	cc
 800d224:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 800d228:	fa25 f302 	lsr.w	r3, r5, r2
 800d22c:	bf34      	ite	cc
 800d22e:	fa24 f202 	lsrcc.w	r2, r4, r2
 800d232:	2200      	movcs	r2, #0
 800d234:	3015      	adds	r0, #21
 800d236:	fa05 f500 	lsl.w	r5, r5, r0
 800d23a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d23e:	f441 1340 	orr.w	r3, r1, #3145728	; 0x300000
 800d242:	ea42 0005 	orr.w	r0, r2, r5
 800d246:	4619      	mov	r1, r3
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24c:	42b7      	cmp	r7, r6
 800d24e:	d31f      	bcc.n	800d290 <__b2d+0xa0>
 800d250:	2400      	movs	r4, #0
 800d252:	f1b0 060b 	subs.w	r6, r0, #11
 800d256:	d021      	beq.n	800d29c <__b2d+0xac>
 800d258:	42ba      	cmp	r2, r7
 800d25a:	fa05 f506 	lsl.w	r5, r5, r6
 800d25e:	f1c0 012b 	rsb	r1, r0, #43	; 0x2b
 800d262:	bf88      	it	hi
 800d264:	f852 2c04 	ldrhi.w	r2, [r2, #-4]
 800d268:	fa24 fc01 	lsr.w	ip, r4, r1
 800d26c:	bf88      	it	hi
 800d26e:	fa22 f101 	lsrhi.w	r1, r2, r1
 800d272:	fa04 f406 	lsl.w	r4, r4, r6
 800d276:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800d27a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d27e:	bf98      	it	ls
 800d280:	2100      	movls	r1, #0
 800d282:	ea45 030c 	orr.w	r3, r5, ip
 800d286:	ea41 0004 	orr.w	r0, r1, r4
 800d28a:	4619      	mov	r1, r3
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	1f32      	subs	r2, r6, #4
 800d292:	f1b0 060b 	subs.w	r6, r0, #11
 800d296:	f854 4c08 	ldr.w	r4, [r4, #-8]
 800d29a:	d1dd      	bne.n	800d258 <__b2d+0x68>
 800d29c:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800d2a0:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2ac <__d2b>:
 800d2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	461d      	mov	r5, r3
 800d2b6:	4614      	mov	r4, r2
 800d2b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d2ba:	f7ff fa31 	bl	800c720 <_Balloc>
 800d2be:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d2c2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800d2c6:	4680      	mov	r8, r0
 800d2c8:	46a9      	mov	r9, r5
 800d2ca:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
 800d2ce:	b10e      	cbz	r6, 800d2d4 <__d2b+0x28>
 800d2d0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800d2d4:	9001      	str	r0, [sp, #4]
 800d2d6:	2c00      	cmp	r4, #0
 800d2d8:	d024      	beq.n	800d324 <__d2b+0x78>
 800d2da:	aa02      	add	r2, sp, #8
 800d2dc:	4668      	mov	r0, sp
 800d2de:	f842 4d08 	str.w	r4, [r2, #-8]!
 800d2e2:	f7ff fb89 	bl	800c9f8 <__lo0bits>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d131      	bne.n	800d350 <__d2b+0xa4>
 800d2ec:	9c00      	ldr	r4, [sp, #0]
 800d2ee:	f8c8 4014 	str.w	r4, [r8, #20]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf0c      	ite	eq
 800d2f6:	2401      	moveq	r4, #1
 800d2f8:	2402      	movne	r4, #2
 800d2fa:	f8c8 3018 	str.w	r3, [r8, #24]
 800d2fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800d302:	b9de      	cbnz	r6, 800d33c <__d2b+0x90>
 800d304:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800d308:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 800d30c:	6900      	ldr	r0, [r0, #16]
 800d30e:	603b      	str	r3, [r7, #0]
 800d310:	f7ff fb54 	bl	800c9bc <__hi0bits>
 800d314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d316:	ebc0 1244 	rsb	r2, r0, r4, lsl #5
 800d31a:	600a      	str	r2, [r1, #0]
 800d31c:	4640      	mov	r0, r8
 800d31e:	b003      	add	sp, #12
 800d320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d324:	a801      	add	r0, sp, #4
 800d326:	f7ff fb67 	bl	800c9f8 <__lo0bits>
 800d32a:	9901      	ldr	r1, [sp, #4]
 800d32c:	2401      	movs	r4, #1
 800d32e:	f8c8 1014 	str.w	r1, [r8, #20]
 800d332:	f8c8 4010 	str.w	r4, [r8, #16]
 800d336:	3020      	adds	r0, #32
 800d338:	2e00      	cmp	r6, #0
 800d33a:	d0e3      	beq.n	800d304 <__d2b+0x58>
 800d33c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 800d340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d342:	eb09 0300 	add.w	r3, r9, r0
 800d346:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	6010      	str	r0, [r2, #0]
 800d34e:	e7e5      	b.n	800d31c <__d2b+0x70>
 800d350:	f1c0 0120 	rsb	r1, r0, #32
 800d354:	fa03 f401 	lsl.w	r4, r3, r1
 800d358:	fa23 f300 	lsr.w	r3, r3, r0
 800d35c:	9a00      	ldr	r2, [sp, #0]
 800d35e:	9301      	str	r3, [sp, #4]
 800d360:	ea44 0102 	orr.w	r1, r4, r2
 800d364:	f8c8 1014 	str.w	r1, [r8, #20]
 800d368:	e7c3      	b.n	800d2f2 <__d2b+0x46>
 800d36a:	bf00      	nop

0800d36c <__ratio>:
 800d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36e:	b083      	sub	sp, #12
 800d370:	460e      	mov	r6, r1
 800d372:	4669      	mov	r1, sp
 800d374:	4607      	mov	r7, r0
 800d376:	f7ff ff3b 	bl	800d1f0 <__b2d>
 800d37a:	4604      	mov	r4, r0
 800d37c:	460d      	mov	r5, r1
 800d37e:	4630      	mov	r0, r6
 800d380:	a901      	add	r1, sp, #4
 800d382:	f7ff ff35 	bl	800d1f0 <__b2d>
 800d386:	693f      	ldr	r7, [r7, #16]
 800d388:	6936      	ldr	r6, [r6, #16]
 800d38a:	4602      	mov	r2, r0
 800d38c:	ebc6 0e07 	rsb	lr, r6, r7
 800d390:	460b      	mov	r3, r1
 800d392:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800d396:	1a41      	subs	r1, r0, r1
 800d398:	eb01 1c4e 	add.w	ip, r1, lr, lsl #5
 800d39c:	f1bc 0f00 	cmp.w	ip, #0
 800d3a0:	4616      	mov	r6, r2
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	dd07      	ble.n	800d3b6 <__ratio+0x4a>
 800d3a6:	eb05 550c 	add.w	r5, r5, ip, lsl #20
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	f7f3 f90d 	bl	80005cc <__aeabi_ddiv>
 800d3b2:	b003      	add	sp, #12
 800d3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b6:	eba3 570c 	sub.w	r7, r3, ip, lsl #20
 800d3ba:	463b      	mov	r3, r7
 800d3bc:	e7f5      	b.n	800d3aa <__ratio+0x3e>
 800d3be:	bf00      	nop

0800d3c0 <__copybits>:
 800d3c0:	b4f0      	push	{r4, r5, r6, r7}
 800d3c2:	6916      	ldr	r6, [r2, #16]
 800d3c4:	4694      	mov	ip, r2
 800d3c6:	3901      	subs	r1, #1
 800d3c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3cc:	114f      	asrs	r7, r1, #5
 800d3ce:	f10c 0314 	add.w	r3, ip, #20
 800d3d2:	3614      	adds	r6, #20
 800d3d4:	1c7a      	adds	r2, r7, #1
 800d3d6:	42b3      	cmp	r3, r6
 800d3d8:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800d3dc:	d227      	bcs.n	800d42e <__copybits+0x6e>
 800d3de:	43d9      	mvns	r1, r3
 800d3e0:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800d3e4:	f10c 0318 	add.w	r3, ip, #24
 800d3e8:	1872      	adds	r2, r6, r1
 800d3ea:	429e      	cmp	r6, r3
 800d3ec:	4601      	mov	r1, r0
 800d3ee:	f841 4b04 	str.w	r4, [r1], #4
 800d3f2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800d3f6:	d913      	bls.n	800d420 <__copybits+0x60>
 800d3f8:	b132      	cbz	r2, 800d408 <__copybits+0x48>
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	f10c 031c 	add.w	r3, ip, #28
 800d400:	429e      	cmp	r6, r3
 800d402:	f841 2b04 	str.w	r2, [r1], #4
 800d406:	d90b      	bls.n	800d420 <__copybits+0x60>
 800d408:	461d      	mov	r5, r3
 800d40a:	f855 2b04 	ldr.w	r2, [r5], #4
 800d40e:	460c      	mov	r4, r1
 800d410:	f844 2b04 	str.w	r2, [r4], #4
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	604b      	str	r3, [r1, #4]
 800d418:	1d2b      	adds	r3, r5, #4
 800d41a:	1d21      	adds	r1, r4, #4
 800d41c:	429e      	cmp	r6, r3
 800d41e:	d8f3      	bhi.n	800d408 <__copybits+0x48>
 800d420:	ebcc 0106 	rsb	r1, ip, r6
 800d424:	3915      	subs	r1, #21
 800d426:	f021 0203 	bic.w	r2, r1, #3
 800d42a:	1d13      	adds	r3, r2, #4
 800d42c:	18c0      	adds	r0, r0, r3
 800d42e:	4287      	cmp	r7, r0
 800d430:	d914      	bls.n	800d45c <__copybits+0x9c>
 800d432:	2100      	movs	r1, #0
 800d434:	43c2      	mvns	r2, r0
 800d436:	f840 1b04 	str.w	r1, [r0], #4
 800d43a:	18bb      	adds	r3, r7, r2
 800d43c:	4287      	cmp	r7, r0
 800d43e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800d442:	d90b      	bls.n	800d45c <__copybits+0x9c>
 800d444:	b11a      	cbz	r2, 800d44e <__copybits+0x8e>
 800d446:	f840 1b04 	str.w	r1, [r0], #4
 800d44a:	4287      	cmp	r7, r0
 800d44c:	d906      	bls.n	800d45c <__copybits+0x9c>
 800d44e:	4603      	mov	r3, r0
 800d450:	f843 1b04 	str.w	r1, [r3], #4
 800d454:	6041      	str	r1, [r0, #4]
 800d456:	1d18      	adds	r0, r3, #4
 800d458:	4287      	cmp	r7, r0
 800d45a:	d8f8      	bhi.n	800d44e <__copybits+0x8e>
 800d45c:	bcf0      	pop	{r4, r5, r6, r7}
 800d45e:	4770      	bx	lr

0800d460 <__any_on>:
 800d460:	b430      	push	{r4, r5}
 800d462:	6904      	ldr	r4, [r0, #16]
 800d464:	114a      	asrs	r2, r1, #5
 800d466:	4294      	cmp	r4, r2
 800d468:	f100 0314 	add.w	r3, r0, #20
 800d46c:	da22      	bge.n	800d4b4 <__any_on+0x54>
 800d46e:	4622      	mov	r2, r4
 800d470:	3204      	adds	r2, #4
 800d472:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800d476:	1d01      	adds	r1, r0, #4
 800d478:	428b      	cmp	r3, r1
 800d47a:	d229      	bcs.n	800d4d0 <__any_on+0x70>
 800d47c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800d480:	b972      	cbnz	r2, 800d4a0 <__any_on+0x40>
 800d482:	1ac1      	subs	r1, r0, r3
 800d484:	1cca      	adds	r2, r1, #3
 800d486:	0752      	lsls	r2, r2, #29
 800d488:	d40d      	bmi.n	800d4a6 <__any_on+0x46>
 800d48a:	4283      	cmp	r3, r0
 800d48c:	d220      	bcs.n	800d4d0 <__any_on+0x70>
 800d48e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d492:	3804      	subs	r0, #4
 800d494:	b922      	cbnz	r2, 800d4a0 <__any_on+0x40>
 800d496:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800d49a:	3804      	subs	r0, #4
 800d49c:	2900      	cmp	r1, #0
 800d49e:	d0f4      	beq.n	800d48a <__any_on+0x2a>
 800d4a0:	2001      	movs	r0, #1
 800d4a2:	bc30      	pop	{r4, r5}
 800d4a4:	4770      	bx	lr
 800d4a6:	4283      	cmp	r3, r0
 800d4a8:	d212      	bcs.n	800d4d0 <__any_on+0x70>
 800d4aa:	f850 1d04 	ldr.w	r1, [r0, #-4]!
 800d4ae:	2900      	cmp	r1, #0
 800d4b0:	d0eb      	beq.n	800d48a <__any_on+0x2a>
 800d4b2:	e7f5      	b.n	800d4a0 <__any_on+0x40>
 800d4b4:	dddc      	ble.n	800d470 <__any_on+0x10>
 800d4b6:	f011 011f 	ands.w	r1, r1, #31
 800d4ba:	d0d9      	beq.n	800d470 <__any_on+0x10>
 800d4bc:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800d4c0:	6964      	ldr	r4, [r4, #20]
 800d4c2:	fa24 f501 	lsr.w	r5, r4, r1
 800d4c6:	fa05 f101 	lsl.w	r1, r5, r1
 800d4ca:	42a1      	cmp	r1, r4
 800d4cc:	d1e8      	bne.n	800d4a0 <__any_on+0x40>
 800d4ce:	e7cf      	b.n	800d470 <__any_on+0x10>
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	e7e6      	b.n	800d4a2 <__any_on+0x42>

0800d4d4 <_realloc_r>:
 800d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	460c      	mov	r4, r1
 800d4da:	b083      	sub	sp, #12
 800d4dc:	4681      	mov	r9, r0
 800d4de:	4617      	mov	r7, r2
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	f000 80c6 	beq.w	800d672 <_realloc_r+0x19e>
 800d4e6:	f7f9 fdc9 	bl	800707c <__malloc_lock>
 800d4ea:	f107 050b 	add.w	r5, r7, #11
 800d4ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d4f2:	2d16      	cmp	r5, #22
 800d4f4:	f1a4 0a08 	sub.w	sl, r4, #8
 800d4f8:	f023 0603 	bic.w	r6, r3, #3
 800d4fc:	d850      	bhi.n	800d5a0 <_realloc_r+0xcc>
 800d4fe:	2110      	movs	r1, #16
 800d500:	460d      	mov	r5, r1
 800d502:	42af      	cmp	r7, r5
 800d504:	d851      	bhi.n	800d5aa <_realloc_r+0xd6>
 800d506:	428e      	cmp	r6, r1
 800d508:	da54      	bge.n	800d5b4 <_realloc_r+0xe0>
 800d50a:	f8df c3b0 	ldr.w	ip, [pc, #944]	; 800d8bc <_realloc_r+0x3e8>
 800d50e:	eb0a 0206 	add.w	r2, sl, r6
 800d512:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800d516:	4290      	cmp	r0, r2
 800d518:	f000 80b1 	beq.w	800d67e <_realloc_r+0x1aa>
 800d51c:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d520:	f02e 0801 	bic.w	r8, lr, #1
 800d524:	4490      	add	r8, r2
 800d526:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800d52a:	f018 0f01 	tst.w	r8, #1
 800d52e:	d05b      	beq.n	800d5e8 <_realloc_r+0x114>
 800d530:	f04f 0e00 	mov.w	lr, #0
 800d534:	4672      	mov	r2, lr
 800d536:	07db      	lsls	r3, r3, #31
 800d538:	d476      	bmi.n	800d628 <_realloc_r+0x154>
 800d53a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800d53e:	ebc3 0b0a 	rsb	fp, r3, sl
 800d542:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d546:	f023 0303 	bic.w	r3, r3, #3
 800d54a:	199b      	adds	r3, r3, r6
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	2a00      	cmp	r2, #0
 800d550:	d067      	beq.n	800d622 <_realloc_r+0x14e>
 800d552:	4282      	cmp	r2, r0
 800d554:	eb0e 0803 	add.w	r8, lr, r3
 800d558:	f000 80f4 	beq.w	800d744 <_realloc_r+0x270>
 800d55c:	4588      	cmp	r8, r1
 800d55e:	db60      	blt.n	800d622 <_realloc_r+0x14e>
 800d560:	68d1      	ldr	r1, [r2, #12]
 800d562:	6890      	ldr	r0, [r2, #8]
 800d564:	465f      	mov	r7, fp
 800d566:	60c1      	str	r1, [r0, #12]
 800d568:	6088      	str	r0, [r1, #8]
 800d56a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800d56e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800d572:	1f32      	subs	r2, r6, #4
 800d574:	2a24      	cmp	r2, #36	; 0x24
 800d576:	60cb      	str	r3, [r1, #12]
 800d578:	6099      	str	r1, [r3, #8]
 800d57a:	f200 812d 	bhi.w	800d7d8 <_realloc_r+0x304>
 800d57e:	2a13      	cmp	r2, #19
 800d580:	f240 80bb 	bls.w	800d6fa <_realloc_r+0x226>
 800d584:	6821      	ldr	r1, [r4, #0]
 800d586:	2a1b      	cmp	r2, #27
 800d588:	f8cb 1008 	str.w	r1, [fp, #8]
 800d58c:	6860      	ldr	r0, [r4, #4]
 800d58e:	f8cb 000c 	str.w	r0, [fp, #12]
 800d592:	f200 8138 	bhi.w	800d806 <_realloc_r+0x332>
 800d596:	f10b 0010 	add.w	r0, fp, #16
 800d59a:	f104 0308 	add.w	r3, r4, #8
 800d59e:	e0ae      	b.n	800d6fe <_realloc_r+0x22a>
 800d5a0:	f025 0507 	bic.w	r5, r5, #7
 800d5a4:	2d00      	cmp	r5, #0
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	daab      	bge.n	800d502 <_realloc_r+0x2e>
 800d5aa:	270c      	movs	r7, #12
 800d5ac:	f8c9 7000 	str.w	r7, [r9]
 800d5b0:	2700      	movs	r7, #0
 800d5b2:	e015      	b.n	800d5e0 <_realloc_r+0x10c>
 800d5b4:	46b0      	mov	r8, r6
 800d5b6:	ebc5 0708 	rsb	r7, r5, r8
 800d5ba:	2f0f      	cmp	r7, #15
 800d5bc:	f003 0001 	and.w	r0, r3, #1
 800d5c0:	d81d      	bhi.n	800d5fe <_realloc_r+0x12a>
 800d5c2:	ea40 0108 	orr.w	r1, r0, r8
 800d5c6:	f8ca 1004 	str.w	r1, [sl, #4]
 800d5ca:	44c2      	add	sl, r8
 800d5cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d5d0:	f043 0201 	orr.w	r2, r3, #1
 800d5d4:	f8ca 2004 	str.w	r2, [sl, #4]
 800d5d8:	4648      	mov	r0, r9
 800d5da:	f7f9 fd51 	bl	8007080 <__malloc_unlock>
 800d5de:	4627      	mov	r7, r4
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	b003      	add	sp, #12
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	f02e 0e03 	bic.w	lr, lr, #3
 800d5ec:	eb0e 0806 	add.w	r8, lr, r6
 800d5f0:	4588      	cmp	r8, r1
 800d5f2:	dba0      	blt.n	800d536 <_realloc_r+0x62>
 800d5f4:	68d7      	ldr	r7, [r2, #12]
 800d5f6:	6892      	ldr	r2, [r2, #8]
 800d5f8:	60d7      	str	r7, [r2, #12]
 800d5fa:	60ba      	str	r2, [r7, #8]
 800d5fc:	e7db      	b.n	800d5b6 <_realloc_r+0xe2>
 800d5fe:	eb0a 0105 	add.w	r1, sl, r5
 800d602:	4305      	orrs	r5, r0
 800d604:	f047 0001 	orr.w	r0, r7, #1
 800d608:	f8ca 5004 	str.w	r5, [sl, #4]
 800d60c:	19cf      	adds	r7, r1, r7
 800d60e:	6048      	str	r0, [r1, #4]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4648      	mov	r0, r9
 800d614:	f043 0201 	orr.w	r2, r3, #1
 800d618:	607a      	str	r2, [r7, #4]
 800d61a:	3108      	adds	r1, #8
 800d61c:	f7fe f960 	bl	800b8e0 <_free_r>
 800d620:	e7da      	b.n	800d5d8 <_realloc_r+0x104>
 800d622:	9a01      	ldr	r2, [sp, #4]
 800d624:	428a      	cmp	r2, r1
 800d626:	da35      	bge.n	800d694 <_realloc_r+0x1c0>
 800d628:	4639      	mov	r1, r7
 800d62a:	4648      	mov	r0, r9
 800d62c:	f7f9 f9b6 	bl	800699c <_malloc_r>
 800d630:	4607      	mov	r7, r0
 800d632:	b1d0      	cbz	r0, 800d66a <_realloc_r+0x196>
 800d634:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d638:	f1a0 0108 	sub.w	r1, r0, #8
 800d63c:	f023 0201 	bic.w	r2, r3, #1
 800d640:	4452      	add	r2, sl
 800d642:	4291      	cmp	r1, r2
 800d644:	f000 80c1 	beq.w	800d7ca <_realloc_r+0x2f6>
 800d648:	1f32      	subs	r2, r6, #4
 800d64a:	2a24      	cmp	r2, #36	; 0x24
 800d64c:	d876      	bhi.n	800d73c <_realloc_r+0x268>
 800d64e:	2a13      	cmp	r2, #19
 800d650:	d848      	bhi.n	800d6e4 <_realloc_r+0x210>
 800d652:	4603      	mov	r3, r0
 800d654:	4620      	mov	r0, r4
 800d656:	6802      	ldr	r2, [r0, #0]
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	6841      	ldr	r1, [r0, #4]
 800d65c:	6059      	str	r1, [r3, #4]
 800d65e:	6880      	ldr	r0, [r0, #8]
 800d660:	6098      	str	r0, [r3, #8]
 800d662:	4648      	mov	r0, r9
 800d664:	4621      	mov	r1, r4
 800d666:	f7fe f93b 	bl	800b8e0 <_free_r>
 800d66a:	4648      	mov	r0, r9
 800d66c:	f7f9 fd08 	bl	8007080 <__malloc_unlock>
 800d670:	e7b6      	b.n	800d5e0 <_realloc_r+0x10c>
 800d672:	4611      	mov	r1, r2
 800d674:	b003      	add	sp, #12
 800d676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67a:	f7f9 b98f 	b.w	800699c <_malloc_r>
 800d67e:	6842      	ldr	r2, [r0, #4]
 800d680:	f105 0810 	add.w	r8, r5, #16
 800d684:	f022 0e03 	bic.w	lr, r2, #3
 800d688:	eb0e 0206 	add.w	r2, lr, r6
 800d68c:	4542      	cmp	r2, r8
 800d68e:	da41      	bge.n	800d714 <_realloc_r+0x240>
 800d690:	4602      	mov	r2, r0
 800d692:	e750      	b.n	800d536 <_realloc_r+0x62>
 800d694:	465f      	mov	r7, fp
 800d696:	f8db 300c 	ldr.w	r3, [fp, #12]
 800d69a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800d69e:	1f32      	subs	r2, r6, #4
 800d6a0:	2a24      	cmp	r2, #36	; 0x24
 800d6a2:	60cb      	str	r3, [r1, #12]
 800d6a4:	6099      	str	r1, [r3, #8]
 800d6a6:	f200 80a3 	bhi.w	800d7f0 <_realloc_r+0x31c>
 800d6aa:	2a13      	cmp	r2, #19
 800d6ac:	f240 809d 	bls.w	800d7ea <_realloc_r+0x316>
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	2a1b      	cmp	r2, #27
 800d6b4:	f8cb 3008 	str.w	r3, [fp, #8]
 800d6b8:	6861      	ldr	r1, [r4, #4]
 800d6ba:	f8cb 100c 	str.w	r1, [fp, #12]
 800d6be:	f200 80b8 	bhi.w	800d832 <_realloc_r+0x35e>
 800d6c2:	f10b 0010 	add.w	r0, fp, #16
 800d6c6:	f104 0208 	add.w	r2, r4, #8
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	463c      	mov	r4, r7
 800d6ce:	6003      	str	r3, [r0, #0]
 800d6d0:	6857      	ldr	r7, [r2, #4]
 800d6d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d6d6:	6047      	str	r7, [r0, #4]
 800d6d8:	6892      	ldr	r2, [r2, #8]
 800d6da:	46da      	mov	sl, fp
 800d6dc:	6082      	str	r2, [r0, #8]
 800d6de:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d6e2:	e768      	b.n	800d5b6 <_realloc_r+0xe2>
 800d6e4:	6821      	ldr	r1, [r4, #0]
 800d6e6:	2a1b      	cmp	r2, #27
 800d6e8:	6001      	str	r1, [r0, #0]
 800d6ea:	6863      	ldr	r3, [r4, #4]
 800d6ec:	6043      	str	r3, [r0, #4]
 800d6ee:	d861      	bhi.n	800d7b4 <_realloc_r+0x2e0>
 800d6f0:	f100 0308 	add.w	r3, r0, #8
 800d6f4:	f104 0008 	add.w	r0, r4, #8
 800d6f8:	e7ad      	b.n	800d656 <_realloc_r+0x182>
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	4623      	mov	r3, r4
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	463c      	mov	r4, r7
 800d702:	6002      	str	r2, [r0, #0]
 800d704:	685f      	ldr	r7, [r3, #4]
 800d706:	46da      	mov	sl, fp
 800d708:	6047      	str	r7, [r0, #4]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	6083      	str	r3, [r0, #8]
 800d70e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d712:	e750      	b.n	800d5b6 <_realloc_r+0xe2>
 800d714:	1b57      	subs	r7, r2, r5
 800d716:	eb0a 0305 	add.w	r3, sl, r5
 800d71a:	f047 0001 	orr.w	r0, r7, #1
 800d71e:	6058      	str	r0, [r3, #4]
 800d720:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800d724:	4648      	mov	r0, r9
 800d726:	f001 0201 	and.w	r2, r1, #1
 800d72a:	4315      	orrs	r5, r2
 800d72c:	f844 5c04 	str.w	r5, [r4, #-4]
 800d730:	f8cc 3008 	str.w	r3, [ip, #8]
 800d734:	4627      	mov	r7, r4
 800d736:	f7f9 fca3 	bl	8007080 <__malloc_unlock>
 800d73a:	e751      	b.n	800d5e0 <_realloc_r+0x10c>
 800d73c:	4621      	mov	r1, r4
 800d73e:	f000 f96f 	bl	800da20 <memmove>
 800d742:	e78e      	b.n	800d662 <_realloc_r+0x18e>
 800d744:	f105 0010 	add.w	r0, r5, #16
 800d748:	4580      	cmp	r8, r0
 800d74a:	f6ff af6a 	blt.w	800d622 <_realloc_r+0x14e>
 800d74e:	465f      	mov	r7, fp
 800d750:	f8db 000c 	ldr.w	r0, [fp, #12]
 800d754:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800d758:	1f32      	subs	r2, r6, #4
 800d75a:	2a24      	cmp	r2, #36	; 0x24
 800d75c:	60c8      	str	r0, [r1, #12]
 800d75e:	6081      	str	r1, [r0, #8]
 800d760:	f200 808c 	bhi.w	800d87c <_realloc_r+0x3a8>
 800d764:	2a13      	cmp	r2, #19
 800d766:	d97c      	bls.n	800d862 <_realloc_r+0x38e>
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	2a1b      	cmp	r2, #27
 800d76c:	f8cb 0008 	str.w	r0, [fp, #8]
 800d770:	6861      	ldr	r1, [r4, #4]
 800d772:	f8cb 100c 	str.w	r1, [fp, #12]
 800d776:	f200 808a 	bhi.w	800d88e <_realloc_r+0x3ba>
 800d77a:	f10b 0310 	add.w	r3, fp, #16
 800d77e:	3408      	adds	r4, #8
 800d780:	6820      	ldr	r0, [r4, #0]
 800d782:	6018      	str	r0, [r3, #0]
 800d784:	6862      	ldr	r2, [r4, #4]
 800d786:	605a      	str	r2, [r3, #4]
 800d788:	68a1      	ldr	r1, [r4, #8]
 800d78a:	6099      	str	r1, [r3, #8]
 800d78c:	ebc5 0008 	rsb	r0, r5, r8
 800d790:	eb0b 0305 	add.w	r3, fp, r5
 800d794:	f040 0201 	orr.w	r2, r0, #1
 800d798:	605a      	str	r2, [r3, #4]
 800d79a:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d79e:	4648      	mov	r0, r9
 800d7a0:	f001 0201 	and.w	r2, r1, #1
 800d7a4:	4315      	orrs	r5, r2
 800d7a6:	f8cb 5004 	str.w	r5, [fp, #4]
 800d7aa:	f8cc 3008 	str.w	r3, [ip, #8]
 800d7ae:	f7f9 fc67 	bl	8007080 <__malloc_unlock>
 800d7b2:	e715      	b.n	800d5e0 <_realloc_r+0x10c>
 800d7b4:	68a0      	ldr	r0, [r4, #8]
 800d7b6:	2a24      	cmp	r2, #36	; 0x24
 800d7b8:	60b8      	str	r0, [r7, #8]
 800d7ba:	68e1      	ldr	r1, [r4, #12]
 800d7bc:	60f9      	str	r1, [r7, #12]
 800d7be:	d02f      	beq.n	800d820 <_realloc_r+0x34c>
 800d7c0:	f107 0310 	add.w	r3, r7, #16
 800d7c4:	f104 0010 	add.w	r0, r4, #16
 800d7c8:	e745      	b.n	800d656 <_realloc_r+0x182>
 800d7ca:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800d7ce:	f027 0c03 	bic.w	ip, r7, #3
 800d7d2:	eb0c 0806 	add.w	r8, ip, r6
 800d7d6:	e6ee      	b.n	800d5b6 <_realloc_r+0xe2>
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4638      	mov	r0, r7
 800d7dc:	f000 f920 	bl	800da20 <memmove>
 800d7e0:	463c      	mov	r4, r7
 800d7e2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d7e6:	46da      	mov	sl, fp
 800d7e8:	e6e5      	b.n	800d5b6 <_realloc_r+0xe2>
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	e76c      	b.n	800d6ca <_realloc_r+0x1f6>
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f000 f914 	bl	800da20 <memmove>
 800d7f8:	463c      	mov	r4, r7
 800d7fa:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d7fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d802:	46da      	mov	sl, fp
 800d804:	e6d7      	b.n	800d5b6 <_realloc_r+0xe2>
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	2a24      	cmp	r2, #36	; 0x24
 800d80a:	f8cb 3010 	str.w	r3, [fp, #16]
 800d80e:	68e1      	ldr	r1, [r4, #12]
 800d810:	f8cb 1014 	str.w	r1, [fp, #20]
 800d814:	d01a      	beq.n	800d84c <_realloc_r+0x378>
 800d816:	f10b 0018 	add.w	r0, fp, #24
 800d81a:	f104 0310 	add.w	r3, r4, #16
 800d81e:	e76e      	b.n	800d6fe <_realloc_r+0x22a>
 800d820:	6922      	ldr	r2, [r4, #16]
 800d822:	f107 0318 	add.w	r3, r7, #24
 800d826:	613a      	str	r2, [r7, #16]
 800d828:	6961      	ldr	r1, [r4, #20]
 800d82a:	f104 0018 	add.w	r0, r4, #24
 800d82e:	6179      	str	r1, [r7, #20]
 800d830:	e711      	b.n	800d656 <_realloc_r+0x182>
 800d832:	68a0      	ldr	r0, [r4, #8]
 800d834:	2a24      	cmp	r2, #36	; 0x24
 800d836:	f8cb 0010 	str.w	r0, [fp, #16]
 800d83a:	68e3      	ldr	r3, [r4, #12]
 800d83c:	f8cb 3014 	str.w	r3, [fp, #20]
 800d840:	d011      	beq.n	800d866 <_realloc_r+0x392>
 800d842:	f10b 0018 	add.w	r0, fp, #24
 800d846:	f104 0210 	add.w	r2, r4, #16
 800d84a:	e73e      	b.n	800d6ca <_realloc_r+0x1f6>
 800d84c:	6922      	ldr	r2, [r4, #16]
 800d84e:	f10b 0020 	add.w	r0, fp, #32
 800d852:	f8cb 2018 	str.w	r2, [fp, #24]
 800d856:	6961      	ldr	r1, [r4, #20]
 800d858:	f104 0318 	add.w	r3, r4, #24
 800d85c:	f8cb 101c 	str.w	r1, [fp, #28]
 800d860:	e74d      	b.n	800d6fe <_realloc_r+0x22a>
 800d862:	463b      	mov	r3, r7
 800d864:	e78c      	b.n	800d780 <_realloc_r+0x2ac>
 800d866:	6922      	ldr	r2, [r4, #16]
 800d868:	f10b 0020 	add.w	r0, fp, #32
 800d86c:	f8cb 2018 	str.w	r2, [fp, #24]
 800d870:	6961      	ldr	r1, [r4, #20]
 800d872:	f104 0218 	add.w	r2, r4, #24
 800d876:	f8cb 101c 	str.w	r1, [fp, #28]
 800d87a:	e726      	b.n	800d6ca <_realloc_r+0x1f6>
 800d87c:	4638      	mov	r0, r7
 800d87e:	4621      	mov	r1, r4
 800d880:	f8cd c000 	str.w	ip, [sp]
 800d884:	f000 f8cc 	bl	800da20 <memmove>
 800d888:	f8dd c000 	ldr.w	ip, [sp]
 800d88c:	e77e      	b.n	800d78c <_realloc_r+0x2b8>
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	2a24      	cmp	r2, #36	; 0x24
 800d892:	f8cb 3010 	str.w	r3, [fp, #16]
 800d896:	68e0      	ldr	r0, [r4, #12]
 800d898:	f8cb 0014 	str.w	r0, [fp, #20]
 800d89c:	d003      	beq.n	800d8a6 <_realloc_r+0x3d2>
 800d89e:	f10b 0318 	add.w	r3, fp, #24
 800d8a2:	3410      	adds	r4, #16
 800d8a4:	e76c      	b.n	800d780 <_realloc_r+0x2ac>
 800d8a6:	6922      	ldr	r2, [r4, #16]
 800d8a8:	f10b 0320 	add.w	r3, fp, #32
 800d8ac:	f8cb 2018 	str.w	r2, [fp, #24]
 800d8b0:	6961      	ldr	r1, [r4, #20]
 800d8b2:	3418      	adds	r4, #24
 800d8b4:	f8cb 101c 	str.w	r1, [fp, #28]
 800d8b8:	e762      	b.n	800d780 <_realloc_r+0x2ac>
 800d8ba:	bf00      	nop
 800d8bc:	20000570 	.word	0x20000570

0800d8c0 <__ssprint_r>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	6894      	ldr	r4, [r2, #8]
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	4692      	mov	sl, r2
 800d8ca:	4681      	mov	r9, r0
 800d8cc:	460d      	mov	r5, r1
 800d8ce:	6817      	ldr	r7, [r2, #0]
 800d8d0:	2c00      	cmp	r4, #0
 800d8d2:	d06e      	beq.n	800d9b2 <__ssprint_r+0xf2>
 800d8d4:	f04f 0b00 	mov.w	fp, #0
 800d8d8:	6808      	ldr	r0, [r1, #0]
 800d8da:	688e      	ldr	r6, [r1, #8]
 800d8dc:	465c      	mov	r4, fp
 800d8de:	2c00      	cmp	r4, #0
 800d8e0:	d047      	beq.n	800d972 <__ssprint_r+0xb2>
 800d8e2:	42b4      	cmp	r4, r6
 800d8e4:	46b0      	mov	r8, r6
 800d8e6:	d349      	bcc.n	800d97c <__ssprint_r+0xbc>
 800d8e8:	89ab      	ldrh	r3, [r5, #12]
 800d8ea:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d8ee:	d030      	beq.n	800d952 <__ssprint_r+0x92>
 800d8f0:	696e      	ldr	r6, [r5, #20]
 800d8f2:	6929      	ldr	r1, [r5, #16]
 800d8f4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800d8f8:	ebc1 0800 	rsb	r8, r1, r0
 800d8fc:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
 800d900:	1c60      	adds	r0, r4, #1
 800d902:	1076      	asrs	r6, r6, #1
 800d904:	4440      	add	r0, r8
 800d906:	4286      	cmp	r6, r0
 800d908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d90c:	4632      	mov	r2, r6
 800d90e:	b21b      	sxth	r3, r3
 800d910:	bf3c      	itt	cc
 800d912:	4606      	movcc	r6, r0
 800d914:	4632      	movcc	r2, r6
 800d916:	4648      	mov	r0, r9
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d032      	beq.n	800d982 <__ssprint_r+0xc2>
 800d91c:	4611      	mov	r1, r2
 800d91e:	f7f9 f83d 	bl	800699c <_malloc_r>
 800d922:	2800      	cmp	r0, #0
 800d924:	d036      	beq.n	800d994 <__ssprint_r+0xd4>
 800d926:	6929      	ldr	r1, [r5, #16]
 800d928:	4642      	mov	r2, r8
 800d92a:	9001      	str	r0, [sp, #4]
 800d92c:	f7fe fe4a 	bl	800c5c4 <memcpy>
 800d930:	89aa      	ldrh	r2, [r5, #12]
 800d932:	f422 6090 	bic.w	r0, r2, #1152	; 0x480
 800d936:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 800d93a:	81a9      	strh	r1, [r5, #12]
 800d93c:	9901      	ldr	r1, [sp, #4]
 800d93e:	ebc8 0306 	rsb	r3, r8, r6
 800d942:	eb01 0008 	add.w	r0, r1, r8
 800d946:	616e      	str	r6, [r5, #20]
 800d948:	6129      	str	r1, [r5, #16]
 800d94a:	6028      	str	r0, [r5, #0]
 800d94c:	4626      	mov	r6, r4
 800d94e:	60ab      	str	r3, [r5, #8]
 800d950:	46a0      	mov	r8, r4
 800d952:	4659      	mov	r1, fp
 800d954:	4642      	mov	r2, r8
 800d956:	f000 f863 	bl	800da20 <memmove>
 800d95a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800d95e:	68aa      	ldr	r2, [r5, #8]
 800d960:	6828      	ldr	r0, [r5, #0]
 800d962:	1b96      	subs	r6, r2, r6
 800d964:	4440      	add	r0, r8
 800d966:	1b0c      	subs	r4, r1, r4
 800d968:	60ae      	str	r6, [r5, #8]
 800d96a:	6028      	str	r0, [r5, #0]
 800d96c:	f8ca 4008 	str.w	r4, [sl, #8]
 800d970:	b1fc      	cbz	r4, 800d9b2 <__ssprint_r+0xf2>
 800d972:	f8d7 b000 	ldr.w	fp, [r7]
 800d976:	687c      	ldr	r4, [r7, #4]
 800d978:	3708      	adds	r7, #8
 800d97a:	e7b0      	b.n	800d8de <__ssprint_r+0x1e>
 800d97c:	4626      	mov	r6, r4
 800d97e:	46a0      	mov	r8, r4
 800d980:	e7e7      	b.n	800d952 <__ssprint_r+0x92>
 800d982:	f7ff fda7 	bl	800d4d4 <_realloc_r>
 800d986:	4601      	mov	r1, r0
 800d988:	2800      	cmp	r0, #0
 800d98a:	d1d8      	bne.n	800d93e <__ssprint_r+0x7e>
 800d98c:	4648      	mov	r0, r9
 800d98e:	6929      	ldr	r1, [r5, #16]
 800d990:	f7fd ffa6 	bl	800b8e0 <_free_r>
 800d994:	89aa      	ldrh	r2, [r5, #12]
 800d996:	2100      	movs	r1, #0
 800d998:	f042 0040 	orr.w	r0, r2, #64	; 0x40
 800d99c:	230c      	movs	r3, #12
 800d99e:	f8c9 3000 	str.w	r3, [r9]
 800d9a2:	81a8      	strh	r0, [r5, #12]
 800d9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9a8:	f8ca 1008 	str.w	r1, [sl, #8]
 800d9ac:	f8ca 1004 	str.w	r1, [sl, #4]
 800d9b0:	e002      	b.n	800d9b8 <__ssprint_r+0xf8>
 800d9b2:	f8ca 4004 	str.w	r4, [sl, #4]
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	b003      	add	sp, #12
 800d9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9be:	bf00      	nop

0800d9c0 <_calloc_r>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	fb01 f102 	mul.w	r1, r1, r2
 800d9c6:	f7f8 ffe9 	bl	800699c <_malloc_r>
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	b168      	cbz	r0, 800d9ea <_calloc_r+0x2a>
 800d9ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d9d2:	f022 0103 	bic.w	r1, r2, #3
 800d9d6:	1f0a      	subs	r2, r1, #4
 800d9d8:	2a24      	cmp	r2, #36	; 0x24
 800d9da:	d818      	bhi.n	800da0e <_calloc_r+0x4e>
 800d9dc:	2a13      	cmp	r2, #19
 800d9de:	d806      	bhi.n	800d9ee <_calloc_r+0x2e>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	6018      	str	r0, [r3, #0]
 800d9e6:	6058      	str	r0, [r3, #4]
 800d9e8:	6098      	str	r0, [r3, #8]
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2a1b      	cmp	r2, #27
 800d9f2:	6003      	str	r3, [r0, #0]
 800d9f4:	6043      	str	r3, [r0, #4]
 800d9f6:	d90f      	bls.n	800da18 <_calloc_r+0x58>
 800d9f8:	2a24      	cmp	r2, #36	; 0x24
 800d9fa:	6083      	str	r3, [r0, #8]
 800d9fc:	60c3      	str	r3, [r0, #12]
 800d9fe:	bf05      	ittet	eq
 800da00:	6103      	streq	r3, [r0, #16]
 800da02:	6143      	streq	r3, [r0, #20]
 800da04:	f100 0310 	addne.w	r3, r0, #16
 800da08:	f100 0318 	addeq.w	r3, r0, #24
 800da0c:	e7e9      	b.n	800d9e2 <_calloc_r+0x22>
 800da0e:	2100      	movs	r1, #0
 800da10:	f7f9 fa9e 	bl	8006f50 <memset>
 800da14:	4620      	mov	r0, r4
 800da16:	bd10      	pop	{r4, pc}
 800da18:	f100 0308 	add.w	r3, r0, #8
 800da1c:	e7e1      	b.n	800d9e2 <_calloc_r+0x22>
 800da1e:	bf00      	nop

0800da20 <memmove>:
 800da20:	4288      	cmp	r0, r1
 800da22:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800da26:	d926      	bls.n	800da76 <memmove+0x56>
 800da28:	188c      	adds	r4, r1, r2
 800da2a:	42a0      	cmp	r0, r4
 800da2c:	d223      	bcs.n	800da76 <memmove+0x56>
 800da2e:	1883      	adds	r3, r0, r2
 800da30:	1e55      	subs	r5, r2, #1
 800da32:	b1ea      	cbz	r2, 800da70 <memmove+0x50>
 800da34:	4622      	mov	r2, r4
 800da36:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 800da3a:	f005 0401 	and.w	r4, r5, #1
 800da3e:	f803 1d01 	strb.w	r1, [r3, #-1]!
 800da42:	1e69      	subs	r1, r5, #1
 800da44:	b1a5      	cbz	r5, 800da70 <memmove+0x50>
 800da46:	b13c      	cbz	r4, 800da58 <memmove+0x38>
 800da48:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800da4c:	3901      	subs	r1, #1
 800da4e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800da52:	f803 4d01 	strb.w	r4, [r3, #-1]!
 800da56:	d00b      	beq.n	800da70 <memmove+0x50>
 800da58:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800da5c:	3902      	subs	r1, #2
 800da5e:	f803 4d01 	strb.w	r4, [r3, #-1]!
 800da62:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 800da66:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800da6a:	f803 4d01 	strb.w	r4, [r3, #-1]!
 800da6e:	d1f3      	bne.n	800da58 <memmove+0x38>
 800da70:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800da74:	4770      	bx	lr
 800da76:	2a0f      	cmp	r2, #15
 800da78:	f240 80a2 	bls.w	800dbc0 <memmove+0x1a0>
 800da7c:	ea41 0300 	orr.w	r3, r1, r0
 800da80:	079b      	lsls	r3, r3, #30
 800da82:	f040 809f 	bne.w	800dbc4 <memmove+0x1a4>
 800da86:	680c      	ldr	r4, [r1, #0]
 800da88:	f1a2 0510 	sub.w	r5, r2, #16
 800da8c:	6004      	str	r4, [r0, #0]
 800da8e:	684b      	ldr	r3, [r1, #4]
 800da90:	46ac      	mov	ip, r5
 800da92:	6043      	str	r3, [r0, #4]
 800da94:	688c      	ldr	r4, [r1, #8]
 800da96:	f1bc 0f0f 	cmp.w	ip, #15
 800da9a:	6084      	str	r4, [r0, #8]
 800da9c:	68cc      	ldr	r4, [r1, #12]
 800da9e:	f3c5 1500 	ubfx	r5, r5, #4, #1
 800daa2:	60c4      	str	r4, [r0, #12]
 800daa4:	f100 0310 	add.w	r3, r0, #16
 800daa8:	f101 0410 	add.w	r4, r1, #16
 800daac:	d92a      	bls.n	800db04 <memmove+0xe4>
 800daae:	b175      	cbz	r5, 800dace <memmove+0xae>
 800dab0:	6825      	ldr	r5, [r4, #0]
 800dab2:	f1ac 0c10 	sub.w	ip, ip, #16
 800dab6:	601d      	str	r5, [r3, #0]
 800dab8:	6865      	ldr	r5, [r4, #4]
 800daba:	605d      	str	r5, [r3, #4]
 800dabc:	68a5      	ldr	r5, [r4, #8]
 800dabe:	609d      	str	r5, [r3, #8]
 800dac0:	68e5      	ldr	r5, [r4, #12]
 800dac2:	3410      	adds	r4, #16
 800dac4:	60dd      	str	r5, [r3, #12]
 800dac6:	3310      	adds	r3, #16
 800dac8:	f1bc 0f0f 	cmp.w	ip, #15
 800dacc:	d91a      	bls.n	800db04 <memmove+0xe4>
 800dace:	6827      	ldr	r7, [r4, #0]
 800dad0:	f104 0610 	add.w	r6, r4, #16
 800dad4:	601f      	str	r7, [r3, #0]
 800dad6:	6867      	ldr	r7, [r4, #4]
 800dad8:	f103 0510 	add.w	r5, r3, #16
 800dadc:	605f      	str	r7, [r3, #4]
 800dade:	68a7      	ldr	r7, [r4, #8]
 800dae0:	f1ac 0c20 	sub.w	ip, ip, #32
 800dae4:	609f      	str	r7, [r3, #8]
 800dae6:	68e7      	ldr	r7, [r4, #12]
 800dae8:	60df      	str	r7, [r3, #12]
 800daea:	6927      	ldr	r7, [r4, #16]
 800daec:	3420      	adds	r4, #32
 800daee:	611f      	str	r7, [r3, #16]
 800daf0:	6877      	ldr	r7, [r6, #4]
 800daf2:	3320      	adds	r3, #32
 800daf4:	606f      	str	r7, [r5, #4]
 800daf6:	68b7      	ldr	r7, [r6, #8]
 800daf8:	f1bc 0f0f 	cmp.w	ip, #15
 800dafc:	60af      	str	r7, [r5, #8]
 800dafe:	68f6      	ldr	r6, [r6, #12]
 800db00:	60ee      	str	r6, [r5, #12]
 800db02:	d8e4      	bhi.n	800dace <memmove+0xae>
 800db04:	f1a2 0810 	sub.w	r8, r2, #16
 800db08:	f028 030f 	bic.w	r3, r8, #15
 800db0c:	f002 040f 	and.w	r4, r2, #15
 800db10:	f103 0c10 	add.w	ip, r3, #16
 800db14:	2c03      	cmp	r4, #3
 800db16:	eb00 030c 	add.w	r3, r0, ip
 800db1a:	eb01 080c 	add.w	r8, r1, ip
 800db1e:	d953      	bls.n	800dbc8 <memmove+0x1a8>
 800db20:	1f21      	subs	r1, r4, #4
 800db22:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800db26:	4644      	mov	r4, r8
 800db28:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 800db2c:	f854 6b04 	ldr.w	r6, [r4], #4
 800db30:	ebc8 010c 	rsb	r1, r8, ip
 800db34:	f10c 0c04 	add.w	ip, ip, #4
 800db38:	461d      	mov	r5, r3
 800db3a:	4564      	cmp	r4, ip
 800db3c:	f845 6b04 	str.w	r6, [r5], #4
 800db40:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800db44:	d012      	beq.n	800db6c <memmove+0x14c>
 800db46:	b129      	cbz	r1, 800db54 <memmove+0x134>
 800db48:	f854 1b04 	ldr.w	r1, [r4], #4
 800db4c:	4564      	cmp	r4, ip
 800db4e:	f845 1b04 	str.w	r1, [r5], #4
 800db52:	d00b      	beq.n	800db6c <memmove+0x14c>
 800db54:	4627      	mov	r7, r4
 800db56:	f857 1b04 	ldr.w	r1, [r7], #4
 800db5a:	462e      	mov	r6, r5
 800db5c:	f846 1b04 	str.w	r1, [r6], #4
 800db60:	6864      	ldr	r4, [r4, #4]
 800db62:	606c      	str	r4, [r5, #4]
 800db64:	1d3c      	adds	r4, r7, #4
 800db66:	1d35      	adds	r5, r6, #4
 800db68:	4564      	cmp	r4, ip
 800db6a:	d1f3      	bne.n	800db54 <memmove+0x134>
 800db6c:	f109 0c01 	add.w	ip, r9, #1
 800db70:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800db74:	f002 0203 	and.w	r2, r2, #3
 800db78:	eb08 0109 	add.w	r1, r8, r9
 800db7c:	444b      	add	r3, r9
 800db7e:	2a00      	cmp	r2, #0
 800db80:	f43f af76 	beq.w	800da70 <memmove+0x50>
 800db84:	780d      	ldrb	r5, [r1, #0]
 800db86:	189a      	adds	r2, r3, r2
 800db88:	43dc      	mvns	r4, r3
 800db8a:	f803 5b01 	strb.w	r5, [r3], #1
 800db8e:	1914      	adds	r4, r2, r4
 800db90:	4293      	cmp	r3, r2
 800db92:	f004 0401 	and.w	r4, r4, #1
 800db96:	f43f af6b 	beq.w	800da70 <memmove+0x50>
 800db9a:	b134      	cbz	r4, 800dbaa <memmove+0x18a>
 800db9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dba0:	f803 4b01 	strb.w	r4, [r3], #1
 800dba4:	4293      	cmp	r3, r2
 800dba6:	f43f af63 	beq.w	800da70 <memmove+0x50>
 800dbaa:	784d      	ldrb	r5, [r1, #1]
 800dbac:	461c      	mov	r4, r3
 800dbae:	f804 5b01 	strb.w	r5, [r4], #1
 800dbb2:	788d      	ldrb	r5, [r1, #2]
 800dbb4:	3102      	adds	r1, #2
 800dbb6:	705d      	strb	r5, [r3, #1]
 800dbb8:	1c63      	adds	r3, r4, #1
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d1f5      	bne.n	800dbaa <memmove+0x18a>
 800dbbe:	e757      	b.n	800da70 <memmove+0x50>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	e7dc      	b.n	800db7e <memmove+0x15e>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	e7dd      	b.n	800db84 <memmove+0x164>
 800dbc8:	4641      	mov	r1, r8
 800dbca:	4622      	mov	r2, r4
 800dbcc:	e7d7      	b.n	800db7e <memmove+0x15e>
 800dbce:	bf00      	nop
 800dbd0:	78457a65 	.word	0x78457a65
 800dbd4:	726f6c70 	.word	0x726f6c70
 800dbd8:	000a7265 	.word	0x000a7265
 800dbdc:	206d7750 	.word	0x206d7750
 800dbe0:	000a6425 	.word	0x000a6425
 800dbe4:	504c4548 	.word	0x504c4548
 800dbe8:	00000000 	.word	0x00000000
 800dbec:	756e654d 	.word	0x756e654d
 800dbf0:	6c654820 	.word	0x6c654820
 800dbf4:	00000070 	.word	0x00000070
 800dbf8:	554e454d 	.word	0x554e454d
 800dbfc:	00000000 	.word	0x00000000
 800dc00:	70736944 	.word	0x70736944
 800dc04:	2079616c 	.word	0x2079616c
 800dc08:	756e654d 	.word	0x756e654d
 800dc0c:	00000000 	.word	0x00000000
 800dc10:	4f464e49 	.word	0x4f464e49
 800dc14:	00000000 	.word	0x00000000
 800dc18:	6f666e49 	.word	0x6f666e49
 800dc1c:	00000000 	.word	0x00000000
 800dc20:	4f484345 	.word	0x4f484345
 800dc24:	00000000 	.word	0x00000000
 800dc28:	6f686345 	.word	0x6f686345
 800dc2c:	00000000 	.word	0x00000000
 800dc30:	63256325 	.word	0x63256325
 800dc34:	78323025 	.word	0x78323025
 800dc38:	00000020 	.word	0x00000020
 800dc3c:	253c6325 	.word	0x253c6325
 800dc40:	2d203e73 	.word	0x2d203e73
 800dc44:	0a732520 	.word	0x0a732520
 800dc48:	00000000 	.word	0x00000000
 800dc4c:	73256325 	.word	0x73256325
 800dc50:	0000000a 	.word	0x0000000a
 800dc54:	25207325 	.word	0x25207325
 800dc58:	00000073 	.word	0x00000073
 800dc5c:	00004e4f 	.word	0x00004e4f
 800dc60:	63456325 	.word	0x63456325
 800dc64:	6f206f68 	.word	0x6f206f68
 800dc68:	00000a6e 	.word	0x00000a6e
 800dc6c:	63456325 	.word	0x63456325
 800dc70:	6f206f68 	.word	0x6f206f68
 800dc74:	000a6666 	.word	0x000a6666
 800dc78:	2d2d6325 	.word	0x2d2d6325
 800dc7c:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc80:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc84:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc88:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc8c:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc90:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc94:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc98:	2d2d2d2d 	.word	0x2d2d2d2d
 800dc9c:	2d2d2d2d 	.word	0x2d2d2d2d
 800dca0:	202d2d2d 	.word	0x202d2d2d
 800dca4:	00000a0d 	.word	0x00000a0d
 800dca8:	20206325 	.word	0x20206325
 800dcac:	20202020 	.word	0x20202020
 800dcb0:	20202020 	.word	0x20202020
 800dcb4:	41202020 	.word	0x41202020
 800dcb8:	74535f70 	.word	0x74535f70
 800dcbc:	646d4372 	.word	0x646d4372
 800dcc0:	2e307620 	.word	0x2e307620
 800dcc4:	20202031 	.word	0x20202031
 800dcc8:	20202020 	.word	0x20202020
 800dccc:	20202020 	.word	0x20202020
 800dcd0:	20202020 	.word	0x20202020
 800dcd4:	00000a0d 	.word	0x00000a0d
 800dcd8:	20206325 	.word	0x20206325
 800dcdc:	20202020 	.word	0x20202020
 800dce0:	20202020 	.word	0x20202020
 800dce4:	20202020 	.word	0x20202020
 800dce8:	20202020 	.word	0x20202020
 800dcec:	20202020 	.word	0x20202020
 800dcf0:	20202020 	.word	0x20202020
 800dcf4:	20202020 	.word	0x20202020
 800dcf8:	20202020 	.word	0x20202020
 800dcfc:	20202020 	.word	0x20202020
 800dd00:	20202020 	.word	0x20202020
 800dd04:	00000a0d 	.word	0x00000a0d
 800dd08:	20206325 	.word	0x20206325
 800dd0c:	20202020 	.word	0x20202020
 800dd10:	616d2020 	.word	0x616d2020
 800dd14:	62206564 	.word	0x62206564
 800dd18:	203a2079 	.word	0x203a2079
 800dd1c:	206f6843 	.word	0x206f6843
 800dd20:	206e6148 	.word	0x206e6148
 800dd24:	6f656843 	.word	0x6f656843
 800dd28:	2020206c 	.word	0x2020206c
 800dd2c:	20202020 	.word	0x20202020
 800dd30:	20202020 	.word	0x20202020
 800dd34:	00000a0d 	.word	0x00000a0d
 800dd38:	45564f4d 	.word	0x45564f4d
 800dd3c:	00000000 	.word	0x00000000
 800dd40:	6f626f52 	.word	0x6f626f52
 800dd44:	6f4d2074 	.word	0x6f4d2074
 800dd48:	00006576 	.word	0x00006576
 800dd4c:	004d5750 	.word	0x004d5750
 800dd50:	25206425 	.word	0x25206425
 800dd54:	00000a64 	.word	0x00000a64
 800dd58:	0d0a0c20 	.word	0x0d0a0c20
 800dd5c:	00000b09 	.word	0x00000b09

0800dd60 <Virtual_Com_Port_StringVendor>:
 800dd60:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 800dd70:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 800dd80:	00630069 00000073                       i.c.s...

0800dd88 <Virtual_Com_Port_DeviceDescriptor>:
 800dd88:	02000112 40000002 57400483 02010200     .......@..@W....
 800dd98:	00000103                                ....

0800dd9c <Virtual_Com_Port_StringLangID>:
 800dd9c:	04090304                                ....

0800dda0 <Virtual_Com_Port_StringProduct>:
 800dda0:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 800ddb0:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 800ddc0:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 800ddd0:	00000020                                 ...

0800ddd4 <Virtual_Com_Port_ConfigDescriptor>:
 800ddd4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800dde4:	24050001 05011000 01000124 02022404     ...$....$....$..
 800ddf4:	00062405 82050701 ff000803 00010409     .$..............
 800de04:	00000a02 03050700 00004002 02810507     .........@......
 800de14:	00000040                                @...

0800de18 <_ctype_>:
 800de18:	20202000 20202020 28282020 20282828     .         ((((( 
 800de28:	20202020 20202020 20202020 20202020                     
 800de38:	10108820 10101010 10101010 10101010      ...............
 800de48:	04040410 04040404 10040404 10101010     ................
 800de58:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800de68:	01010101 01010101 01010101 10101010     ................
 800de78:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800de88:	02020202 02020202 02020202 10101010     ................
 800de98:	00000020 00000000 00000000 00000000      ...............
	...
 800df1c:	00000043                                C...

0800df20 <basefix.6637>:
 800df20:	0001000a 00030002 00050004 00070006     ................
 800df30:	00090008 000b000a 000d000c 000f000e     ................
 800df40:	00000010 646c2565 00000000 49534f50     ....e%ld....POSI
 800df50:	00000058 0000002e 0000666e 74696e69     X.......nf..init
 800df60:	00000079 00006e61                       y...an..

0800df68 <tinytens>:
 800df68:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800df78:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800df88:	64ac6f43 0e180628 00464e49 00666e69     Co.d(...INF.inf.
 800df98:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
 800dfa8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
 800dfb8:	37363534 62613938 66656463 00000000     456789abcdef....
 800dfc8:	6c756e28 0000296c 00000030              (null)..0...

0800dfd4 <zeroes.6721>:
 800dfd4:	30303030 30303030 30303030 30303030     0000000000000000

0800dfe4 <blanks.6720>:
 800dfe4:	20202020 20202020 20202020 20202020                     
 800dff4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800e004:	44434241 00004645 64636261 00006665     ABCDEF..abcdef..
 800e014:	33323130 37363534 00003938              0123456789..

0800e020 <p05.5242>:
 800e020:	00000005 00000019 0000007d 00000000     ........}.......

0800e030 <__mprec_tens>:
 800e030:	00000000 3ff00000 00000000 40240000     .......?......$@
 800e040:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800e050:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800e060:	00000000 412e8480 00000000 416312d0     .......A......cA
 800e070:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800e080:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800e090:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800e0a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800e0b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800e0c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800e0d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800e0e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800e0f0:	79d99db4 44ea7843                       ...yCx.D

0800e0f8 <__mprec_bigtens>:
 800e0f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800e108:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800e118:	7f73bf3c 75154fdd                       <.s..O.u
